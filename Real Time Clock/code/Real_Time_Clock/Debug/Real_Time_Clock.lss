
Real_Time_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  00003cbc  00003d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800128  00800128  00003e18  2**0
                  ALLOC
  3 .stab         00003468  00000000  00000000  00003e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000161c  00000000  00000000  00007280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000889c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000089fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000abd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bcd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cc54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cdd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__vector_10>
      2c:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 32       	cpi	r26, 0x28	; 40
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e2       	ldi	r26, 0x28	; 40
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 33       	cpi	r26, 0x35	; 53
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 86 12 	call	0x250c	; 0x250c <main>
      8a:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ef       	ldi	r26, 0xF8	; 248
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ef       	ldi	r24, 0xF8	; 248
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e8 1d 	jmp	0x3bd0	; 0x3bd0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 ef       	ldi	r22, 0xF8	; 248
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit         (void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f e0       	ldi	r24, 0x0F	; 15
     cbc:	80 83       	st	Z, r24
						   DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);						   

	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
						   DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);
											                    
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1
						   DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
											 
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	80 83       	st	Z, r24
						   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);
											 
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
     cda:	e2 e3       	ldi	r30, 0x32	; 50
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	10 82       	st	Z, r1
						   DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <DIO_u8SetPinDirection>:

u8  DIO_u8SetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	2e 97       	sbiw	r28, 0x0e	; 14
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	8a 83       	std	Y+2, r24	; 0x02
     cfc:	6b 83       	std	Y+3, r22	; 0x03
     cfe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))		
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	08 f0       	brcs	.+2      	; 0xd0c <DIO_u8SetPinDirection+0x26>
     d0a:	13 c1       	rjmp	.+550    	; 0xf32 <DIO_u8SetPinDirection+0x24c>
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	88 30       	cpi	r24, 0x08	; 8
     d10:	08 f0       	brcs	.+2      	; 0xd14 <DIO_u8SetPinDirection+0x2e>
     d12:	0f c1       	rjmp	.+542    	; 0xf32 <DIO_u8SetPinDirection+0x24c>
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	21 f0       	breq	.+8      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	88 23       	and	r24, r24
     d1e:	09 f0       	breq	.+2      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d20:	08 c1       	rjmp	.+528    	; 0xf32 <DIO_u8SetPinDirection+0x24c>
	{
		switch (Copy_u8PortId)
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3e 87       	std	Y+14, r19	; 0x0e
     d2a:	2d 87       	std	Y+13, r18	; 0x0d
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_u8SetPinDirection+0x52>
     d36:	50 c0       	rjmp	.+160    	; 0xdd8 <DIO_u8SetPinDirection+0xf2>
     d38:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3a:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <DIO_u8SetPinDirection+0x66>
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	71 f0       	breq	.+28     	; 0xd66 <DIO_u8SetPinDirection+0x80>
     d4a:	f1 c0       	rjmp	.+482    	; 0xf2e <DIO_u8SetPinDirection+0x248>
     d4c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d4e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_u8SetPinDirection+0x72>
     d56:	79 c0       	rjmp	.+242    	; 0xe4a <DIO_u8SetPinDirection+0x164>
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_u8SetPinDirection+0x7e>
     d62:	ac c0       	rjmp	.+344    	; 0xebc <DIO_u8SetPinDirection+0x1d6>
     d64:	e4 c0       	rjmp	.+456    	; 0xf2e <DIO_u8SetPinDirection+0x248>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinDirection)
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	3c 87       	std	Y+12, r19	; 0x0c
     d6e:	2b 87       	std	Y+11, r18	; 0x0b
     d70:	8b 85       	ldd	r24, Y+11	; 0x0b
     d72:	9c 85       	ldd	r25, Y+12	; 0x0c
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	c9 f0       	breq	.+50     	; 0xdaa <DIO_u8SetPinDirection+0xc4>
     d78:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7c:	21 30       	cpi	r18, 0x01	; 1
     d7e:	31 05       	cpc	r19, r1
     d80:	49 f5       	brne	.+82     	; 0xdd4 <DIO_u8SetPinDirection+0xee>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d82:	aa e3       	ldi	r26, 0x3A	; 58
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ea e3       	ldi	r30, 0x3A	; 58
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_u8SetPinDirection+0xba>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_u8SetPinDirection+0xb6>
     da4:	84 2b       	or	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	c5 c0       	rjmp	.+394    	; 0xf34 <DIO_u8SetPinDirection+0x24e>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     daa:	aa e3       	ldi	r26, 0x3A	; 58
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ea e3       	ldi	r30, 0x3A	; 58
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_u8SetPinDirection+0xe2>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_u8SetPinDirection+0xde>
     dcc:	80 95       	com	r24
     dce:	84 23       	and	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	b0 c0       	rjmp	.+352    	; 0xf34 <DIO_u8SetPinDirection+0x24e>
					default : Local_u8ErrorState = STD_TYPES_NOK;
     dd4:	19 82       	std	Y+1, r1	; 0x01
     dd6:	ae c0       	rjmp	.+348    	; 0xf34 <DIO_u8SetPinDirection+0x24e>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinDirection)
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	3a 87       	std	Y+10, r19	; 0x0a
     de0:	29 87       	std	Y+9, r18	; 0x09
     de2:	89 85       	ldd	r24, Y+9	; 0x09
     de4:	9a 85       	ldd	r25, Y+10	; 0x0a
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	c9 f0       	breq	.+50     	; 0xe1c <DIO_u8SetPinDirection+0x136>
     dea:	29 85       	ldd	r18, Y+9	; 0x09
     dec:	3a 85       	ldd	r19, Y+10	; 0x0a
     dee:	21 30       	cpi	r18, 0x01	; 1
     df0:	31 05       	cpc	r19, r1
     df2:	49 f5       	brne	.+82     	; 0xe46 <DIO_u8SetPinDirection+0x160>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     df4:	a7 e3       	ldi	r26, 0x37	; 55
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e3       	ldi	r30, 0x37	; 55
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_u8SetPinDirection+0x12c>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_u8SetPinDirection+0x128>
     e16:	84 2b       	or	r24, r20
     e18:	8c 93       	st	X, r24
     e1a:	8c c0       	rjmp	.+280    	; 0xf34 <DIO_u8SetPinDirection+0x24e>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     e1c:	a7 e3       	ldi	r26, 0x37	; 55
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e7 e3       	ldi	r30, 0x37	; 55
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_u8SetPinDirection+0x154>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_u8SetPinDirection+0x150>
     e3e:	80 95       	com	r24
     e40:	84 23       	and	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	77 c0       	rjmp	.+238    	; 0xf34 <DIO_u8SetPinDirection+0x24e>
					default : Local_u8ErrorState = STD_TYPES_NOK;
     e46:	19 82       	std	Y+1, r1	; 0x01
     e48:	75 c0       	rjmp	.+234    	; 0xf34 <DIO_u8SetPinDirection+0x24e>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinDirection)
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	38 87       	std	Y+8, r19	; 0x08
     e52:	2f 83       	std	Y+7, r18	; 0x07
     e54:	8f 81       	ldd	r24, Y+7	; 0x07
     e56:	98 85       	ldd	r25, Y+8	; 0x08
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	c9 f0       	breq	.+50     	; 0xe8e <DIO_u8SetPinDirection+0x1a8>
     e5c:	2f 81       	ldd	r18, Y+7	; 0x07
     e5e:	38 85       	ldd	r19, Y+8	; 0x08
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	31 05       	cpc	r19, r1
     e64:	49 f5       	brne	.+82     	; 0xeb8 <DIO_u8SetPinDirection+0x1d2>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e66:	a4 e3       	ldi	r26, 0x34	; 52
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e4 e3       	ldi	r30, 0x34	; 52
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_u8SetPinDirection+0x19e>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_u8SetPinDirection+0x19a>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	53 c0       	rjmp	.+166    	; 0xf34 <DIO_u8SetPinDirection+0x24e>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e8e:	a4 e3       	ldi	r26, 0x34	; 52
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e4 e3       	ldi	r30, 0x34	; 52
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8SetPinDirection+0x1c6>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8SetPinDirection+0x1c2>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	3e c0       	rjmp	.+124    	; 0xf34 <DIO_u8SetPinDirection+0x24e>
					default : Local_u8ErrorState = STD_TYPES_NOK;
     eb8:	19 82       	std	Y+1, r1	; 0x01
     eba:	3c c0       	rjmp	.+120    	; 0xf34 <DIO_u8SetPinDirection+0x24e>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinDirection)
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	3e 83       	std	Y+6, r19	; 0x06
     ec4:	2d 83       	std	Y+5, r18	; 0x05
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	9e 81       	ldd	r25, Y+6	; 0x06
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	c9 f0       	breq	.+50     	; 0xf00 <DIO_u8SetPinDirection+0x21a>
     ece:	2d 81       	ldd	r18, Y+5	; 0x05
     ed0:	3e 81       	ldd	r19, Y+6	; 0x06
     ed2:	21 30       	cpi	r18, 0x01	; 1
     ed4:	31 05       	cpc	r19, r1
     ed6:	49 f5       	brne	.+82     	; 0xf2a <DIO_u8SetPinDirection+0x244>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     ed8:	a1 e3       	ldi	r26, 0x31	; 49
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e1 e3       	ldi	r30, 0x31	; 49
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_u8SetPinDirection+0x210>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_u8SetPinDirection+0x20c>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	1a c0       	rjmp	.+52     	; 0xf34 <DIO_u8SetPinDirection+0x24e>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     f00:	a1 e3       	ldi	r26, 0x31	; 49
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e1 e3       	ldi	r30, 0x31	; 49
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_u8SetPinDirection+0x238>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_u8SetPinDirection+0x234>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <DIO_u8SetPinDirection+0x24e>
					default : Local_u8ErrorState = STD_TYPES_NOK;
     f2a:	19 82       	std	Y+1, r1	; 0x01
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <DIO_u8SetPinDirection+0x24e>
				}
			break;
           default : Local_u8ErrorState = STD_TYPES_NOK;			
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <DIO_u8SetPinDirection+0x24e>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f32:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
}
     f36:	2e 96       	adiw	r28, 0x0e	; 14
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	2e 97       	sbiw	r28, 0x0e	; 14
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	8a 83       	std	Y+2, r24	; 0x02
     f5e:	6b 83       	std	Y+3, r22	; 0x03
     f60:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	88 30       	cpi	r24, 0x08	; 8
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <DIO_u8SetPinValue+0x26>
     f6c:	08 c1       	rjmp	.+528    	; 0x117e <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3e 87       	std	Y+14, r19	; 0x0e
     f76:	2d 87       	std	Y+13, r18	; 0x0d
     f78:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <DIO_u8SetPinValue+0x3c>
     f82:	50 c0       	rjmp	.+160    	; 0x1024 <DIO_u8SetPinValue+0xdc>
     f84:	2d 85       	ldd	r18, Y+13	; 0x0d
     f86:	3e 85       	ldd	r19, Y+14	; 0x0e
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	2c f4       	brge	.+10     	; 0xf98 <DIO_u8SetPinValue+0x50>
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	9e 85       	ldd	r25, Y+14	; 0x0e
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	71 f0       	breq	.+28     	; 0xfb2 <DIO_u8SetPinValue+0x6a>
     f96:	f1 c0       	rjmp	.+482    	; 0x117a <DIO_u8SetPinValue+0x232>
     f98:	2d 85       	ldd	r18, Y+13	; 0x0d
     f9a:	3e 85       	ldd	r19, Y+14	; 0x0e
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_u8SetPinValue+0x5c>
     fa2:	79 c0       	rjmp	.+242    	; 0x1096 <DIO_u8SetPinValue+0x14e>
     fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	91 05       	cpc	r25, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <DIO_u8SetPinValue+0x68>
     fae:	ac c0       	rjmp	.+344    	; 0x1108 <DIO_u8SetPinValue+0x1c0>
     fb0:	e4 c0       	rjmp	.+456    	; 0x117a <DIO_u8SetPinValue+0x232>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinValue)
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3c 87       	std	Y+12, r19	; 0x0c
     fba:	2b 87       	std	Y+11, r18	; 0x0b
     fbc:	8b 85       	ldd	r24, Y+11	; 0x0b
     fbe:	9c 85       	ldd	r25, Y+12	; 0x0c
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	c9 f0       	breq	.+50     	; 0xff6 <DIO_u8SetPinValue+0xae>
     fc4:	2b 85       	ldd	r18, Y+11	; 0x0b
     fc6:	3c 85       	ldd	r19, Y+12	; 0x0c
     fc8:	21 30       	cpi	r18, 0x01	; 1
     fca:	31 05       	cpc	r19, r1
     fcc:	49 f5       	brne	.+82     	; 0x1020 <DIO_u8SetPinValue+0xd8>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fce:	ab e3       	ldi	r26, 0x3B	; 59
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	eb e3       	ldi	r30, 0x3B	; 59
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_u8SetPinValue+0xa4>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_u8SetPinValue+0xa0>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	c5 c0       	rjmp	.+394    	; 0x1180 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     ff6:	ab e3       	ldi	r26, 0x3B	; 59
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_u8SetPinValue+0xcc>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_u8SetPinValue+0xc8>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	b0 c0       	rjmp	.+352    	; 0x1180 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1020:	19 82       	std	Y+1, r1	; 0x01
    1022:	ae c0       	rjmp	.+348    	; 0x1180 <DIO_u8SetPinValue+0x238>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinValue)
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3a 87       	std	Y+10, r19	; 0x0a
    102c:	29 87       	std	Y+9, r18	; 0x09
    102e:	89 85       	ldd	r24, Y+9	; 0x09
    1030:	9a 85       	ldd	r25, Y+10	; 0x0a
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	c9 f0       	breq	.+50     	; 0x1068 <DIO_u8SetPinValue+0x120>
    1036:	29 85       	ldd	r18, Y+9	; 0x09
    1038:	3a 85       	ldd	r19, Y+10	; 0x0a
    103a:	21 30       	cpi	r18, 0x01	; 1
    103c:	31 05       	cpc	r19, r1
    103e:	49 f5       	brne	.+82     	; 0x1092 <DIO_u8SetPinValue+0x14a>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1040:	a8 e3       	ldi	r26, 0x38	; 56
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e8 e3       	ldi	r30, 0x38	; 56
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_u8SetPinValue+0x116>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_u8SetPinValue+0x112>
    1062:	84 2b       	or	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	8c c0       	rjmp	.+280    	; 0x1180 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1068:	a8 e3       	ldi	r26, 0x38	; 56
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e8 e3       	ldi	r30, 0x38	; 56
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_u8SetPinValue+0x13e>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_u8SetPinValue+0x13a>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	77 c0       	rjmp	.+238    	; 0x1180 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1092:	19 82       	std	Y+1, r1	; 0x01
    1094:	75 c0       	rjmp	.+234    	; 0x1180 <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinValue)
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	38 87       	std	Y+8, r19	; 0x08
    109e:	2f 83       	std	Y+7, r18	; 0x07
    10a0:	8f 81       	ldd	r24, Y+7	; 0x07
    10a2:	98 85       	ldd	r25, Y+8	; 0x08
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	c9 f0       	breq	.+50     	; 0x10da <DIO_u8SetPinValue+0x192>
    10a8:	2f 81       	ldd	r18, Y+7	; 0x07
    10aa:	38 85       	ldd	r19, Y+8	; 0x08
    10ac:	21 30       	cpi	r18, 0x01	; 1
    10ae:	31 05       	cpc	r19, r1
    10b0:	49 f5       	brne	.+82     	; 0x1104 <DIO_u8SetPinValue+0x1bc>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10b2:	a5 e3       	ldi	r26, 0x35	; 53
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e5 e3       	ldi	r30, 0x35	; 53
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_u8SetPinValue+0x188>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_u8SetPinValue+0x184>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	53 c0       	rjmp	.+166    	; 0x1180 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10da:	a5 e3       	ldi	r26, 0x35	; 53
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e5 e3       	ldi	r30, 0x35	; 53
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_u8SetPinValue+0x1b0>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_u8SetPinValue+0x1ac>
    10fc:	80 95       	com	r24
    10fe:	84 23       	and	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	3e c0       	rjmp	.+124    	; 0x1180 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1104:	19 82       	std	Y+1, r1	; 0x01
    1106:	3c c0       	rjmp	.+120    	; 0x1180 <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinValue)
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3e 83       	std	Y+6, r19	; 0x06
    1110:	2d 83       	std	Y+5, r18	; 0x05
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	c9 f0       	breq	.+50     	; 0x114c <DIO_u8SetPinValue+0x204>
    111a:	2d 81       	ldd	r18, Y+5	; 0x05
    111c:	3e 81       	ldd	r19, Y+6	; 0x06
    111e:	21 30       	cpi	r18, 0x01	; 1
    1120:	31 05       	cpc	r19, r1
    1122:	49 f5       	brne	.+82     	; 0x1176 <DIO_u8SetPinValue+0x22e>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1124:	a2 e3       	ldi	r26, 0x32	; 50
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e2 e3       	ldi	r30, 0x32	; 50
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_u8SetPinValue+0x1fa>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_u8SetPinValue+0x1f6>
    1146:	84 2b       	or	r24, r20
    1148:	8c 93       	st	X, r24
    114a:	1a c0       	rjmp	.+52     	; 0x1180 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    114c:	a2 e3       	ldi	r26, 0x32	; 50
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e2 e3       	ldi	r30, 0x32	; 50
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 2e       	mov	r0, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_u8SetPinValue+0x222>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	0a 94       	dec	r0
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_u8SetPinValue+0x21e>
    116e:	80 95       	com	r24
    1170:	84 23       	and	r24, r20
    1172:	8c 93       	st	X, r24
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1176:	19 82       	std	Y+1, r1	; 0x01
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <DIO_u8SetPinValue+0x238>
				}		
			break;
			default :
				Local_u8ErrorState = STD_TYPES_NOK;
    117a:	19 82       	std	Y+1, r1	; 0x01
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <DIO_u8SetPinValue+0x238>
		}
			
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    117e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1180:	89 81       	ldd	r24, Y+1	; 0x01
}
    1182:	2e 96       	adiw	r28, 0x0e	; 14
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 * Copy_pu8ReturnedPinValue)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	28 97       	sbiw	r28, 0x08	; 8
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	8b 83       	std	Y+3, r24	; 0x03
    11aa:	6c 83       	std	Y+4, r22	; 0x04
    11ac:	5e 83       	std	Y+6, r21	; 0x06
    11ae:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	84 30       	cpi	r24, 0x04	; 4
    11b8:	08 f0       	brcs	.+2      	; 0x11bc <DIO_u8GetPinValue+0x28>
    11ba:	a1 c0       	rjmp	.+322    	; 0x12fe <DIO_u8GetPinValue+0x16a>
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	88 30       	cpi	r24, 0x08	; 8
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <DIO_u8GetPinValue+0x30>
    11c2:	9d c0       	rjmp	.+314    	; 0x12fe <DIO_u8GetPinValue+0x16a>
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	09 f4       	brne	.+2      	; 0x11ce <DIO_u8GetPinValue+0x3a>
    11cc:	98 c0       	rjmp	.+304    	; 0x12fe <DIO_u8GetPinValue+0x16a>
	{
		switch (Copy_u8PortId)
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	38 87       	std	Y+8, r19	; 0x08
    11d6:	2f 83       	std	Y+7, r18	; 0x07
    11d8:	4f 81       	ldd	r20, Y+7	; 0x07
    11da:	58 85       	ldd	r21, Y+8	; 0x08
    11dc:	41 30       	cpi	r20, 0x01	; 1
    11de:	51 05       	cpc	r21, r1
    11e0:	a9 f1       	breq	.+106    	; 0x124c <DIO_u8GetPinValue+0xb8>
    11e2:	8f 81       	ldd	r24, Y+7	; 0x07
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	91 05       	cpc	r25, r1
    11ea:	34 f4       	brge	.+12     	; 0x11f8 <DIO_u8GetPinValue+0x64>
    11ec:	2f 81       	ldd	r18, Y+7	; 0x07
    11ee:	38 85       	ldd	r19, Y+8	; 0x08
    11f0:	21 15       	cp	r18, r1
    11f2:	31 05       	cpc	r19, r1
    11f4:	71 f0       	breq	.+28     	; 0x1212 <DIO_u8GetPinValue+0x7e>
    11f6:	81 c0       	rjmp	.+258    	; 0x12fa <DIO_u8GetPinValue+0x166>
    11f8:	4f 81       	ldd	r20, Y+7	; 0x07
    11fa:	58 85       	ldd	r21, Y+8	; 0x08
    11fc:	42 30       	cpi	r20, 0x02	; 2
    11fe:	51 05       	cpc	r21, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <DIO_u8GetPinValue+0x70>
    1202:	41 c0       	rjmp	.+130    	; 0x1286 <DIO_u8GetPinValue+0xf2>
    1204:	8f 81       	ldd	r24, Y+7	; 0x07
    1206:	98 85       	ldd	r25, Y+8	; 0x08
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <DIO_u8GetPinValue+0x7c>
    120e:	58 c0       	rjmp	.+176    	; 0x12c0 <DIO_u8GetPinValue+0x12c>
    1210:	74 c0       	rjmp	.+232    	; 0x12fa <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA:
				Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    1212:	e9 e3       	ldi	r30, 0x39	; 57
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a9 01       	movw	r20, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_u8GetPinValue+0x96>
    1226:	55 95       	asr	r21
    1228:	47 95       	ror	r20
    122a:	8a 95       	dec	r24
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_u8GetPinValue+0x92>
    122e:	ca 01       	movw	r24, r20
    1230:	81 70       	andi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	88 23       	and	r24, r24
    1238:	21 f4       	brne	.+8      	; 0x1242 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    123a:	ed 81       	ldd	r30, Y+5	; 0x05
    123c:	fe 81       	ldd	r31, Y+6	; 0x06
    123e:	10 82       	st	Z, r1
    1240:	5f c0       	rjmp	.+190    	; 0x1300 <DIO_u8GetPinValue+0x16c>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1242:	ed 81       	ldd	r30, Y+5	; 0x05
    1244:	fe 81       	ldd	r31, Y+6	; 0x06
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 83       	st	Z, r24
    124a:	5a c0       	rjmp	.+180    	; 0x1300 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB:
				Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    124c:	e6 e3       	ldi	r30, 0x36	; 54
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	a9 01       	movw	r20, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <DIO_u8GetPinValue+0xd0>
    1260:	55 95       	asr	r21
    1262:	47 95       	ror	r20
    1264:	8a 95       	dec	r24
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <DIO_u8GetPinValue+0xcc>
    1268:	ca 01       	movw	r24, r20
    126a:	81 70       	andi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	88 23       	and	r24, r24
    1272:	21 f4       	brne	.+8      	; 0x127c <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1274:	ed 81       	ldd	r30, Y+5	; 0x05
    1276:	fe 81       	ldd	r31, Y+6	; 0x06
    1278:	10 82       	st	Z, r1
    127a:	42 c0       	rjmp	.+132    	; 0x1300 <DIO_u8GetPinValue+0x16c>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    127c:	ed 81       	ldd	r30, Y+5	; 0x05
    127e:	fe 81       	ldd	r31, Y+6	; 0x06
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	80 83       	st	Z, r24
    1284:	3d c0       	rjmp	.+122    	; 0x1300 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC:
				Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1286:	e3 e3       	ldi	r30, 0x33	; 51
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a9 01       	movw	r20, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_u8GetPinValue+0x10a>
    129a:	55 95       	asr	r21
    129c:	47 95       	ror	r20
    129e:	8a 95       	dec	r24
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_u8GetPinValue+0x106>
    12a2:	ca 01       	movw	r24, r20
    12a4:	81 70       	andi	r24, 0x01	; 1
    12a6:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	88 23       	and	r24, r24
    12ac:	21 f4       	brne	.+8      	; 0x12b6 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12ae:	ed 81       	ldd	r30, Y+5	; 0x05
    12b0:	fe 81       	ldd	r31, Y+6	; 0x06
    12b2:	10 82       	st	Z, r1
    12b4:	25 c0       	rjmp	.+74     	; 0x1300 <DIO_u8GetPinValue+0x16c>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12b6:	ed 81       	ldd	r30, Y+5	; 0x05
    12b8:	fe 81       	ldd	r31, Y+6	; 0x06
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 83       	st	Z, r24
    12be:	20 c0       	rjmp	.+64     	; 0x1300 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD:
				Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    12c0:	e0 e3       	ldi	r30, 0x30	; 48
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a9 01       	movw	r20, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_u8GetPinValue+0x144>
    12d4:	55 95       	asr	r21
    12d6:	47 95       	ror	r20
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_u8GetPinValue+0x140>
    12dc:	ca 01       	movw	r24, r20
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	88 23       	and	r24, r24
    12e6:	21 f4       	brne	.+8      	; 0x12f0 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12e8:	ed 81       	ldd	r30, Y+5	; 0x05
    12ea:	fe 81       	ldd	r31, Y+6	; 0x06
    12ec:	10 82       	st	Z, r1
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <DIO_u8GetPinValue+0x16c>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12f0:	ed 81       	ldd	r30, Y+5	; 0x05
    12f2:	fe 81       	ldd	r31, Y+6	; 0x06
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 83       	st	Z, r24
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default : Local_u8ErrorState = STD_TYPES_NOK;
    12fa:	1a 82       	std	Y+2, r1	; 0x02
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12fe:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1302:	28 96       	adiw	r28, 0x08	; 8
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <DIO_u8SetPortDirection>:

u8  DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	2d 97       	sbiw	r28, 0x0d	; 13
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	8a 83       	std	Y+2, r24	; 0x02
    132a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	21 f0       	breq	.+8      	; 0x133e <DIO_u8SetPortDirection+0x2a>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 23       	and	r24, r24
    133a:	09 f0       	breq	.+2      	; 0x133e <DIO_u8SetPortDirection+0x2a>
    133c:	86 c0       	rjmp	.+268    	; 0x144a <DIO_u8SetPortDirection+0x136>
	{
		switch (Copy_u8PortId)
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3d 87       	std	Y+13, r19	; 0x0d
    1346:	2c 87       	std	Y+12, r18	; 0x0c
    1348:	8c 85       	ldd	r24, Y+12	; 0x0c
    134a:	9d 85       	ldd	r25, Y+13	; 0x0d
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	79 f1       	breq	.+94     	; 0x13b0 <DIO_u8SetPortDirection+0x9c>
    1352:	2c 85       	ldd	r18, Y+12	; 0x0c
    1354:	3d 85       	ldd	r19, Y+13	; 0x0d
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	2c f4       	brge	.+10     	; 0x1366 <DIO_u8SetPortDirection+0x52>
    135c:	8c 85       	ldd	r24, Y+12	; 0x0c
    135e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	69 f0       	breq	.+26     	; 0x137e <DIO_u8SetPortDirection+0x6a>
    1364:	70 c0       	rjmp	.+224    	; 0x1446 <DIO_u8SetPortDirection+0x132>
    1366:	2c 85       	ldd	r18, Y+12	; 0x0c
    1368:	3d 85       	ldd	r19, Y+13	; 0x0d
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	c9 f1       	breq	.+114    	; 0x13e2 <DIO_u8SetPortDirection+0xce>
    1370:	8c 85       	ldd	r24, Y+12	; 0x0c
    1372:	9d 85       	ldd	r25, Y+13	; 0x0d
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <DIO_u8SetPortDirection+0x68>
    137a:	4c c0       	rjmp	.+152    	; 0x1414 <DIO_u8SetPortDirection+0x100>
    137c:	64 c0       	rjmp	.+200    	; 0x1446 <DIO_u8SetPortDirection+0x132>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PortDirection)
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	3b 87       	std	Y+11, r19	; 0x0b
    1386:	2a 87       	std	Y+10, r18	; 0x0a
    1388:	8a 85       	ldd	r24, Y+10	; 0x0a
    138a:	9b 85       	ldd	r25, Y+11	; 0x0b
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	51 f0       	breq	.+20     	; 0x13a4 <DIO_u8SetPortDirection+0x90>
    1390:	2a 85       	ldd	r18, Y+10	; 0x0a
    1392:	3b 85       	ldd	r19, Y+11	; 0x0b
    1394:	21 30       	cpi	r18, 0x01	; 1
    1396:	31 05       	cpc	r19, r1
    1398:	49 f4       	brne	.+18     	; 0x13ac <DIO_u8SetPortDirection+0x98>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xff;break;
    139a:	ea e3       	ldi	r30, 0x3A	; 58
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	8f ef       	ldi	r24, 0xFF	; 255
    13a0:	80 83       	st	Z, r24
    13a2:	54 c0       	rjmp	.+168    	; 0x144c <DIO_u8SetPortDirection+0x138>
					case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break;
    13a4:	ea e3       	ldi	r30, 0x3A	; 58
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	10 82       	st	Z, r1
    13aa:	50 c0       	rjmp	.+160    	; 0x144c <DIO_u8SetPortDirection+0x138>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    13ac:	19 82       	std	Y+1, r1	; 0x01
    13ae:	4e c0       	rjmp	.+156    	; 0x144c <DIO_u8SetPortDirection+0x138>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PortDirection)
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	39 87       	std	Y+9, r19	; 0x09
    13b8:	28 87       	std	Y+8, r18	; 0x08
    13ba:	88 85       	ldd	r24, Y+8	; 0x08
    13bc:	99 85       	ldd	r25, Y+9	; 0x09
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	51 f0       	breq	.+20     	; 0x13d6 <DIO_u8SetPortDirection+0xc2>
    13c2:	28 85       	ldd	r18, Y+8	; 0x08
    13c4:	39 85       	ldd	r19, Y+9	; 0x09
    13c6:	21 30       	cpi	r18, 0x01	; 1
    13c8:	31 05       	cpc	r19, r1
    13ca:	49 f4       	brne	.+18     	; 0x13de <DIO_u8SetPortDirection+0xca>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xff;break;
    13cc:	e7 e3       	ldi	r30, 0x37	; 55
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	80 83       	st	Z, r24
    13d4:	3b c0       	rjmp	.+118    	; 0x144c <DIO_u8SetPortDirection+0x138>
					case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break;
    13d6:	e7 e3       	ldi	r30, 0x37	; 55
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	10 82       	st	Z, r1
    13dc:	37 c0       	rjmp	.+110    	; 0x144c <DIO_u8SetPortDirection+0x138>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    13de:	19 82       	std	Y+1, r1	; 0x01
    13e0:	35 c0       	rjmp	.+106    	; 0x144c <DIO_u8SetPortDirection+0x138>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PortDirection)
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	3f 83       	std	Y+7, r19	; 0x07
    13ea:	2e 83       	std	Y+6, r18	; 0x06
    13ec:	8e 81       	ldd	r24, Y+6	; 0x06
    13ee:	9f 81       	ldd	r25, Y+7	; 0x07
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	51 f0       	breq	.+20     	; 0x1408 <DIO_u8SetPortDirection+0xf4>
    13f4:	2e 81       	ldd	r18, Y+6	; 0x06
    13f6:	3f 81       	ldd	r19, Y+7	; 0x07
    13f8:	21 30       	cpi	r18, 0x01	; 1
    13fa:	31 05       	cpc	r19, r1
    13fc:	49 f4       	brne	.+18     	; 0x1410 <DIO_u8SetPortDirection+0xfc>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xff;break;
    13fe:	e4 e3       	ldi	r30, 0x34	; 52
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8f ef       	ldi	r24, 0xFF	; 255
    1404:	80 83       	st	Z, r24
    1406:	22 c0       	rjmp	.+68     	; 0x144c <DIO_u8SetPortDirection+0x138>
					case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break;
    1408:	e4 e3       	ldi	r30, 0x34	; 52
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	10 82       	st	Z, r1
    140e:	1e c0       	rjmp	.+60     	; 0x144c <DIO_u8SetPortDirection+0x138>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1410:	19 82       	std	Y+1, r1	; 0x01
    1412:	1c c0       	rjmp	.+56     	; 0x144c <DIO_u8SetPortDirection+0x138>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PortDirection)
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	3d 83       	std	Y+5, r19	; 0x05
    141c:	2c 83       	std	Y+4, r18	; 0x04
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	9d 81       	ldd	r25, Y+5	; 0x05
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	51 f0       	breq	.+20     	; 0x143a <DIO_u8SetPortDirection+0x126>
    1426:	2c 81       	ldd	r18, Y+4	; 0x04
    1428:	3d 81       	ldd	r19, Y+5	; 0x05
    142a:	21 30       	cpi	r18, 0x01	; 1
    142c:	31 05       	cpc	r19, r1
    142e:	49 f4       	brne	.+18     	; 0x1442 <DIO_u8SetPortDirection+0x12e>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xff;break;
    1430:	e1 e3       	ldi	r30, 0x31	; 49
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	80 83       	st	Z, r24
    1438:	09 c0       	rjmp	.+18     	; 0x144c <DIO_u8SetPortDirection+0x138>
					case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break;
    143a:	e1 e3       	ldi	r30, 0x31	; 49
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	10 82       	st	Z, r1
    1440:	05 c0       	rjmp	.+10     	; 0x144c <DIO_u8SetPortDirection+0x138>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1442:	19 82       	std	Y+1, r1	; 0x01
    1444:	03 c0       	rjmp	.+6      	; 0x144c <DIO_u8SetPortDirection+0x138>
				}
			break;
			default :Local_u8ErrorState = STD_TYPES_NOK;
    1446:	19 82       	std	Y+1, r1	; 0x01
    1448:	01 c0       	rjmp	.+2      	; 0x144c <DIO_u8SetPortDirection+0x138>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    144a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    144c:	89 81       	ldd	r24, Y+1	; 0x01
}
    144e:	2d 96       	adiw	r28, 0x0d	; 13
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <DIO_u8SetPortValue+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <DIO_u8SetPortValue+0x8>
    1468:	0f 92       	push	r0
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	8a 83       	std	Y+2, r24	; 0x02
    1470:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3d 83       	std	Y+5, r19	; 0x05
    147e:	2c 83       	std	Y+4, r18	; 0x04
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	d1 f0       	breq	.+52     	; 0x14be <DIO_u8SetPortValue+0x5e>
    148a:	2c 81       	ldd	r18, Y+4	; 0x04
    148c:	3d 81       	ldd	r19, Y+5	; 0x05
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	2c f4       	brge	.+10     	; 0x149e <DIO_u8SetPortValue+0x3e>
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	9d 81       	ldd	r25, Y+5	; 0x05
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	61 f0       	breq	.+24     	; 0x14b4 <DIO_u8SetPortValue+0x54>
    149c:	1f c0       	rjmp	.+62     	; 0x14dc <DIO_u8SetPortValue+0x7c>
    149e:	2c 81       	ldd	r18, Y+4	; 0x04
    14a0:	3d 81       	ldd	r19, Y+5	; 0x05
    14a2:	22 30       	cpi	r18, 0x02	; 2
    14a4:	31 05       	cpc	r19, r1
    14a6:	81 f0       	breq	.+32     	; 0x14c8 <DIO_u8SetPortValue+0x68>
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	91 05       	cpc	r25, r1
    14b0:	81 f0       	breq	.+32     	; 0x14d2 <DIO_u8SetPortValue+0x72>
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    14b4:	eb e3       	ldi	r30, 0x3B	; 59
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	80 83       	st	Z, r24
    14bc:	10 c0       	rjmp	.+32     	; 0x14de <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    14be:	e8 e3       	ldi	r30, 0x38	; 56
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	80 83       	st	Z, r24
    14c6:	0b c0       	rjmp	.+22     	; 0x14de <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    14c8:	e5 e3       	ldi	r30, 0x35	; 53
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	80 83       	st	Z, r24
    14d0:	06 c0       	rjmp	.+12     	; 0x14de <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    14d2:	e2 e3       	ldi	r30, 0x32	; 50
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	80 83       	st	Z, r24
    14da:	01 c0       	rjmp	.+2      	; 0x14de <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = STD_TYPES_NOK;
    14dc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    14de:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 * Copy_pu8ReturnedPortValue)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <DIO_u8GetPortValue+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <DIO_u8GetPortValue+0x8>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <DIO_u8GetPortValue+0xa>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	8a 83       	std	Y+2, r24	; 0x02
    1500:	7c 83       	std	Y+4, r23	; 0x04
    1502:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_pu8ReturnedPortValue != NULL)
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	e9 f1       	breq	.+122    	; 0x158a <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	3e 83       	std	Y+6, r19	; 0x06
    1518:	2d 83       	std	Y+5, r18	; 0x05
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	91 05       	cpc	r25, r1
    1522:	e1 f0       	breq	.+56     	; 0x155c <DIO_u8GetPortValue+0x6c>
    1524:	2d 81       	ldd	r18, Y+5	; 0x05
    1526:	3e 81       	ldd	r19, Y+6	; 0x06
    1528:	22 30       	cpi	r18, 0x02	; 2
    152a:	31 05       	cpc	r19, r1
    152c:	2c f4       	brge	.+10     	; 0x1538 <DIO_u8GetPortValue+0x48>
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	61 f0       	breq	.+24     	; 0x154e <DIO_u8GetPortValue+0x5e>
    1536:	27 c0       	rjmp	.+78     	; 0x1586 <DIO_u8GetPortValue+0x96>
    1538:	2d 81       	ldd	r18, Y+5	; 0x05
    153a:	3e 81       	ldd	r19, Y+6	; 0x06
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	a1 f0       	breq	.+40     	; 0x156a <DIO_u8GetPortValue+0x7a>
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	83 30       	cpi	r24, 0x03	; 3
    1548:	91 05       	cpc	r25, r1
    154a:	b1 f0       	breq	.+44     	; 0x1578 <DIO_u8GetPortValue+0x88>
    154c:	1c c0       	rjmp	.+56     	; 0x1586 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    154e:	e9 e3       	ldi	r30, 0x39	; 57
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	eb 81       	ldd	r30, Y+3	; 0x03
    1556:	fc 81       	ldd	r31, Y+4	; 0x04
    1558:	80 83       	st	Z, r24
    155a:	18 c0       	rjmp	.+48     	; 0x158c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    155c:	e6 e3       	ldi	r30, 0x36	; 54
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	eb 81       	ldd	r30, Y+3	; 0x03
    1564:	fc 81       	ldd	r31, Y+4	; 0x04
    1566:	80 83       	st	Z, r24
    1568:	11 c0       	rjmp	.+34     	; 0x158c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    156a:	e3 e3       	ldi	r30, 0x33	; 51
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	eb 81       	ldd	r30, Y+3	; 0x03
    1572:	fc 81       	ldd	r31, Y+4	; 0x04
    1574:	80 83       	st	Z, r24
    1576:	0a c0       	rjmp	.+20     	; 0x158c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    1578:	e0 e3       	ldi	r30, 0x30	; 48
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	eb 81       	ldd	r30, Y+3	; 0x03
    1580:	fc 81       	ldd	r31, Y+4	; 0x04
    1582:	80 83       	st	Z, r24
    1584:	03 c0       	rjmp	.+6      	; 0x158c <DIO_u8GetPortValue+0x9c>
			default :
				Local_u8ErrorState = STD_TYPES_NOK;
    1586:	19 82       	std	Y+1, r1	; 0x01
    1588:	01 c0       	rjmp	.+2      	; 0x158c <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    158a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    158c:	89 81       	ldd	r24, Y+1	; 0x01
}
    158e:	26 96       	adiw	r28, 0x06	; 6
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	65 97       	sbiw	r28, 0x15	; 21
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	9d 8b       	std	Y+21, r25	; 0x15
    15b6:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    15bc:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    15be:	8c 89       	ldd	r24, Y+20	; 0x14
    15c0:	9d 89       	ldd	r25, Y+21	; 0x15
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <KPD_u8GetKeyState+0x28>
    15c6:	f0 c0       	rjmp	.+480    	; 0x17a8 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    15c8:	ec 89       	ldd	r30, Y+20	; 0x14
    15ca:	fd 89       	ldd	r31, Y+21	; 0x15
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    15d0:	19 8a       	std	Y+17, r1	; 0x11
    15d2:	e5 c0       	rjmp	.+458    	; 0x179e <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    15d4:	89 89       	ldd	r24, Y+17	; 0x11
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	fc 01       	movw	r30, r24
    15dc:	e6 5e       	subi	r30, 0xE6	; 230
    15de:	fe 4f       	sbci	r31, 0xFE	; 254
    15e0:	90 81       	ld	r25, Z
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	69 2f       	mov	r22, r25
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    15ec:	18 8a       	std	Y+16, r1	; 0x10
    15ee:	c1 c0       	rjmp	.+386    	; 0x1772 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    15f0:	88 89       	ldd	r24, Y+16	; 0x10
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	fc 01       	movw	r30, r24
    15f8:	e2 5e       	subi	r30, 0xE2	; 226
    15fa:	fe 4f       	sbci	r31, 0xFE	; 254
    15fc:	90 81       	ld	r25, Z
    15fe:	9e 01       	movw	r18, r28
    1600:	2d 5e       	subi	r18, 0xED	; 237
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	82 e0       	ldi	r24, 0x02	; 2
    1606:	69 2f       	mov	r22, r25
    1608:	a9 01       	movw	r20, r18
    160a:	0e 94 ca 08 	call	0x1194	; 0x1194 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)/* Switch is Pressed */
    160e:	8b 89       	ldd	r24, Y+19	; 0x13
    1610:	88 23       	and	r24, r24
    1612:	09 f0       	breq	.+2      	; 0x1616 <KPD_u8GetKeyState+0x76>
    1614:	ab c0       	rjmp	.+342    	; 0x176c <KPD_u8GetKeyState+0x1cc>
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a0 ea       	ldi	r26, 0xA0	; 160
    161c:	b1 e4       	ldi	r27, 0x41	; 65
    161e:	8b 87       	std	Y+11, r24	; 0x0b
    1620:	9c 87       	std	Y+12, r25	; 0x0c
    1622:	ad 87       	std	Y+13, r26	; 0x0d
    1624:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1626:	6b 85       	ldd	r22, Y+11	; 0x0b
    1628:	7c 85       	ldd	r23, Y+12	; 0x0c
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	4a ef       	ldi	r20, 0xFA	; 250
    1634:	54 e4       	ldi	r21, 0x44	; 68
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	8f 83       	std	Y+7, r24	; 0x07
    1640:	98 87       	std	Y+8, r25	; 0x08
    1642:	a9 87       	std	Y+9, r26	; 0x09
    1644:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1646:	6f 81       	ldd	r22, Y+7	; 0x07
    1648:	78 85       	ldd	r23, Y+8	; 0x08
    164a:	89 85       	ldd	r24, Y+9	; 0x09
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e8       	ldi	r20, 0x80	; 128
    1654:	5f e3       	ldi	r21, 0x3F	; 63
    1656:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    165a:	88 23       	and	r24, r24
    165c:	2c f4       	brge	.+10     	; 0x1668 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	3f c0       	rjmp	.+126    	; 0x16e6 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    1668:	6f 81       	ldd	r22, Y+7	; 0x07
    166a:	78 85       	ldd	r23, Y+8	; 0x08
    166c:	89 85       	ldd	r24, Y+9	; 0x09
    166e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	3f ef       	ldi	r19, 0xFF	; 255
    1674:	4f e7       	ldi	r20, 0x7F	; 127
    1676:	57 e4       	ldi	r21, 0x47	; 71
    1678:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    167c:	18 16       	cp	r1, r24
    167e:	4c f5       	brge	.+82     	; 0x16d2 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1680:	6b 85       	ldd	r22, Y+11	; 0x0b
    1682:	7c 85       	ldd	r23, Y+12	; 0x0c
    1684:	8d 85       	ldd	r24, Y+13	; 0x0d
    1686:	9e 85       	ldd	r25, Y+14	; 0x0e
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e2       	ldi	r20, 0x20	; 32
    168e:	51 e4       	ldi	r21, 0x41	; 65
    1690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9e 83       	std	Y+6, r25	; 0x06
    16a6:	8d 83       	std	Y+5, r24	; 0x05
    16a8:	0f c0       	rjmp	.+30     	; 0x16c8 <KPD_u8GetKeyState+0x128>
    16aa:	88 ec       	ldi	r24, 0xC8	; 200
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <KPD_u8GetKeyState+0x116>
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	69 f7       	brne	.-38     	; 0x16aa <KPD_u8GetKeyState+0x10a>
    16d0:	14 c0       	rjmp	.+40     	; 0x16fa <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <KPD_u8GetKeyState+0x152>
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    16fa:	88 89       	ldd	r24, Y+16	; 0x10
    16fc:	88 2f       	mov	r24, r24
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	fc 01       	movw	r30, r24
    1702:	e2 5e       	subi	r30, 0xE2	; 226
    1704:	fe 4f       	sbci	r31, 0xFE	; 254
    1706:	90 81       	ld	r25, Z
    1708:	9e 01       	movw	r18, r28
    170a:	2d 5e       	subi	r18, 0xED	; 237
    170c:	3f 4f       	sbci	r19, 0xFF	; 255
    170e:	82 e0       	ldi	r24, 0x02	; 2
    1710:	69 2f       	mov	r22, r25
    1712:	a9 01       	movw	r20, r18
    1714:	0e 94 ca 08 	call	0x1194	; 0x1194 <DIO_u8GetPinValue>
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    171a:	88 89       	ldd	r24, Y+16	; 0x10
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	fc 01       	movw	r30, r24
    1722:	e2 5e       	subi	r30, 0xE2	; 226
    1724:	fe 4f       	sbci	r31, 0xFE	; 254
    1726:	90 81       	ld	r25, Z
    1728:	9e 01       	movw	r18, r28
    172a:	2d 5e       	subi	r18, 0xED	; 237
    172c:	3f 4f       	sbci	r19, 0xFF	; 255
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	69 2f       	mov	r22, r25
    1732:	a9 01       	movw	r20, r18
    1734:	0e 94 ca 08 	call	0x1194	; 0x1194 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    1738:	8b 89       	ldd	r24, Y+19	; 0x13
    173a:	88 23       	and	r24, r24
    173c:	71 f3       	breq	.-36     	; 0x171a <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    173e:	89 89       	ldd	r24, Y+17	; 0x11
    1740:	48 2f       	mov	r20, r24
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	88 89       	ldd	r24, Y+16	; 0x10
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	ca 01       	movw	r24, r20
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	82 0f       	add	r24, r18
    1756:	93 1f       	adc	r25, r19
    1758:	fc 01       	movw	r30, r24
    175a:	e6 5f       	subi	r30, 0xF6	; 246
    175c:	fe 4f       	sbci	r31, 0xFE	; 254
    175e:	80 81       	ld	r24, Z
    1760:	ec 89       	ldd	r30, Y+20	; 0x14
    1762:	fd 89       	ldd	r31, Y+21	; 0x15
    1764:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	8f 87       	std	Y+15, r24	; 0x0f
    176a:	07 c0       	rjmp	.+14     	; 0x177a <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    176c:	88 89       	ldd	r24, Y+16	; 0x10
    176e:	8f 5f       	subi	r24, 0xFF	; 255
    1770:	88 8b       	std	Y+16, r24	; 0x10
    1772:	88 89       	ldd	r24, Y+16	; 0x10
    1774:	84 30       	cpi	r24, 0x04	; 4
    1776:	08 f4       	brcc	.+2      	; 0x177a <KPD_u8GetKeyState+0x1da>
    1778:	3b cf       	rjmp	.-394    	; 0x15f0 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;						
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    177a:	89 89       	ldd	r24, Y+17	; 0x11
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	fc 01       	movw	r30, r24
    1782:	e6 5e       	subi	r30, 0xE6	; 230
    1784:	fe 4f       	sbci	r31, 0xFE	; 254
    1786:	90 81       	ld	r25, Z
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	69 2f       	mov	r22, r25
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    1792:	8f 85       	ldd	r24, Y+15	; 0x0f
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	49 f0       	breq	.+18     	; 0x17aa <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    1798:	89 89       	ldd	r24, Y+17	; 0x11
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	89 8b       	std	Y+17, r24	; 0x11
    179e:	89 89       	ldd	r24, Y+17	; 0x11
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	08 f4       	brcc	.+2      	; 0x17a6 <KPD_u8GetKeyState+0x206>
    17a4:	17 cf       	rjmp	.-466    	; 0x15d4 <KPD_u8GetKeyState+0x34>
    17a6:	01 c0       	rjmp	.+2      	; 0x17aa <KPD_u8GetKeyState+0x20a>
			}
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    17a8:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    17aa:	8a 89       	ldd	r24, Y+18	; 0x12
}
    17ac:	65 96       	adiw	r28, 0x15	; 21
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <LCD_voidInit>:
#include "LCD_Config.h"
#include<util/delay.h>
#include <stdio.h>
/* Function: LCD_voidInit to confg the lcd at used the 8 pin of microcontre
 This Function initialize LCD	    */
void LCD_voidInit(void) {
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	ca 55       	subi	r28, 0x5A	; 90
    17cc:	d0 40       	sbci	r29, 0x00	; 0
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
//	DIO_u8SetPinDirection(LCD_u8_CTRL_PORT, LCD_u8_RSPIN, DIO_u8_OUTPUT);
//	DIO_u8SetPinDirection(LCD_u8_CTRL_PORT, LCD_u8_RWPIN, DIO_u8_OUTPUT);
//	DIO_u8SetPinDirection(LCD_u8_CTRL_PORT, LCD_u8_EPIN, DIO_u8_OUTPUT);

	//Configure the direction of data port
	DIO_u8SetPortDirection(LCD_u8_DATA_PORT, DIO_u8_OUTPUT);
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	61 e0       	ldi	r22, 0x01	; 1
    17dc:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8SetPortDirection>
    17e0:	fe 01       	movw	r30, r28
    17e2:	e9 5a       	subi	r30, 0xA9	; 169
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	ac e0       	ldi	r26, 0x0C	; 12
    17ec:	b2 e4       	ldi	r27, 0x42	; 66
    17ee:	80 83       	st	Z, r24
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	a2 83       	std	Z+2, r26	; 0x02
    17f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f6:	8e 01       	movw	r16, r28
    17f8:	0d 5a       	subi	r16, 0xAD	; 173
    17fa:	1f 4f       	sbci	r17, 0xFF	; 255
    17fc:	fe 01       	movw	r30, r28
    17fe:	e9 5a       	subi	r30, 0xA9	; 169
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	60 81       	ld	r22, Z
    1804:	71 81       	ldd	r23, Z+1	; 0x01
    1806:	82 81       	ldd	r24, Z+2	; 0x02
    1808:	93 81       	ldd	r25, Z+3	; 0x03
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a ef       	ldi	r20, 0xFA	; 250
    1810:	54 e4       	ldi	r21, 0x44	; 68
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	f8 01       	movw	r30, r16
    181c:	80 83       	st	Z, r24
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	a2 83       	std	Z+2, r26	; 0x02
    1822:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1824:	fe 01       	movw	r30, r28
    1826:	ed 5a       	subi	r30, 0xAD	; 173
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    183e:	88 23       	and	r24, r24
    1840:	44 f4       	brge	.+16     	; 0x1852 <LCD_voidInit+0x94>
		__ticks = 1;
    1842:	fe 01       	movw	r30, r28
    1844:	ef 5a       	subi	r30, 0xAF	; 175
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	80 83       	st	Z, r24
    1850:	64 c0       	rjmp	.+200    	; 0x191a <LCD_voidInit+0x15c>
	else if (__tmp > 65535)
    1852:	fe 01       	movw	r30, r28
    1854:	ed 5a       	subi	r30, 0xAD	; 173
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	60 81       	ld	r22, Z
    185a:	71 81       	ldd	r23, Z+1	; 0x01
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	93 81       	ldd	r25, Z+3	; 0x03
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	3f ef       	ldi	r19, 0xFF	; 255
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	57 e4       	ldi	r21, 0x47	; 71
    1868:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    186c:	18 16       	cp	r1, r24
    186e:	0c f0       	brlt	.+2      	; 0x1872 <LCD_voidInit+0xb4>
    1870:	43 c0       	rjmp	.+134    	; 0x18f8 <LCD_voidInit+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1872:	fe 01       	movw	r30, r28
    1874:	e9 5a       	subi	r30, 0xA9	; 169
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	60 81       	ld	r22, Z
    187a:	71 81       	ldd	r23, Z+1	; 0x01
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	93 81       	ldd	r25, Z+3	; 0x03
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	8e 01       	movw	r16, r28
    1892:	0f 5a       	subi	r16, 0xAF	; 175
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	f8 01       	movw	r30, r16
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
    18a8:	1f c0       	rjmp	.+62     	; 0x18e8 <LCD_voidInit+0x12a>
    18aa:	fe 01       	movw	r30, r28
    18ac:	e1 5b       	subi	r30, 0xB1	; 177
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	88 ec       	ldi	r24, 0xC8	; 200
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
    18b8:	fe 01       	movw	r30, r28
    18ba:	e1 5b       	subi	r30, 0xB1	; 177
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <LCD_voidInit+0x104>
    18c6:	fe 01       	movw	r30, r28
    18c8:	e1 5b       	subi	r30, 0xB1	; 177
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d0:	de 01       	movw	r26, r28
    18d2:	af 5a       	subi	r26, 0xAF	; 175
    18d4:	bf 4f       	sbci	r27, 0xFF	; 255
    18d6:	fe 01       	movw	r30, r28
    18d8:	ef 5a       	subi	r30, 0xAF	; 175
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 81       	ld	r24, Z
    18de:	91 81       	ldd	r25, Z+1	; 0x01
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	11 96       	adiw	r26, 0x01	; 1
    18e4:	9c 93       	st	X, r25
    18e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e8:	fe 01       	movw	r30, r28
    18ea:	ef 5a       	subi	r30, 0xAF	; 175
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	80 81       	ld	r24, Z
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	d1 f6       	brne	.-76     	; 0x18aa <LCD_voidInit+0xec>
    18f6:	27 c0       	rjmp	.+78     	; 0x1946 <LCD_voidInit+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f8:	8e 01       	movw	r16, r28
    18fa:	0f 5a       	subi	r16, 0xAF	; 175
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	fe 01       	movw	r30, r28
    1900:	ed 5a       	subi	r30, 0xAD	; 173
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	f8 01       	movw	r30, r16
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
    191a:	de 01       	movw	r26, r28
    191c:	a3 5b       	subi	r26, 0xB3	; 179
    191e:	bf 4f       	sbci	r27, 0xFF	; 255
    1920:	fe 01       	movw	r30, r28
    1922:	ef 5a       	subi	r30, 0xAF	; 175
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	8d 93       	st	X+, r24
    192c:	9c 93       	st	X, r25
    192e:	fe 01       	movw	r30, r28
    1930:	e3 5b       	subi	r30, 0xB3	; 179
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	80 81       	ld	r24, Z
    1936:	91 81       	ldd	r25, Z+1	; 0x01
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_voidInit+0x17a>
    193c:	fe 01       	movw	r30, r28
    193e:	e3 5b       	subi	r30, 0xB3	; 179
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24

	/*LCD Initialization*/
	/* Delay 35ms to ensure the initialization of the LCD driver */
	_delay_ms(35);
	/*Funcation set return cursor to first position on first line   that write commend 0b00111100 */
	LCD_voidSendInstruction(0b00111100);
    1946:	8c e3       	ldi	r24, 0x3C	; 60
    1948:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_voidSendInstruction>
    194c:	fe 01       	movw	r30, r28
    194e:	e7 5b       	subi	r30, 0xB7	; 183
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	a0 e2       	ldi	r26, 0x20	; 32
    1958:	b2 e4       	ldi	r27, 0x42	; 66
    195a:	80 83       	st	Z, r24
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	a2 83       	std	Z+2, r26	; 0x02
    1960:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1962:	8e 01       	movw	r16, r28
    1964:	0b 5b       	subi	r16, 0xBB	; 187
    1966:	1f 4f       	sbci	r17, 0xFF	; 255
    1968:	fe 01       	movw	r30, r28
    196a:	e7 5b       	subi	r30, 0xB7	; 183
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	2b ea       	ldi	r18, 0xAB	; 171
    1978:	3a ea       	ldi	r19, 0xAA	; 170
    197a:	4a e2       	ldi	r20, 0x2A	; 42
    197c:	50 e4       	ldi	r21, 0x40	; 64
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	f8 01       	movw	r30, r16
    1988:	80 83       	st	Z, r24
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	a2 83       	std	Z+2, r26	; 0x02
    198e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1990:	fe 01       	movw	r30, r28
    1992:	eb 5b       	subi	r30, 0xBB	; 187
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	60 81       	ld	r22, Z
    1998:	71 81       	ldd	r23, Z+1	; 0x01
    199a:	82 81       	ldd	r24, Z+2	; 0x02
    199c:	93 81       	ldd	r25, Z+3	; 0x03
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	34 f4       	brge	.+12     	; 0x19ba <LCD_voidInit+0x1fc>
		__ticks = 1;
    19ae:	fe 01       	movw	r30, r28
    19b0:	ec 5b       	subi	r30, 0xBC	; 188
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	80 83       	st	Z, r24
    19b8:	a7 c0       	rjmp	.+334    	; 0x1b08 <LCD_voidInit+0x34a>
	else if (__tmp > 255)
    19ba:	fe 01       	movw	r30, r28
    19bc:	eb 5b       	subi	r30, 0xBB	; 187
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4f e7       	ldi	r20, 0x7F	; 127
    19ce:	53 e4       	ldi	r21, 0x43	; 67
    19d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19d4:	18 16       	cp	r1, r24
    19d6:	0c f0       	brlt	.+2      	; 0x19da <LCD_voidInit+0x21c>
    19d8:	87 c0       	rjmp	.+270    	; 0x1ae8 <LCD_voidInit+0x32a>
	{
		_delay_ms(__us / 1000.0);
    19da:	fe 01       	movw	r30, r28
    19dc:	e7 5b       	subi	r30, 0xB7	; 183
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	60 81       	ld	r22, Z
    19e2:	71 81       	ldd	r23, Z+1	; 0x01
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a e7       	ldi	r20, 0x7A	; 122
    19ee:	54 e4       	ldi	r21, 0x44	; 68
    19f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	fe 01       	movw	r30, r28
    19fa:	e0 5c       	subi	r30, 0xC0	; 192
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 83       	st	Z, r24
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	a2 83       	std	Z+2, r26	; 0x02
    1a04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a06:	fe 01       	movw	r30, r28
    1a08:	e0 5c       	subi	r30, 0xC0	; 192
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a ef       	ldi	r20, 0xFA	; 250
    1a1a:	54 e4       	ldi	r21, 0x44	; 68
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	8c af       	std	Y+60, r24	; 0x3c
    1a26:	9d af       	std	Y+61, r25	; 0x3d
    1a28:	ae af       	std	Y+62, r26	; 0x3e
    1a2a:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1a2c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a2e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a30:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a32:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e8       	ldi	r20, 0x80	; 128
    1a3a:	5f e3       	ldi	r21, 0x3F	; 63
    1a3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a40:	88 23       	and	r24, r24
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <LCD_voidInit+0x290>
		__ticks = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9b af       	std	Y+59, r25	; 0x3b
    1a4a:	8a af       	std	Y+58, r24	; 0x3a
    1a4c:	42 c0       	rjmp	.+132    	; 0x1ad2 <LCD_voidInit+0x314>
	else if (__tmp > 65535)
    1a4e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a50:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a52:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a54:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	4f e7       	ldi	r20, 0x7F	; 127
    1a5c:	57 e4       	ldi	r21, 0x47	; 71
    1a5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a62:	18 16       	cp	r1, r24
    1a64:	64 f5       	brge	.+88     	; 0x1abe <LCD_voidInit+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a66:	fe 01       	movw	r30, r28
    1a68:	e0 5c       	subi	r30, 0xC0	; 192
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	60 81       	ld	r22, Z
    1a6e:	71 81       	ldd	r23, Z+1	; 0x01
    1a70:	82 81       	ldd	r24, Z+2	; 0x02
    1a72:	93 81       	ldd	r25, Z+3	; 0x03
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e2       	ldi	r20, 0x20	; 32
    1a7a:	51 e4       	ldi	r21, 0x41	; 65
    1a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	9b af       	std	Y+59, r25	; 0x3b
    1a92:	8a af       	std	Y+58, r24	; 0x3a
    1a94:	0f c0       	rjmp	.+30     	; 0x1ab4 <LCD_voidInit+0x2f6>
    1a96:	88 ec       	ldi	r24, 0xC8	; 200
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	99 af       	std	Y+57, r25	; 0x39
    1a9c:	88 af       	std	Y+56, r24	; 0x38
    1a9e:	88 ad       	ldd	r24, Y+56	; 0x38
    1aa0:	99 ad       	ldd	r25, Y+57	; 0x39
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LCD_voidInit+0x2e4>
    1aa6:	99 af       	std	Y+57, r25	; 0x39
    1aa8:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aaa:	8a ad       	ldd	r24, Y+58	; 0x3a
    1aac:	9b ad       	ldd	r25, Y+59	; 0x3b
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	9b af       	std	Y+59, r25	; 0x3b
    1ab2:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ab6:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	69 f7       	brne	.-38     	; 0x1a96 <LCD_voidInit+0x2d8>
    1abc:	2e c0       	rjmp	.+92     	; 0x1b1a <LCD_voidInit+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ac0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ac2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ac4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9b af       	std	Y+59, r25	; 0x3b
    1ad0:	8a af       	std	Y+58, r24	; 0x3a
    1ad2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ad4:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ad6:	9f ab       	std	Y+55, r25	; 0x37
    1ad8:	8e ab       	std	Y+54, r24	; 0x36
    1ada:	8e a9       	ldd	r24, Y+54	; 0x36
    1adc:	9f a9       	ldd	r25, Y+55	; 0x37
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <LCD_voidInit+0x320>
    1ae2:	9f ab       	std	Y+55, r25	; 0x37
    1ae4:	8e ab       	std	Y+54, r24	; 0x36
    1ae6:	19 c0       	rjmp	.+50     	; 0x1b1a <LCD_voidInit+0x35c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ae8:	8e 01       	movw	r16, r28
    1aea:	0c 5b       	subi	r16, 0xBC	; 188
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	fe 01       	movw	r30, r28
    1af0:	eb 5b       	subi	r30, 0xBB	; 187
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	f8 01       	movw	r30, r16
    1b06:	80 83       	st	Z, r24
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ec 5b       	subi	r30, 0xBC	; 188
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b12:	8d a9       	ldd	r24, Y+53	; 0x35
    1b14:	8a 95       	dec	r24
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <LCD_voidInit+0x356>
    1b18:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(40); // delay need
	/*Display ON/OFF*/
	LCD_voidSendInstruction(0b00001111);
    1b1a:	8f e0       	ldi	r24, 0x0F	; 15
    1b1c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_voidSendInstruction>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a0 e2       	ldi	r26, 0x20	; 32
    1b26:	b2 e4       	ldi	r27, 0x42	; 66
    1b28:	89 ab       	std	Y+49, r24	; 0x31
    1b2a:	9a ab       	std	Y+50, r25	; 0x32
    1b2c:	ab ab       	std	Y+51, r26	; 0x33
    1b2e:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b30:	69 a9       	ldd	r22, Y+49	; 0x31
    1b32:	7a a9       	ldd	r23, Y+50	; 0x32
    1b34:	8b a9       	ldd	r24, Y+51	; 0x33
    1b36:	9c a9       	ldd	r25, Y+52	; 0x34
    1b38:	2b ea       	ldi	r18, 0xAB	; 171
    1b3a:	3a ea       	ldi	r19, 0xAA	; 170
    1b3c:	4a e2       	ldi	r20, 0x2A	; 42
    1b3e:	50 e4       	ldi	r21, 0x40	; 64
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8d a7       	std	Y+45, r24	; 0x2d
    1b4a:	9e a7       	std	Y+46, r25	; 0x2e
    1b4c:	af a7       	std	Y+47, r26	; 0x2f
    1b4e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1b50:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b52:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b56:	98 a9       	ldd	r25, Y+48	; 0x30
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	1c f4       	brge	.+6      	; 0x1b6e <LCD_voidInit+0x3b0>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	8c a7       	std	Y+44, r24	; 0x2c
    1b6c:	91 c0       	rjmp	.+290    	; 0x1c90 <LCD_voidInit+0x4d2>
	else if (__tmp > 255)
    1b6e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b70:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b74:	98 a9       	ldd	r25, Y+48	; 0x30
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	53 e4       	ldi	r21, 0x43	; 67
    1b7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	0c f0       	brlt	.+2      	; 0x1b88 <LCD_voidInit+0x3ca>
    1b86:	7b c0       	rjmp	.+246    	; 0x1c7e <LCD_voidInit+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    1b88:	69 a9       	ldd	r22, Y+49	; 0x31
    1b8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	4a e7       	ldi	r20, 0x7A	; 122
    1b96:	54 e4       	ldi	r21, 0x44	; 68
    1b98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	88 a7       	std	Y+40, r24	; 0x28
    1ba2:	99 a7       	std	Y+41, r25	; 0x29
    1ba4:	aa a7       	std	Y+42, r26	; 0x2a
    1ba6:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba8:	68 a5       	ldd	r22, Y+40	; 0x28
    1baa:	79 a5       	ldd	r23, Y+41	; 0x29
    1bac:	8a a5       	ldd	r24, Y+42	; 0x2a
    1bae:	9b a5       	ldd	r25, Y+43	; 0x2b
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4a ef       	ldi	r20, 0xFA	; 250
    1bb6:	54 e4       	ldi	r21, 0x44	; 68
    1bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	8c a3       	std	Y+36, r24	; 0x24
    1bc2:	9d a3       	std	Y+37, r25	; 0x25
    1bc4:	ae a3       	std	Y+38, r26	; 0x26
    1bc6:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1bc8:	6c a1       	ldd	r22, Y+36	; 0x24
    1bca:	7d a1       	ldd	r23, Y+37	; 0x25
    1bcc:	8e a1       	ldd	r24, Y+38	; 0x26
    1bce:	9f a1       	ldd	r25, Y+39	; 0x27
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	2c f4       	brge	.+10     	; 0x1bea <LCD_voidInit+0x42c>
		__ticks = 1;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9b a3       	std	Y+35, r25	; 0x23
    1be6:	8a a3       	std	Y+34, r24	; 0x22
    1be8:	3f c0       	rjmp	.+126    	; 0x1c68 <LCD_voidInit+0x4aa>
	else if (__tmp > 65535)
    1bea:	6c a1       	ldd	r22, Y+36	; 0x24
    1bec:	7d a1       	ldd	r23, Y+37	; 0x25
    1bee:	8e a1       	ldd	r24, Y+38	; 0x26
    1bf0:	9f a1       	ldd	r25, Y+39	; 0x27
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	3f ef       	ldi	r19, 0xFF	; 255
    1bf6:	4f e7       	ldi	r20, 0x7F	; 127
    1bf8:	57 e4       	ldi	r21, 0x47	; 71
    1bfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bfe:	18 16       	cp	r1, r24
    1c00:	4c f5       	brge	.+82     	; 0x1c54 <LCD_voidInit+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c02:	68 a5       	ldd	r22, Y+40	; 0x28
    1c04:	79 a5       	ldd	r23, Y+41	; 0x29
    1c06:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c08:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e2       	ldi	r20, 0x20	; 32
    1c10:	51 e4       	ldi	r21, 0x41	; 65
    1c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9b a3       	std	Y+35, r25	; 0x23
    1c28:	8a a3       	std	Y+34, r24	; 0x22
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <LCD_voidInit+0x48c>
    1c2c:	88 ec       	ldi	r24, 0xC8	; 200
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	99 a3       	std	Y+33, r25	; 0x21
    1c32:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c34:	88 a1       	ldd	r24, Y+32	; 0x20
    1c36:	99 a1       	ldd	r25, Y+33	; 0x21
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <LCD_voidInit+0x47a>
    1c3c:	99 a3       	std	Y+33, r25	; 0x21
    1c3e:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c40:	8a a1       	ldd	r24, Y+34	; 0x22
    1c42:	9b a1       	ldd	r25, Y+35	; 0x23
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	9b a3       	std	Y+35, r25	; 0x23
    1c48:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4a:	8a a1       	ldd	r24, Y+34	; 0x22
    1c4c:	9b a1       	ldd	r25, Y+35	; 0x23
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	69 f7       	brne	.-38     	; 0x1c2c <LCD_voidInit+0x46e>
    1c52:	24 c0       	rjmp	.+72     	; 0x1c9c <LCD_voidInit+0x4de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c54:	6c a1       	ldd	r22, Y+36	; 0x24
    1c56:	7d a1       	ldd	r23, Y+37	; 0x25
    1c58:	8e a1       	ldd	r24, Y+38	; 0x26
    1c5a:	9f a1       	ldd	r25, Y+39	; 0x27
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9b a3       	std	Y+35, r25	; 0x23
    1c66:	8a a3       	std	Y+34, r24	; 0x22
    1c68:	8a a1       	ldd	r24, Y+34	; 0x22
    1c6a:	9b a1       	ldd	r25, Y+35	; 0x23
    1c6c:	9f 8f       	std	Y+31, r25	; 0x1f
    1c6e:	8e 8f       	std	Y+30, r24	; 0x1e
    1c70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c72:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_voidInit+0x4b6>
    1c78:	9f 8f       	std	Y+31, r25	; 0x1f
    1c7a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <LCD_voidInit+0x4de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c7e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c80:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c84:	98 a9       	ldd	r25, Y+48	; 0x30
    1c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8c a7       	std	Y+44, r24	; 0x2c
    1c90:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c92:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c96:	8a 95       	dec	r24
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_voidInit+0x4d8>
    1c9a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(40);
	/*Clear Display lcd*/
	LCD_voidSendInstruction(0b00000001);
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_voidSendInstruction>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a0 e0       	ldi	r26, 0x00	; 0
    1ca8:	b0 e4       	ldi	r27, 0x40	; 64
    1caa:	89 8f       	std	Y+25, r24	; 0x19
    1cac:	9a 8f       	std	Y+26, r25	; 0x1a
    1cae:	ab 8f       	std	Y+27, r26	; 0x1b
    1cb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a ef       	ldi	r20, 0xFA	; 250
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8d 8b       	std	Y+21, r24	; 0x15
    1ccc:	9e 8b       	std	Y+22, r25	; 0x16
    1cce:	af 8b       	std	Y+23, r26	; 0x17
    1cd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <LCD_voidInit+0x536>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9c 8b       	std	Y+20, r25	; 0x14
    1cf0:	8b 8b       	std	Y+19, r24	; 0x13
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <LCD_voidInit+0x5b4>
	else if (__tmp > 65535)
    1cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <LCD_voidInit+0x5a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <LCD_voidInit+0x596>
    1d36:	88 ec       	ldi	r24, 0xC8	; 200
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9a 8b       	std	Y+18, r25	; 0x12
    1d3c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d3e:	89 89       	ldd	r24, Y+17	; 0x11
    1d40:	9a 89       	ldd	r25, Y+18	; 0x12
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_voidInit+0x584>
    1d46:	9a 8b       	std	Y+18, r25	; 0x12
    1d48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	9c 8b       	std	Y+20, r25	; 0x14
    1d52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	8b 89       	ldd	r24, Y+19	; 0x13
    1d56:	9c 89       	ldd	r25, Y+20	; 0x14
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <LCD_voidInit+0x578>
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <LCD_voidInit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d60:	7e 89       	ldd	r23, Y+22	; 0x16
    1d62:	8f 89       	ldd	r24, Y+23	; 0x17
    1d64:	98 8d       	ldd	r25, Y+24	; 0x18
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9c 8b       	std	Y+20, r25	; 0x14
    1d70:	8b 8b       	std	Y+19, r24	; 0x13
    1d72:	8b 89       	ldd	r24, Y+19	; 0x13
    1d74:	9c 89       	ldd	r25, Y+20	; 0x14
    1d76:	98 8b       	std	Y+16, r25	; 0x10
    1d78:	8f 87       	std	Y+15, r24	; 0x0f
    1d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7c:	98 89       	ldd	r25, Y+16	; 0x10
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_voidInit+0x5c0>
    1d82:	98 8b       	std	Y+16, r25	; 0x10
    1d84:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/*Entry Mode Set*/
	LCD_voidSendInstruction(0b00000110);
    1d86:	86 e0       	ldi	r24, 0x06	; 6
    1d88:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_voidSendInstruction>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a0 e0       	ldi	r26, 0x00	; 0
    1d92:	b0 e4       	ldi	r27, 0x40	; 64
    1d94:	8b 87       	std	Y+11, r24	; 0x0b
    1d96:	9c 87       	std	Y+12, r25	; 0x0c
    1d98:	ad 87       	std	Y+13, r26	; 0x0d
    1d9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	4a ef       	ldi	r20, 0xFA	; 250
    1daa:	54 e4       	ldi	r21, 0x44	; 68
    1dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8f 83       	std	Y+7, r24	; 0x07
    1db6:	98 87       	std	Y+8, r25	; 0x08
    1db8:	a9 87       	std	Y+9, r26	; 0x09
    1dba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbe:	78 85       	ldd	r23, Y+8	; 0x08
    1dc0:	89 85       	ldd	r24, Y+9	; 0x09
    1dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	2c f4       	brge	.+10     	; 0x1dde <LCD_voidInit+0x620>
		__ticks = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	3f c0       	rjmp	.+126    	; 0x1e5c <LCD_voidInit+0x69e>
	else if (__tmp > 65535)
    1dde:	6f 81       	ldd	r22, Y+7	; 0x07
    1de0:	78 85       	ldd	r23, Y+8	; 0x08
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	3f ef       	ldi	r19, 0xFF	; 255
    1dea:	4f e7       	ldi	r20, 0x7F	; 127
    1dec:	57 e4       	ldi	r21, 0x47	; 71
    1dee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df2:	18 16       	cp	r1, r24
    1df4:	4c f5       	brge	.+82     	; 0x1e48 <LCD_voidInit+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e2       	ldi	r20, 0x20	; 32
    1e04:	51 e4       	ldi	r21, 0x41	; 65
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	bc 01       	movw	r22, r24
    1e10:	cd 01       	movw	r24, r26
    1e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	0f c0       	rjmp	.+30     	; 0x1e3e <LCD_voidInit+0x680>
    1e20:	88 ec       	ldi	r24, 0xC8	; 200
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9c 83       	std	Y+4, r25	; 0x04
    1e26:	8b 83       	std	Y+3, r24	; 0x03
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_voidInit+0x66e>
    1e30:	9c 83       	std	Y+4, r25	; 0x04
    1e32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e40:	9e 81       	ldd	r25, Y+6	; 0x06
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	69 f7       	brne	.-38     	; 0x1e20 <LCD_voidInit+0x662>
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <LCD_voidInit+0x6b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e48:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4a:	78 85       	ldd	r23, Y+8	; 0x08
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	9e 83       	std	Y+6, r25	; 0x06
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_voidInit+0x6aa>
    1e6c:	9a 83       	std	Y+2, r25	; 0x02
    1e6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1e70:	c6 5a       	subi	r28, 0xA6	; 166
    1e72:	df 4f       	sbci	r29, 0xFF	; 255
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	08 95       	ret

00001e88 <LCD_voidSendInstruction>:

/* Function LCD_voidSendInstruction                     **/
/* This Function Send a command  to LCD			       	**/
void LCD_voidSendInstruction(u8 Copy_u8_command) {
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	69 97       	sbiw	r28, 0x19	; 25
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	89 8f       	std	Y+25, r24	; 0x19
	//RS = 0 (Command), RW = 0 (Write), E = 1 (Enable)
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_RSPIN, DIO_u8_LOW); //RS = 0 (Command)Set RS to LOW
    1e9e:	83 e0       	ldi	r24, 0x03	; 3
    1ea0:	67 e0       	ldi	r22, 0x07	; 7
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
//	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_RWPIN, DIO_u8_LOW); //	RW = 0 (Write)Set R/W to LOW
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_EPIN, DIO_u8_HIGH); //E = 1 (Enable)Set E to HIGH
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	66 e0       	ldi	r22, 0x06	; 6
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	//001,DL(8-bit data),N(2-lines),F(5*10 dots)
	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8_command);
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb6:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_u8SetPortValue>

	/* Set E to LOW */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_EPIN, DIO_u8_HIGH);
    1eba:	83 e0       	ldi	r24, 0x03	; 3
    1ebc:	66 e0       	ldi	r22, 0x06	; 6
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a0 e0       	ldi	r26, 0x00	; 0
    1eca:	b0 e4       	ldi	r27, 0x40	; 64
    1ecc:	8d 8b       	std	Y+21, r24	; 0x15
    1ece:	9e 8b       	std	Y+22, r25	; 0x16
    1ed0:	af 8b       	std	Y+23, r26	; 0x17
    1ed2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ed4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eda:	98 8d       	ldd	r25, Y+24	; 0x18
    1edc:	2b ea       	ldi	r18, 0xAB	; 171
    1ede:	3a ea       	ldi	r19, 0xAA	; 170
    1ee0:	4a e2       	ldi	r20, 0x2A	; 42
    1ee2:	50 e4       	ldi	r21, 0x40	; 64
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	89 8b       	std	Y+17, r24	; 0x11
    1eee:	9a 8b       	std	Y+18, r25	; 0x12
    1ef0:	ab 8b       	std	Y+19, r26	; 0x13
    1ef2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ef4:	69 89       	ldd	r22, Y+17	; 0x11
    1ef6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    1efa:	9c 89       	ldd	r25, Y+20	; 0x14
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	1c f4       	brge	.+6      	; 0x1f12 <LCD_voidSendInstruction+0x8a>
		__ticks = 1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	88 8b       	std	Y+16, r24	; 0x10
    1f10:	91 c0       	rjmp	.+290    	; 0x2034 <LCD_voidSendInstruction+0x1ac>
	else if (__tmp > 255)
    1f12:	69 89       	ldd	r22, Y+17	; 0x11
    1f14:	7a 89       	ldd	r23, Y+18	; 0x12
    1f16:	8b 89       	ldd	r24, Y+19	; 0x13
    1f18:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4f e7       	ldi	r20, 0x7F	; 127
    1f20:	53 e4       	ldi	r21, 0x43	; 67
    1f22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f26:	18 16       	cp	r1, r24
    1f28:	0c f0       	brlt	.+2      	; 0x1f2c <LCD_voidSendInstruction+0xa4>
    1f2a:	7b c0       	rjmp	.+246    	; 0x2022 <LCD_voidSendInstruction+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f30:	8f 89       	ldd	r24, Y+23	; 0x17
    1f32:	98 8d       	ldd	r25, Y+24	; 0x18
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a e7       	ldi	r20, 0x7A	; 122
    1f3a:	54 e4       	ldi	r21, 0x44	; 68
    1f3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	8c 87       	std	Y+12, r24	; 0x0c
    1f46:	9d 87       	std	Y+13, r25	; 0x0d
    1f48:	ae 87       	std	Y+14, r26	; 0x0e
    1f4a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f50:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f52:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	4a ef       	ldi	r20, 0xFA	; 250
    1f5a:	54 e4       	ldi	r21, 0x44	; 68
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	88 87       	std	Y+8, r24	; 0x08
    1f66:	99 87       	std	Y+9, r25	; 0x09
    1f68:	aa 87       	std	Y+10, r26	; 0x0a
    1f6a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f6c:	68 85       	ldd	r22, Y+8	; 0x08
    1f6e:	79 85       	ldd	r23, Y+9	; 0x09
    1f70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e8       	ldi	r20, 0x80	; 128
    1f7a:	5f e3       	ldi	r21, 0x3F	; 63
    1f7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f80:	88 23       	and	r24, r24
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <LCD_voidSendInstruction+0x106>
		__ticks = 1;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9f 83       	std	Y+7, r25	; 0x07
    1f8a:	8e 83       	std	Y+6, r24	; 0x06
    1f8c:	3f c0       	rjmp	.+126    	; 0x200c <LCD_voidSendInstruction+0x184>
	else if (__tmp > 65535)
    1f8e:	68 85       	ldd	r22, Y+8	; 0x08
    1f90:	79 85       	ldd	r23, Y+9	; 0x09
    1f92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	3f ef       	ldi	r19, 0xFF	; 255
    1f9a:	4f e7       	ldi	r20, 0x7F	; 127
    1f9c:	57 e4       	ldi	r21, 0x47	; 71
    1f9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	4c f5       	brge	.+82     	; 0x1ff8 <LCD_voidSendInstruction+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fa8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1faa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fac:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e2       	ldi	r20, 0x20	; 32
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9f 83       	std	Y+7, r25	; 0x07
    1fcc:	8e 83       	std	Y+6, r24	; 0x06
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <LCD_voidSendInstruction+0x166>
    1fd0:	88 ec       	ldi	r24, 0xC8	; 200
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9d 83       	std	Y+5, r25	; 0x05
    1fd6:	8c 83       	std	Y+4, r24	; 0x04
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	9d 81       	ldd	r25, Y+5	; 0x05
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_voidSendInstruction+0x154>
    1fe0:	9d 83       	std	Y+5, r25	; 0x05
    1fe2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	9f 83       	std	Y+7, r25	; 0x07
    1fec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	69 f7       	brne	.-38     	; 0x1fd0 <LCD_voidSendInstruction+0x148>
    1ff6:	24 c0       	rjmp	.+72     	; 0x2040 <LCD_voidSendInstruction+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff8:	68 85       	ldd	r22, Y+8	; 0x08
    1ffa:	79 85       	ldd	r23, Y+9	; 0x09
    1ffc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ffe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9f 83       	std	Y+7, r25	; 0x07
    200a:	8e 83       	std	Y+6, r24	; 0x06
    200c:	8e 81       	ldd	r24, Y+6	; 0x06
    200e:	9f 81       	ldd	r25, Y+7	; 0x07
    2010:	9b 83       	std	Y+3, r25	; 0x03
    2012:	8a 83       	std	Y+2, r24	; 0x02
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	9b 81       	ldd	r25, Y+3	; 0x03
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_voidSendInstruction+0x190>
    201c:	9b 83       	std	Y+3, r25	; 0x03
    201e:	8a 83       	std	Y+2, r24	; 0x02
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <LCD_voidSendInstruction+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2022:	69 89       	ldd	r22, Y+17	; 0x11
    2024:	7a 89       	ldd	r23, Y+18	; 0x12
    2026:	8b 89       	ldd	r24, Y+19	; 0x13
    2028:	9c 89       	ldd	r25, Y+20	; 0x14
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	88 8b       	std	Y+16, r24	; 0x10
    2034:	88 89       	ldd	r24, Y+16	; 0x10
    2036:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	8a 95       	dec	r24
    203c:	f1 f7       	brne	.-4      	; 0x203a <LCD_voidSendInstruction+0x1b2>
    203e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
	/* Set E to HIGH */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_EPIN, DIO_u8_LOW);
    2040:	83 e0       	ldi	r24, 0x03	; 3
    2042:	66 e0       	ldi	r22, 0x06	; 6
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
}
    204a:	69 96       	adiw	r28, 0x19	; 25
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <LCD_voidWriteChar>:

/*Function: LCD_voidWriteChar		                        				    **/
/*This Function writes a character "data" at  LCD	at  start frist address		**/

void LCD_voidWriteChar(u8 Copy_u8Data) {
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	69 97       	sbiw	r28, 0x19	; 25
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	89 8f       	std	Y+25, r24	; 0x19

	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_RSPIN, DIO_u8_HIGH); //RS = 0 (Data)
    2072:	83 e0       	ldi	r24, 0x03	; 3
    2074:	67 e0       	ldi	r22, 0x07	; 7
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	//DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_RWPIN, DIO_u8_LOW); //RW = 0 (Write)
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_EPIN, DIO_u8_HIGH); //E = 1 (Enable)
    207c:	83 e0       	ldi	r24, 0x03	; 3
    207e:	66 e0       	ldi	r22, 0x06	; 6
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	69 8d       	ldd	r22, Y+25	; 0x19
    208a:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_u8SetPortValue>

	//E =1
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_EPIN, DIO_u8_HIGH);
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	66 e0       	ldi	r22, 0x06	; 6
    2092:	41 e0       	ldi	r20, 0x01	; 1
    2094:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	a0 e0       	ldi	r26, 0x00	; 0
    209e:	b0 e4       	ldi	r27, 0x40	; 64
    20a0:	8d 8b       	std	Y+21, r24	; 0x15
    20a2:	9e 8b       	std	Y+22, r25	; 0x16
    20a4:	af 8b       	std	Y+23, r26	; 0x17
    20a6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20a8:	6d 89       	ldd	r22, Y+21	; 0x15
    20aa:	7e 89       	ldd	r23, Y+22	; 0x16
    20ac:	8f 89       	ldd	r24, Y+23	; 0x17
    20ae:	98 8d       	ldd	r25, Y+24	; 0x18
    20b0:	2b ea       	ldi	r18, 0xAB	; 171
    20b2:	3a ea       	ldi	r19, 0xAA	; 170
    20b4:	4a e2       	ldi	r20, 0x2A	; 42
    20b6:	50 e4       	ldi	r21, 0x40	; 64
    20b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	89 8b       	std	Y+17, r24	; 0x11
    20c2:	9a 8b       	std	Y+18, r25	; 0x12
    20c4:	ab 8b       	std	Y+19, r26	; 0x13
    20c6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20c8:	69 89       	ldd	r22, Y+17	; 0x11
    20ca:	7a 89       	ldd	r23, Y+18	; 0x12
    20cc:	8b 89       	ldd	r24, Y+19	; 0x13
    20ce:	9c 89       	ldd	r25, Y+20	; 0x14
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e8       	ldi	r20, 0x80	; 128
    20d6:	5f e3       	ldi	r21, 0x3F	; 63
    20d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20dc:	88 23       	and	r24, r24
    20de:	1c f4       	brge	.+6      	; 0x20e6 <LCD_voidWriteChar+0x8a>
		__ticks = 1;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	88 8b       	std	Y+16, r24	; 0x10
    20e4:	91 c0       	rjmp	.+290    	; 0x2208 <LCD_voidWriteChar+0x1ac>
	else if (__tmp > 255)
    20e6:	69 89       	ldd	r22, Y+17	; 0x11
    20e8:	7a 89       	ldd	r23, Y+18	; 0x12
    20ea:	8b 89       	ldd	r24, Y+19	; 0x13
    20ec:	9c 89       	ldd	r25, Y+20	; 0x14
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	53 e4       	ldi	r21, 0x43	; 67
    20f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	0c f0       	brlt	.+2      	; 0x2100 <LCD_voidWriteChar+0xa4>
    20fe:	7b c0       	rjmp	.+246    	; 0x21f6 <LCD_voidWriteChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2100:	6d 89       	ldd	r22, Y+21	; 0x15
    2102:	7e 89       	ldd	r23, Y+22	; 0x16
    2104:	8f 89       	ldd	r24, Y+23	; 0x17
    2106:	98 8d       	ldd	r25, Y+24	; 0x18
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4a e7       	ldi	r20, 0x7A	; 122
    210e:	54 e4       	ldi	r21, 0x44	; 68
    2110:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	8c 87       	std	Y+12, r24	; 0x0c
    211a:	9d 87       	std	Y+13, r25	; 0x0d
    211c:	ae 87       	std	Y+14, r26	; 0x0e
    211e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2120:	6c 85       	ldd	r22, Y+12	; 0x0c
    2122:	7d 85       	ldd	r23, Y+13	; 0x0d
    2124:	8e 85       	ldd	r24, Y+14	; 0x0e
    2126:	9f 85       	ldd	r25, Y+15	; 0x0f
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a ef       	ldi	r20, 0xFA	; 250
    212e:	54 e4       	ldi	r21, 0x44	; 68
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	88 87       	std	Y+8, r24	; 0x08
    213a:	99 87       	std	Y+9, r25	; 0x09
    213c:	aa 87       	std	Y+10, r26	; 0x0a
    213e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2140:	68 85       	ldd	r22, Y+8	; 0x08
    2142:	79 85       	ldd	r23, Y+9	; 0x09
    2144:	8a 85       	ldd	r24, Y+10	; 0x0a
    2146:	9b 85       	ldd	r25, Y+11	; 0x0b
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e8       	ldi	r20, 0x80	; 128
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2154:	88 23       	and	r24, r24
    2156:	2c f4       	brge	.+10     	; 0x2162 <LCD_voidWriteChar+0x106>
		__ticks = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9f 83       	std	Y+7, r25	; 0x07
    215e:	8e 83       	std	Y+6, r24	; 0x06
    2160:	3f c0       	rjmp	.+126    	; 0x21e0 <LCD_voidWriteChar+0x184>
	else if (__tmp > 65535)
    2162:	68 85       	ldd	r22, Y+8	; 0x08
    2164:	79 85       	ldd	r23, Y+9	; 0x09
    2166:	8a 85       	ldd	r24, Y+10	; 0x0a
    2168:	9b 85       	ldd	r25, Y+11	; 0x0b
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	57 e4       	ldi	r21, 0x47	; 71
    2172:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	4c f5       	brge	.+82     	; 0x21cc <LCD_voidWriteChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217a:	6c 85       	ldd	r22, Y+12	; 0x0c
    217c:	7d 85       	ldd	r23, Y+13	; 0x0d
    217e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2180:	9f 85       	ldd	r25, Y+15	; 0x0f
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	9f 83       	std	Y+7, r25	; 0x07
    21a0:	8e 83       	std	Y+6, r24	; 0x06
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <LCD_voidWriteChar+0x166>
    21a4:	88 ec       	ldi	r24, 0xC8	; 200
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9d 83       	std	Y+5, r25	; 0x05
    21aa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ac:	8c 81       	ldd	r24, Y+4	; 0x04
    21ae:	9d 81       	ldd	r25, Y+5	; 0x05
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_voidWriteChar+0x154>
    21b4:	9d 83       	std	Y+5, r25	; 0x05
    21b6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ba:	9f 81       	ldd	r25, Y+7	; 0x07
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	9f 83       	std	Y+7, r25	; 0x07
    21c0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	8e 81       	ldd	r24, Y+6	; 0x06
    21c4:	9f 81       	ldd	r25, Y+7	; 0x07
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	69 f7       	brne	.-38     	; 0x21a4 <LCD_voidWriteChar+0x148>
    21ca:	24 c0       	rjmp	.+72     	; 0x2214 <LCD_voidWriteChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	68 85       	ldd	r22, Y+8	; 0x08
    21ce:	79 85       	ldd	r23, Y+9	; 0x09
    21d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    21d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	9f 83       	std	Y+7, r25	; 0x07
    21de:	8e 83       	std	Y+6, r24	; 0x06
    21e0:	8e 81       	ldd	r24, Y+6	; 0x06
    21e2:	9f 81       	ldd	r25, Y+7	; 0x07
    21e4:	9b 83       	std	Y+3, r25	; 0x03
    21e6:	8a 83       	std	Y+2, r24	; 0x02
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	9b 81       	ldd	r25, Y+3	; 0x03
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_voidWriteChar+0x190>
    21f0:	9b 83       	std	Y+3, r25	; 0x03
    21f2:	8a 83       	std	Y+2, r24	; 0x02
    21f4:	0f c0       	rjmp	.+30     	; 0x2214 <LCD_voidWriteChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21f6:	69 89       	ldd	r22, Y+17	; 0x11
    21f8:	7a 89       	ldd	r23, Y+18	; 0x12
    21fa:	8b 89       	ldd	r24, Y+19	; 0x13
    21fc:	9c 89       	ldd	r25, Y+20	; 0x14
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	88 8b       	std	Y+16, r24	; 0x10
    2208:	88 89       	ldd	r24, Y+16	; 0x10
    220a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	8a 95       	dec	r24
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_voidWriteChar+0x1b2>
    2212:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
	//E =0
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_EPIN, DIO_u8_LOW);
    2214:	83 e0       	ldi	r24, 0x03	; 3
    2216:	66 e0       	ldi	r22, 0x06	; 6
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
}
    221e:	69 96       	adiw	r28, 0x19	; 25
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <LCD_voidSendString>:
//		LCD_voidWriteChar(Copy_u8String[i]);	//Write a char on each iteration
//	}
//}
//

void LCD_voidSendString(char *Copy_u8String) {
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	00 d0       	rcall	.+0      	; 0x2236 <LCD_voidSendString+0x6>
    2236:	0f 92       	push	r0
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	9b 83       	std	Y+3, r25	; 0x03
    223e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2240:	19 82       	std	Y+1, r1	; 0x01
    2242:	0e c0       	rjmp	.+28     	; 0x2260 <LCD_voidSendString+0x30>
	while (Copy_u8String[i] != '\0') {
		LCD_voidWriteChar(Copy_u8String[i]);
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	9b 81       	ldd	r25, Y+3	; 0x03
    224e:	fc 01       	movw	r30, r24
    2250:	e2 0f       	add	r30, r18
    2252:	f3 1f       	adc	r31, r19
    2254:	80 81       	ld	r24, Z
    2256:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_voidWriteChar>
		i++;
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	8f 5f       	subi	r24, 0xFF	; 255
    225e:	89 83       	std	Y+1, r24	; 0x01
//}
//

void LCD_voidSendString(char *Copy_u8String) {
	u8 i = 0;
	while (Copy_u8String[i] != '\0') {
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	9b 81       	ldd	r25, Y+3	; 0x03
    226a:	fc 01       	movw	r30, r24
    226c:	e2 0f       	add	r30, r18
    226e:	f3 1f       	adc	r31, r19
    2270:	80 81       	ld	r24, Z
    2272:	88 23       	and	r24, r24
    2274:	39 f7       	brne	.-50     	; 0x2244 <LCD_voidSendString+0x14>
		LCD_voidWriteChar(Copy_u8String[i]);
		i++;
	}
}
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <LCD_voidGotoXY>:
/* Desc:This Function Goes to a specific location (r,c) on LCD			       	**/
/*********************************************************************************/
/* Copy_u8Row Options: 1 - 2													**/
/* Copy_u8Column Options: 0 --> 15												**/
/*********************************************************************************/
void LCD_voidGotoXY(u8 Copy_u8Row, u8 Copy_u8Column) {
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	00 d0       	rcall	.+0      	; 0x2288 <LCD_voidGotoXY+0x6>
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	6a 83       	std	Y+2, r22	; 0x02
	if ((Copy_u8Row == 1) && (Copy_u8Column < 16))//Writing on Any grid resides on the 1st row
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	81 30       	cpi	r24, 0x01	; 1
    2294:	41 f4       	brne	.+16     	; 0x22a6 <LCD_voidGotoXY+0x24>
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	80 31       	cpi	r24, 0x10	; 16
    229a:	28 f4       	brcc	.+10     	; 0x22a6 <LCD_voidGotoXY+0x24>
			{
		LCD_voidSendInstruction(0x80 + Copy_u8Column-1);//0x80 is the address of the 1st location in the 1st row
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	81 58       	subi	r24, 0x81	; 129
    22a0:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_voidSendInstruction>
    22a4:	0a c0       	rjmp	.+20     	; 0x22ba <LCD_voidGotoXY+0x38>
	} else if ((Copy_u8Row == 2) && (Copy_u8Column < 16))//Writing on Any grid resides on the 2nd row
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	82 30       	cpi	r24, 0x02	; 2
    22aa:	39 f4       	brne	.+14     	; 0x22ba <LCD_voidGotoXY+0x38>
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	80 31       	cpi	r24, 0x10	; 16
    22b0:	20 f4       	brcc	.+8      	; 0x22ba <LCD_voidGotoXY+0x38>
			{
		LCD_voidSendInstruction(0xC0 + Copy_u8Column-1);//0xC0 is the address of the 1st location in the 1st row
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	81 54       	subi	r24, 0x41	; 65
    22b6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_voidSendInstruction>
	} else {
		//Do Nothing
	}
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <LCD_voidClearDisplay>:

/* This Function Clears the whole LCD display						       	**/
void LCD_voidClearDisplay() {
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendInstruction(0b00000001);//sending Instruction to clear the whole display
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_voidSendInstruction>
}
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <LCD_IntToString>:

/*since the lcd is alpha Numeric print characters only*/
void LCD_IntToString(int integer, char *String)
{
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	00 d0       	rcall	.+0      	; 0x22de <LCD_IntToString+0x6>
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <LCD_IntToString+0x8>
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	7c 83       	std	Y+4, r23	; 0x04
    22ea:	6b 83       	std	Y+3, r22	; 0x03
	itoa(integer, String, 10);
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	9a 81       	ldd	r25, Y+2	; 0x02
    22f0:	2b 81       	ldd	r18, Y+3	; 0x03
    22f2:	3c 81       	ldd	r19, Y+4	; 0x04
    22f4:	b9 01       	movw	r22, r18
    22f6:	4a e0       	ldi	r20, 0x0A	; 10
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <itoa>
}
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <LCD_voidWriteSpecialChar>:
/* Copy_u8PatternNumber Options: Num of Pattern to be displayed					  **/
/* Copy_u8Row Options: 1 - 2													  **/
/* Copy_u8Column Options: 0 --> 15												  **/
/***********************************************************************************/
void LCD_voidWriteSpecialChar(u8 *Copy_u8Pattern, u8 Copy_u8PatternNumber,
		u8 Copy_u8Row, u8 Copy_u8Column) {
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	27 97       	sbiw	r28, 0x07	; 7
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
    2324:	6d 83       	std	Y+5, r22	; 0x05
    2326:	4e 83       	std	Y+6, r20	; 0x06
    2328:	2f 83       	std	Y+7, r18	; 0x07
	/*Set CGRAM address */
	/*calculate the CGRAM address*/
	u8 Local_u8Adress = (Copy_u8PatternNumber * 8);
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	88 2f       	mov	r24, r24
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendInstruction(Local_u8Adress + 64);
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	80 5c       	subi	r24, 0xC0	; 192
    2342:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_voidSendInstruction>
	//   address    +64th bit

	/*save the pattern in CGRAM address */
	/* or Write data to CGRAM or DDRAM */
	for (u8 i = 0; i < 8; i++) {
    2346:	19 82       	std	Y+1, r1	; 0x01
    2348:	0e c0       	rjmp	.+28     	; 0x2366 <LCD_voidWriteSpecialChar+0x5a>
		LCD_voidWriteChar(Copy_u8Pattern[i]);
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	fc 01       	movw	r30, r24
    2356:	e2 0f       	add	r30, r18
    2358:	f3 1f       	adc	r31, r19
    235a:	80 81       	ld	r24, Z
    235c:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_voidWriteChar>
	LCD_voidSendInstruction(Local_u8Adress + 64);
	//   address    +64th bit

	/*save the pattern in CGRAM address */
	/* or Write data to CGRAM or DDRAM */
	for (u8 i = 0; i < 8; i++) {
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	8f 5f       	subi	r24, 0xFF	; 255
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	88 30       	cpi	r24, 0x08	; 8
    236a:	78 f3       	brcs	.-34     	; 0x234a <LCD_voidWriteSpecialChar+0x3e>
		//the address counter counter AC will auto increment the next address
	}

	/*Set DDRAM Address */
	/*or go back to DDRAM to display the pattern*/
	LCD_voidGotoXY(Copy_u8Row, Copy_u8Column);
    236c:	8e 81       	ldd	r24, Y+6	; 0x06
    236e:	6f 81       	ldd	r22, Y+7	; 0x07
    2370:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_voidGotoXY>

	/* Read data from CGRAM or DDRAM*/
	/*or display the pattern*/
	LCD_voidWriteChar(Copy_u8PatternNumber); //instead of ASCII letter in CGROM
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_voidWriteChar>
}
    237a:	27 96       	adiw	r28, 0x07	; 7
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <LCD_void_WriteNumber>:

void LCD_void_WriteNumber(u32 Copy_u32Number)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	62 97       	sbiw	r28, 0x12	; 18
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	6c 87       	std	Y+12, r22	; 0x0c
    23a2:	7d 87       	std	Y+13, r23	; 0x0d
    23a4:	8e 87       	std	Y+14, r24	; 0x0e
    23a6:	9f 87       	std	Y+15, r25	; 0x0f
	u8 Local_u8Array[10];
	s8 Local_counter = 0;
    23a8:	19 82       	std	Y+1, r1	; 0x01
		if (Copy_u32Number == 0)
    23aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    23ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    23ae:	ae 85       	ldd	r26, Y+14	; 0x0e
    23b0:	bf 85       	ldd	r27, Y+15	; 0x0f
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	a1 05       	cpc	r26, r1
    23b6:	b1 05       	cpc	r27, r1
    23b8:	09 f0       	breq	.+2      	; 0x23bc <LCD_void_WriteNumber+0x30>
    23ba:	4e c0       	rjmp	.+156    	; 0x2458 <LCD_void_WriteNumber+0xcc>
		{
			LCD_voidWriteChar('0');
    23bc:	80 e3       	ldi	r24, 0x30	; 48
    23be:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_voidWriteChar>
    23c2:	6a c0       	rjmp	.+212    	; 0x2498 <LCD_void_WriteNumber+0x10c>
		}
		else
		{
			while (Copy_u32Number > 0)
			{
				Local_u8Array[Local_counter++]=((Copy_u32Number % 10) == 0) ? (48) : ((Copy_u32Number % 10) + 48);
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	28 2f       	mov	r18, r24
    23c8:	33 27       	eor	r19, r19
    23ca:	27 fd       	sbrc	r18, 7
    23cc:	30 95       	com	r19
    23ce:	3a 8b       	std	Y+18, r19	; 0x12
    23d0:	29 8b       	std	Y+17, r18	; 0x11
    23d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    23d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    23d6:	ae 85       	ldd	r26, Y+14	; 0x0e
    23d8:	bf 85       	ldd	r27, Y+15	; 0x0f
    23da:	2a e0       	ldi	r18, 0x0A	; 10
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e0       	ldi	r20, 0x00	; 0
    23e0:	50 e0       	ldi	r21, 0x00	; 0
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__udivmodsi4>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	a1 05       	cpc	r26, r1
    23f2:	b1 05       	cpc	r27, r1
    23f4:	91 f0       	breq	.+36     	; 0x241a <LCD_void_WriteNumber+0x8e>
    23f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    23f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    23fa:	ae 85       	ldd	r26, Y+14	; 0x0e
    23fc:	bf 85       	ldd	r27, Y+15	; 0x0f
    23fe:	2a e0       	ldi	r18, 0x0A	; 10
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__udivmodsi4>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	38 2f       	mov	r19, r24
    2414:	30 5d       	subi	r19, 0xD0	; 208
    2416:	38 8b       	std	Y+16, r19	; 0x10
    2418:	02 c0       	rjmp	.+4      	; 0x241e <LCD_void_WriteNumber+0x92>
    241a:	80 e3       	ldi	r24, 0x30	; 48
    241c:	88 8b       	std	Y+16, r24	; 0x10
    241e:	ce 01       	movw	r24, r28
    2420:	02 96       	adiw	r24, 0x02	; 2
    2422:	e9 89       	ldd	r30, Y+17	; 0x11
    2424:	fa 89       	ldd	r31, Y+18	; 0x12
    2426:	e8 0f       	add	r30, r24
    2428:	f9 1f       	adc	r31, r25
    242a:	98 89       	ldd	r25, Y+16	; 0x10
    242c:	90 83       	st	Z, r25
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	8f 5f       	subi	r24, 0xFF	; 255
    2432:	89 83       	std	Y+1, r24	; 0x01
				Copy_u32Number /= 10;
    2434:	8c 85       	ldd	r24, Y+12	; 0x0c
    2436:	9d 85       	ldd	r25, Y+13	; 0x0d
    2438:	ae 85       	ldd	r26, Y+14	; 0x0e
    243a:	bf 85       	ldd	r27, Y+15	; 0x0f
    243c:	2a e0       	ldi	r18, 0x0A	; 10
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__udivmodsi4>
    244c:	da 01       	movw	r26, r20
    244e:	c9 01       	movw	r24, r18
    2450:	8c 87       	std	Y+12, r24	; 0x0c
    2452:	9d 87       	std	Y+13, r25	; 0x0d
    2454:	ae 87       	std	Y+14, r26	; 0x0e
    2456:	bf 87       	std	Y+15, r27	; 0x0f
		{
			LCD_voidWriteChar('0');
		}
		else
		{
			while (Copy_u32Number > 0)
    2458:	8c 85       	ldd	r24, Y+12	; 0x0c
    245a:	9d 85       	ldd	r25, Y+13	; 0x0d
    245c:	ae 85       	ldd	r26, Y+14	; 0x0e
    245e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	a1 05       	cpc	r26, r1
    2464:	b1 05       	cpc	r27, r1
    2466:	09 f0       	breq	.+2      	; 0x246a <LCD_void_WriteNumber+0xde>
    2468:	ad cf       	rjmp	.-166    	; 0x23c4 <LCD_void_WriteNumber+0x38>
			{
				Local_u8Array[Local_counter++]=((Copy_u32Number % 10) == 0) ? (48) : ((Copy_u32Number % 10) + 48);
				Copy_u32Number /= 10;
			}

			Local_counter--;
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	81 50       	subi	r24, 0x01	; 1
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	10 c0       	rjmp	.+32     	; 0x2492 <LCD_void_WriteNumber+0x106>

			while (Local_counter >= 0)
			{
				LCD_voidWriteChar(Local_u8Array[Local_counter]);
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	28 2f       	mov	r18, r24
    2476:	33 27       	eor	r19, r19
    2478:	27 fd       	sbrc	r18, 7
    247a:	30 95       	com	r19
    247c:	ce 01       	movw	r24, r28
    247e:	02 96       	adiw	r24, 0x02	; 2
    2480:	fc 01       	movw	r30, r24
    2482:	e2 0f       	add	r30, r18
    2484:	f3 1f       	adc	r31, r19
    2486:	80 81       	ld	r24, Z
    2488:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_voidWriteChar>
				Local_counter--;
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	81 50       	subi	r24, 0x01	; 1
    2490:	89 83       	std	Y+1, r24	; 0x01
				Copy_u32Number /= 10;
			}

			Local_counter--;

			while (Local_counter >= 0)
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	88 23       	and	r24, r24
    2496:	6c f7       	brge	.-38     	; 0x2472 <LCD_void_WriteNumber+0xe6>
				LCD_voidWriteChar(Local_u8Array[Local_counter]);
				Local_counter--;
			}
		}

}
    2498:	62 96       	adiw	r28, 0x12	; 18
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <Sev_voidDisplayNumber>:
#include "DIO_interface.h"
#include"STD_TYPES.h"
static u8 seg [10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};

void Sev_voidDisplayNumber(u8 capy_u8_NumberDisplay)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	0f 92       	push	r0
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	89 83       	std	Y+1, r24	; 0x01

	FuncSev_valueDisplayNumber(SEV_SEG_PORT, ~seg[capy_u8_NumberDisplay]);
	
	#elif   COMMAN == COMENN_ANODE
	
	FuncSev_valueDisplayNumber(SEV_SEG_PORT, seg[capy_u8_NumberDisplay]);
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	fc 01       	movw	r30, r24
    24be:	e0 50       	subi	r30, 0x00	; 0
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	90 81       	ld	r25, Z
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	69 2f       	mov	r22, r25
    24c8:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_u8SetPortValue>

	#else
		//#error "Worning to selection Type of seven segment display"
    #endif
}
    24cc:	0f 90       	pop	r0
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <GI_interrupt_void_enable>:

#include "BIT_MATH.h"
#include "gi_interface.h"
#define SREG                                   *((volatile u8*) 0x5F)
void GI_interrupt_void_enable(void)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,7);
    24dc:	af e5       	ldi	r26, 0x5F	; 95
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	ef e5       	ldi	r30, 0x5F	; 95
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	80 68       	ori	r24, 0x80	; 128
    24e8:	8c 93       	st	X, r24
}
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <GI_interrupt_void_disable>:

 



void GI_interrupt_void_disable(void){
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
	
	
	CLR_BIT(SREG,7);
    24f8:	af e5       	ldi	r26, 0x5F	; 95
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	ef e5       	ldi	r30, 0x5F	; 95
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	8f 77       	andi	r24, 0x7F	; 127
    2504:	8c 93       	st	X, r24
}
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <main>:
void UpdataSetting_Clock(u8 *ptrcount_Second,u8 *ptrcount_Minutes,u8 *ptrcount_Hours,u8 *capy_u16PtrArray);
/*Global varible to set time clock */
volatile u8 count_Second=0;
u8 count_Hours=0,count_Minutes=0;

int main(void) {
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	a8 97       	sbiw	r28, 0x28	; 40
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	cd bf       	out	0x3d, r28	; 61
	u8 cheek_pressed = KPD_u8_KEY_NOT_PRESSED;
    2520:	8f ef       	ldi	r24, 0xFF	; 255
    2522:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 Array[6]={'#','#','#','#','#','#'};
    2524:	ce 01       	movw	r24, r28
    2526:	4e 96       	adiw	r24, 0x1e	; 30
    2528:	9d a3       	std	Y+37, r25	; 0x25
    252a:	8c a3       	std	Y+36, r24	; 0x24
    252c:	e2 e2       	ldi	r30, 0x22	; 34
    252e:	f1 e0       	ldi	r31, 0x01	; 1
    2530:	ff a3       	std	Y+39, r31	; 0x27
    2532:	ee a3       	std	Y+38, r30	; 0x26
    2534:	f6 e0       	ldi	r31, 0x06	; 6
    2536:	f8 a7       	std	Y+40, r31	; 0x28
    2538:	ee a1       	ldd	r30, Y+38	; 0x26
    253a:	ff a1       	ldd	r31, Y+39	; 0x27
    253c:	00 80       	ld	r0, Z
    253e:	8e a1       	ldd	r24, Y+38	; 0x26
    2540:	9f a1       	ldd	r25, Y+39	; 0x27
    2542:	01 96       	adiw	r24, 0x01	; 1
    2544:	9f a3       	std	Y+39, r25	; 0x27
    2546:	8e a3       	std	Y+38, r24	; 0x26
    2548:	ec a1       	ldd	r30, Y+36	; 0x24
    254a:	fd a1       	ldd	r31, Y+37	; 0x25
    254c:	00 82       	st	Z, r0
    254e:	8c a1       	ldd	r24, Y+36	; 0x24
    2550:	9d a1       	ldd	r25, Y+37	; 0x25
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	9d a3       	std	Y+37, r25	; 0x25
    2556:	8c a3       	std	Y+36, r24	; 0x24
    2558:	98 a5       	ldd	r25, Y+40	; 0x28
    255a:	91 50       	subi	r25, 0x01	; 1
    255c:	98 a7       	std	Y+40, r25	; 0x28
    255e:	e8 a5       	ldd	r30, Y+40	; 0x28
    2560:	ee 23       	and	r30, r30
    2562:	51 f7       	brne	.-44     	; 0x2538 <main+0x2c>
	DIO_voidInit();
    2564:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
	GI_interrupt_void_enable();
    2568:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <GI_interrupt_void_enable>
	TIMER_voidTimer0Init();
    256c:	0e 94 8e 1b 	call	0x371c	; 0x371c <TIMER_voidTimer0Init>
	TIMER_u8Timer0SetCallBackOCR(&updata_TimeSecond);
    2570:	8c ee       	ldi	r24, 0xEC	; 236
    2572:	93 e1       	ldi	r25, 0x13	; 19
    2574:	0e 94 33 1c 	call	0x3866	; 0x3866 <TIMER_u8Timer0SetCallBackOCR>
	LCD_voidInit();
    2578:	0e 94 df 0b 	call	0x17be	; 0x17be <LCD_voidInit>
	LCD_voidClearDisplay();
    257c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_voidClearDisplay>
	LCD_voidSendString(" TO SET CLOCK ");
    2580:	80 e6       	ldi	r24, 0x60	; 96
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
	LCD_voidGotoXY(2, 1);
    2588:	82 e0       	ldi	r24, 0x02	; 2
    258a:	61 e0       	ldi	r22, 0x01	; 1
    258c:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_voidGotoXY>
	LCD_voidSendString(" PRESSED ---> 9");
    2590:	8f e6       	ldi	r24, 0x6F	; 111
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
	while (1) {
		KPD_u8GetKeyState(&cheek_pressed);
    2598:	ce 01       	movw	r24, r28
    259a:	4d 96       	adiw	r24, 0x1d	; 29
    259c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <KPD_u8GetKeyState>
		if (cheek_pressed != KPD_u8_KEY_NOT_PRESSED) {
    25a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25a2:	8f 3f       	cpi	r24, 0xFF	; 255
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <main+0x9c>
    25a6:	15 c1       	rjmp	.+554    	; 0x27d2 <main+0x2c6>
			if (cheek_pressed == '9') {
    25a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25aa:	89 33       	cpi	r24, 0x39	; 57
    25ac:	91 f4       	brne	.+36     	; 0x25d2 <main+0xc6>
			    GetSetting_Clock(Array,6);
    25ae:	ce 01       	movw	r24, r28
    25b0:	4e 96       	adiw	r24, 0x1e	; 30
    25b2:	66 e0       	ldi	r22, 0x06	; 6
    25b4:	0e 94 0e 18 	call	0x301c	; 0x301c <GetSetting_Clock>
			    UpdataSetting_Clock(&count_Second,&count_Minutes,&count_Hours,Array);
    25b8:	88 e2       	ldi	r24, 0x28	; 40
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	2a e2       	ldi	r18, 0x2A	; 42
    25be:	31 e0       	ldi	r19, 0x01	; 1
    25c0:	49 e2       	ldi	r20, 0x29	; 41
    25c2:	51 e0       	ldi	r21, 0x01	; 1
    25c4:	fe 01       	movw	r30, r28
    25c6:	7e 96       	adiw	r30, 0x1e	; 30
    25c8:	b9 01       	movw	r22, r18
    25ca:	9f 01       	movw	r18, r30
    25cc:	0e 94 21 1b 	call	0x3642	; 0x3642 <UpdataSetting_Clock>
    25d0:	00 c1       	rjmp	.+512    	; 0x27d2 <main+0x2c6>
			} else {
				LCD_voidClearDisplay();
    25d2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_voidClearDisplay>
				LCD_voidGotoXY(1, 0);
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	60 e0       	ldi	r22, 0x00	; 0
    25da:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_voidGotoXY>
				LCD_voidSendString("WORNG CHOIES");
    25de:	8f e7       	ldi	r24, 0x7F	; 127
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a8 ec       	ldi	r26, 0xC8	; 200
    25ec:	b2 e4       	ldi	r27, 0x42	; 66
    25ee:	89 8f       	std	Y+25, r24	; 0x19
    25f0:	9a 8f       	std	Y+26, r25	; 0x1a
    25f2:	ab 8f       	std	Y+27, r26	; 0x1b
    25f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	69 8d       	ldd	r22, Y+25	; 0x19
    25f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a ef       	ldi	r20, 0xFA	; 250
    2604:	54 e4       	ldi	r21, 0x44	; 68
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8d 8b       	std	Y+21, r24	; 0x15
    2610:	9e 8b       	std	Y+22, r25	; 0x16
    2612:	af 8b       	std	Y+23, r26	; 0x17
    2614:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2616:	6d 89       	ldd	r22, Y+21	; 0x15
    2618:	7e 89       	ldd	r23, Y+22	; 0x16
    261a:	8f 89       	ldd	r24, Y+23	; 0x17
    261c:	98 8d       	ldd	r25, Y+24	; 0x18
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <main+0x12c>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <main+0x1aa>
	else if (__tmp > 65535)
    2638:	6d 89       	ldd	r22, Y+21	; 0x15
    263a:	7e 89       	ldd	r23, Y+22	; 0x16
    263c:	8f 89       	ldd	r24, Y+23	; 0x17
    263e:	98 8d       	ldd	r25, Y+24	; 0x18
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <main+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	69 8d       	ldd	r22, Y+25	; 0x19
    2652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9c 8b       	std	Y+20, r25	; 0x14
    2676:	8b 8b       	std	Y+19, r24	; 0x13
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <main+0x18c>
    267a:	88 ec       	ldi	r24, 0xC8	; 200
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9a 8b       	std	Y+18, r25	; 0x12
    2680:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2682:	89 89       	ldd	r24, Y+17	; 0x11
    2684:	9a 89       	ldd	r25, Y+18	; 0x12
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <main+0x17a>
    268a:	9a 8b       	std	Y+18, r25	; 0x12
    268c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8b 89       	ldd	r24, Y+19	; 0x13
    2690:	9c 89       	ldd	r25, Y+20	; 0x14
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9c 8b       	std	Y+20, r25	; 0x14
    2696:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8b 89       	ldd	r24, Y+19	; 0x13
    269a:	9c 89       	ldd	r25, Y+20	; 0x14
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <main+0x16e>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <main+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	6d 89       	ldd	r22, Y+21	; 0x15
    26a4:	7e 89       	ldd	r23, Y+22	; 0x16
    26a6:	8f 89       	ldd	r24, Y+23	; 0x17
    26a8:	98 8d       	ldd	r25, Y+24	; 0x18
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	98 8b       	std	Y+16, r25	; 0x10
    26bc:	8f 87       	std	Y+15, r24	; 0x0f
    26be:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c0:	98 89       	ldd	r25, Y+16	; 0x10
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <main+0x1b6>
    26c6:	98 8b       	std	Y+16, r25	; 0x10
    26c8:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(100);
				LCD_voidClearDisplay();
    26ca:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_voidClearDisplay>
				LCD_voidGotoXY(1, 0);
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_voidGotoXY>
				LCD_voidSendString("TO SET CLOCK");
    26d6:	8c e8       	ldi	r24, 0x8C	; 140
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
				LCD_voidGotoXY(2, 0);
    26de:	82 e0       	ldi	r24, 0x02	; 2
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_voidGotoXY>
				LCD_voidSendString("PRESSED ---> 9");
    26e6:	89 e9       	ldi	r24, 0x99	; 153
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a8 ec       	ldi	r26, 0xC8	; 200
    26f4:	b2 e4       	ldi	r27, 0x42	; 66
    26f6:	8b 87       	std	Y+11, r24	; 0x0b
    26f8:	9c 87       	std	Y+12, r25	; 0x0c
    26fa:	ad 87       	std	Y+13, r26	; 0x0d
    26fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a ef       	ldi	r20, 0xFA	; 250
    270c:	54 e4       	ldi	r21, 0x44	; 68
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	8f 83       	std	Y+7, r24	; 0x07
    2718:	98 87       	std	Y+8, r25	; 0x08
    271a:	a9 87       	std	Y+9, r26	; 0x09
    271c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271e:	6f 81       	ldd	r22, Y+7	; 0x07
    2720:	78 85       	ldd	r23, Y+8	; 0x08
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2732:	88 23       	and	r24, r24
    2734:	2c f4       	brge	.+10     	; 0x2740 <main+0x234>
		__ticks = 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	3f c0       	rjmp	.+126    	; 0x27be <main+0x2b2>
	else if (__tmp > 65535)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3f ef       	ldi	r19, 0xFF	; 255
    274c:	4f e7       	ldi	r20, 0x7F	; 127
    274e:	57 e4       	ldi	r21, 0x47	; 71
    2750:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2754:	18 16       	cp	r1, r24
    2756:	4c f5       	brge	.+82     	; 0x27aa <main+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <main+0x294>
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <main+0x282>
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <main+0x276>
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <main+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <main+0x2be>
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(100);
			}
		}
		display_void_timeclock();
    27d2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <display_void_timeclock>
    27d6:	e0 ce       	rjmp	.-576    	; 0x2598 <main+0x8c>

000027d8 <updata_TimeSecond>:

	return 0;
}
/*call back function when ISR Happen */
void updata_TimeSecond(void)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
	count_Second++;
    27e0:	80 91 28 01 	lds	r24, 0x0128
    27e4:	8f 5f       	subi	r24, 0xFF	; 255
    27e6:	80 93 28 01 	sts	0x0128, r24
}
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <display_void_timeclock>:
void display_void_timeclock(void)
{
    27f0:	0f 93       	push	r16
    27f2:	1f 93       	push	r17
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	c4 55       	subi	r28, 0x54	; 84
    27fe:	d0 40       	sbci	r29, 0x00	; 0
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
////			break;
//		default:break;
//		}
//	}

	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN1, DIO_u8_LOW);
    280a:	83 e0       	ldi	r24, 0x03	; 3
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN2, DIO_u8_LOW);
    2814:	83 e0       	ldi	r24, 0x03	; 3
    2816:	62 e0       	ldi	r22, 0x02	; 2
    2818:	40 e0       	ldi	r20, 0x00	; 0
    281a:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN3, DIO_u8_LOW);
    281e:	83 e0       	ldi	r24, 0x03	; 3
    2820:	63 e0       	ldi	r22, 0x03	; 3
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN4, DIO_u8_LOW);
    2828:	83 e0       	ldi	r24, 0x03	; 3
    282a:	64 e0       	ldi	r22, 0x04	; 4
    282c:	40 e0       	ldi	r20, 0x00	; 0
    282e:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_LOW);
    2832:	83 e0       	ldi	r24, 0x03	; 3
    2834:	65 e0       	ldi	r22, 0x05	; 5
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN0, DIO_u8_HIGH);
    283c:	83 e0       	ldi	r24, 0x03	; 3
    283e:	60 e0       	ldi	r22, 0x00	; 0
    2840:	41 e0       	ldi	r20, 0x01	; 1
    2842:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
    Sev_voidDisplayNumber(count_Second%10);
    2846:	80 91 28 01 	lds	r24, 0x0128
    284a:	9a e0       	ldi	r25, 0x0A	; 10
    284c:	69 2f       	mov	r22, r25
    284e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__udivmodqi4>
    2852:	89 2f       	mov	r24, r25
    2854:	0e 94 55 12 	call	0x24aa	; 0x24aa <Sev_voidDisplayNumber>
    2858:	fe 01       	movw	r30, r28
    285a:	ef 5a       	subi	r30, 0xAF	; 175
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	a0 ee       	ldi	r26, 0xE0	; 224
    2864:	b0 e4       	ldi	r27, 0x40	; 64
    2866:	80 83       	st	Z, r24
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	a2 83       	std	Z+2, r26	; 0x02
    286c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286e:	8e 01       	movw	r16, r28
    2870:	03 5b       	subi	r16, 0xB3	; 179
    2872:	1f 4f       	sbci	r17, 0xFF	; 255
    2874:	fe 01       	movw	r30, r28
    2876:	ef 5a       	subi	r30, 0xAF	; 175
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	82 81       	ldd	r24, Z+2	; 0x02
    2880:	93 81       	ldd	r25, Z+3	; 0x03
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	4a ef       	ldi	r20, 0xFA	; 250
    2888:	54 e4       	ldi	r21, 0x44	; 68
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	f8 01       	movw	r30, r16
    2894:	80 83       	st	Z, r24
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	a2 83       	std	Z+2, r26	; 0x02
    289a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    289c:	fe 01       	movw	r30, r28
    289e:	e3 5b       	subi	r30, 0xB3	; 179
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	60 81       	ld	r22, Z
    28a4:	71 81       	ldd	r23, Z+1	; 0x01
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e8       	ldi	r20, 0x80	; 128
    28b0:	5f e3       	ldi	r21, 0x3F	; 63
    28b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b6:	88 23       	and	r24, r24
    28b8:	44 f4       	brge	.+16     	; 0x28ca <display_void_timeclock+0xda>
		__ticks = 1;
    28ba:	fe 01       	movw	r30, r28
    28bc:	e5 5b       	subi	r30, 0xB5	; 181
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
    28c8:	64 c0       	rjmp	.+200    	; 0x2992 <display_void_timeclock+0x1a2>
	else if (__tmp > 65535)
    28ca:	fe 01       	movw	r30, r28
    28cc:	e3 5b       	subi	r30, 0xB3	; 179
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	3f ef       	ldi	r19, 0xFF	; 255
    28dc:	4f e7       	ldi	r20, 0x7F	; 127
    28de:	57 e4       	ldi	r21, 0x47	; 71
    28e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e4:	18 16       	cp	r1, r24
    28e6:	0c f0       	brlt	.+2      	; 0x28ea <display_void_timeclock+0xfa>
    28e8:	43 c0       	rjmp	.+134    	; 0x2970 <display_void_timeclock+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	fe 01       	movw	r30, r28
    28ec:	ef 5a       	subi	r30, 0xAF	; 175
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e2       	ldi	r20, 0x20	; 32
    28fe:	51 e4       	ldi	r21, 0x41	; 65
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	8e 01       	movw	r16, r28
    290a:	05 5b       	subi	r16, 0xB5	; 181
    290c:	1f 4f       	sbci	r17, 0xFF	; 255
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	f8 01       	movw	r30, r16
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	80 83       	st	Z, r24
    2920:	1f c0       	rjmp	.+62     	; 0x2960 <display_void_timeclock+0x170>
    2922:	fe 01       	movw	r30, r28
    2924:	e7 5b       	subi	r30, 0xB7	; 183
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	88 ec       	ldi	r24, 0xC8	; 200
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
    2930:	fe 01       	movw	r30, r28
    2932:	e7 5b       	subi	r30, 0xB7	; 183
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 81       	ld	r24, Z
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <display_void_timeclock+0x14a>
    293e:	fe 01       	movw	r30, r28
    2940:	e7 5b       	subi	r30, 0xB7	; 183
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2948:	de 01       	movw	r26, r28
    294a:	a5 5b       	subi	r26, 0xB5	; 181
    294c:	bf 4f       	sbci	r27, 0xFF	; 255
    294e:	fe 01       	movw	r30, r28
    2950:	e5 5b       	subi	r30, 0xB5	; 181
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	80 81       	ld	r24, Z
    2956:	91 81       	ldd	r25, Z+1	; 0x01
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	11 96       	adiw	r26, 0x01	; 1
    295c:	9c 93       	st	X, r25
    295e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2960:	fe 01       	movw	r30, r28
    2962:	e5 5b       	subi	r30, 0xB5	; 181
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	80 81       	ld	r24, Z
    2968:	91 81       	ldd	r25, Z+1	; 0x01
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	d1 f6       	brne	.-76     	; 0x2922 <display_void_timeclock+0x132>
    296e:	27 c0       	rjmp	.+78     	; 0x29be <display_void_timeclock+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2970:	8e 01       	movw	r16, r28
    2972:	05 5b       	subi	r16, 0xB5	; 181
    2974:	1f 4f       	sbci	r17, 0xFF	; 255
    2976:	fe 01       	movw	r30, r28
    2978:	e3 5b       	subi	r30, 0xB3	; 179
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	f8 01       	movw	r30, r16
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
    2992:	de 01       	movw	r26, r28
    2994:	a9 5b       	subi	r26, 0xB9	; 185
    2996:	bf 4f       	sbci	r27, 0xFF	; 255
    2998:	fe 01       	movw	r30, r28
    299a:	e5 5b       	subi	r30, 0xB5	; 181
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 81       	ld	r24, Z
    29a0:	91 81       	ldd	r25, Z+1	; 0x01
    29a2:	8d 93       	st	X+, r24
    29a4:	9c 93       	st	X, r25
    29a6:	fe 01       	movw	r30, r28
    29a8:	e9 5b       	subi	r30, 0xB9	; 185
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	80 81       	ld	r24, Z
    29ae:	91 81       	ldd	r25, Z+1	; 0x01
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <display_void_timeclock+0x1c0>
    29b4:	fe 01       	movw	r30, r28
    29b6:	e9 5b       	subi	r30, 0xB9	; 185
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	80 83       	st	Z, r24
	_delay_ms(DELAY_TO_PARALLEL_SEVSG);
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN0, DIO_u8_LOW);
    29be:	83 e0       	ldi	r24, 0x03	; 3
    29c0:	60 e0       	ldi	r22, 0x00	; 0
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN2, DIO_u8_LOW);
    29c8:	83 e0       	ldi	r24, 0x03	; 3
    29ca:	62 e0       	ldi	r22, 0x02	; 2
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN3, DIO_u8_LOW);
    29d2:	83 e0       	ldi	r24, 0x03	; 3
    29d4:	63 e0       	ldi	r22, 0x03	; 3
    29d6:	40 e0       	ldi	r20, 0x00	; 0
    29d8:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN4, DIO_u8_LOW);
    29dc:	83 e0       	ldi	r24, 0x03	; 3
    29de:	64 e0       	ldi	r22, 0x04	; 4
    29e0:	40 e0       	ldi	r20, 0x00	; 0
    29e2:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_LOW);
    29e6:	83 e0       	ldi	r24, 0x03	; 3
    29e8:	65 e0       	ldi	r22, 0x05	; 5
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN1, DIO_u8_HIGH);
    29f0:	83 e0       	ldi	r24, 0x03	; 3
    29f2:	61 e0       	ldi	r22, 0x01	; 1
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
    Sev_voidDisplayNumber(count_Second/10);
    29fa:	80 91 28 01 	lds	r24, 0x0128
    29fe:	9a e0       	ldi	r25, 0x0A	; 10
    2a00:	69 2f       	mov	r22, r25
    2a02:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__udivmodqi4>
    2a06:	0e 94 55 12 	call	0x24aa	; 0x24aa <Sev_voidDisplayNumber>
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ed 5b       	subi	r30, 0xBD	; 189
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	a0 ee       	ldi	r26, 0xE0	; 224
    2a16:	b0 e4       	ldi	r27, 0x40	; 64
    2a18:	80 83       	st	Z, r24
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	a2 83       	std	Z+2, r26	; 0x02
    2a1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a20:	8e 01       	movw	r16, r28
    2a22:	01 5c       	subi	r16, 0xC1	; 193
    2a24:	1f 4f       	sbci	r17, 0xFF	; 255
    2a26:	fe 01       	movw	r30, r28
    2a28:	ed 5b       	subi	r30, 0xBD	; 189
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a ef       	ldi	r20, 0xFA	; 250
    2a3a:	54 e4       	ldi	r21, 0x44	; 68
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	f8 01       	movw	r30, r16
    2a46:	80 83       	st	Z, r24
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	a2 83       	std	Z+2, r26	; 0x02
    2a4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ff 96       	adiw	r30, 0x3f	; 63
    2a52:	60 81       	ld	r22, Z
    2a54:	71 81       	ldd	r23, Z+1	; 0x01
    2a56:	82 81       	ldd	r24, Z+2	; 0x02
    2a58:	93 81       	ldd	r25, Z+3	; 0x03
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	40 e8       	ldi	r20, 0x80	; 128
    2a60:	5f e3       	ldi	r21, 0x3F	; 63
    2a62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a66:	88 23       	and	r24, r24
    2a68:	2c f4       	brge	.+10     	; 0x2a74 <display_void_timeclock+0x284>
		__ticks = 1;
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	9e af       	std	Y+62, r25	; 0x3e
    2a70:	8d af       	std	Y+61, r24	; 0x3d
    2a72:	46 c0       	rjmp	.+140    	; 0x2b00 <display_void_timeclock+0x310>
	else if (__tmp > 65535)
    2a74:	fe 01       	movw	r30, r28
    2a76:	ff 96       	adiw	r30, 0x3f	; 63
    2a78:	60 81       	ld	r22, Z
    2a7a:	71 81       	ldd	r23, Z+1	; 0x01
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	64 f5       	brge	.+88     	; 0x2ae8 <display_void_timeclock+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a90:	fe 01       	movw	r30, r28
    2a92:	ed 5b       	subi	r30, 0xBD	; 189
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	60 81       	ld	r22, Z
    2a98:	71 81       	ldd	r23, Z+1	; 0x01
    2a9a:	82 81       	ldd	r24, Z+2	; 0x02
    2a9c:	93 81       	ldd	r25, Z+3	; 0x03
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e2       	ldi	r20, 0x20	; 32
    2aa4:	51 e4       	ldi	r21, 0x41	; 65
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9e af       	std	Y+62, r25	; 0x3e
    2abc:	8d af       	std	Y+61, r24	; 0x3d
    2abe:	0f c0       	rjmp	.+30     	; 0x2ade <display_void_timeclock+0x2ee>
    2ac0:	88 ec       	ldi	r24, 0xC8	; 200
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9c af       	std	Y+60, r25	; 0x3c
    2ac6:	8b af       	std	Y+59, r24	; 0x3b
    2ac8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2aca:	9c ad       	ldd	r25, Y+60	; 0x3c
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <display_void_timeclock+0x2dc>
    2ad0:	9c af       	std	Y+60, r25	; 0x3c
    2ad2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ad6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	9e af       	std	Y+62, r25	; 0x3e
    2adc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ade:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ae0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	69 f7       	brne	.-38     	; 0x2ac0 <display_void_timeclock+0x2d0>
    2ae6:	16 c0       	rjmp	.+44     	; 0x2b14 <display_void_timeclock+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ff 96       	adiw	r30, 0x3f	; 63
    2aec:	60 81       	ld	r22, Z
    2aee:	71 81       	ldd	r23, Z+1	; 0x01
    2af0:	82 81       	ldd	r24, Z+2	; 0x02
    2af2:	93 81       	ldd	r25, Z+3	; 0x03
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9e af       	std	Y+62, r25	; 0x3e
    2afe:	8d af       	std	Y+61, r24	; 0x3d
    2b00:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b02:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b04:	9a af       	std	Y+58, r25	; 0x3a
    2b06:	89 af       	std	Y+57, r24	; 0x39
    2b08:	89 ad       	ldd	r24, Y+57	; 0x39
    2b0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <display_void_timeclock+0x31c>
    2b10:	9a af       	std	Y+58, r25	; 0x3a
    2b12:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(DELAY_TO_PARALLEL_SEVSG);
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN1, DIO_u8_LOW);
    2b14:	83 e0       	ldi	r24, 0x03	; 3
    2b16:	61 e0       	ldi	r22, 0x01	; 1
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN0, DIO_u8_LOW);
    2b1e:	83 e0       	ldi	r24, 0x03	; 3
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN3, DIO_u8_LOW);
    2b28:	83 e0       	ldi	r24, 0x03	; 3
    2b2a:	63 e0       	ldi	r22, 0x03	; 3
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN4, DIO_u8_LOW);
    2b32:	83 e0       	ldi	r24, 0x03	; 3
    2b34:	64 e0       	ldi	r22, 0x04	; 4
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_LOW);
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	65 e0       	ldi	r22, 0x05	; 5
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN2, DIO_u8_HIGH);
    2b46:	83 e0       	ldi	r24, 0x03	; 3
    2b48:	62 e0       	ldi	r22, 0x02	; 2
    2b4a:	41 e0       	ldi	r20, 0x01	; 1
    2b4c:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
    Sev_voidDisplayNumber(count_Minutes%10);
    2b50:	80 91 2a 01 	lds	r24, 0x012A
    2b54:	9a e0       	ldi	r25, 0x0A	; 10
    2b56:	69 2f       	mov	r22, r25
    2b58:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__udivmodqi4>
    2b5c:	89 2f       	mov	r24, r25
    2b5e:	0e 94 55 12 	call	0x24aa	; 0x24aa <Sev_voidDisplayNumber>
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	a0 ee       	ldi	r26, 0xE0	; 224
    2b68:	b0 e4       	ldi	r27, 0x40	; 64
    2b6a:	8d ab       	std	Y+53, r24	; 0x35
    2b6c:	9e ab       	std	Y+54, r25	; 0x36
    2b6e:	af ab       	std	Y+55, r26	; 0x37
    2b70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b72:	6d a9       	ldd	r22, Y+53	; 0x35
    2b74:	7e a9       	ldd	r23, Y+54	; 0x36
    2b76:	8f a9       	ldd	r24, Y+55	; 0x37
    2b78:	98 ad       	ldd	r25, Y+56	; 0x38
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	4a ef       	ldi	r20, 0xFA	; 250
    2b80:	54 e4       	ldi	r21, 0x44	; 68
    2b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	89 ab       	std	Y+49, r24	; 0x31
    2b8c:	9a ab       	std	Y+50, r25	; 0x32
    2b8e:	ab ab       	std	Y+51, r26	; 0x33
    2b90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b92:	69 a9       	ldd	r22, Y+49	; 0x31
    2b94:	7a a9       	ldd	r23, Y+50	; 0x32
    2b96:	8b a9       	ldd	r24, Y+51	; 0x33
    2b98:	9c a9       	ldd	r25, Y+52	; 0x34
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e8       	ldi	r20, 0x80	; 128
    2ba0:	5f e3       	ldi	r21, 0x3F	; 63
    2ba2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ba6:	88 23       	and	r24, r24
    2ba8:	2c f4       	brge	.+10     	; 0x2bb4 <display_void_timeclock+0x3c4>
		__ticks = 1;
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	98 ab       	std	Y+48, r25	; 0x30
    2bb0:	8f a7       	std	Y+47, r24	; 0x2f
    2bb2:	3f c0       	rjmp	.+126    	; 0x2c32 <display_void_timeclock+0x442>
	else if (__tmp > 65535)
    2bb4:	69 a9       	ldd	r22, Y+49	; 0x31
    2bb6:	7a a9       	ldd	r23, Y+50	; 0x32
    2bb8:	8b a9       	ldd	r24, Y+51	; 0x33
    2bba:	9c a9       	ldd	r25, Y+52	; 0x34
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	3f ef       	ldi	r19, 0xFF	; 255
    2bc0:	4f e7       	ldi	r20, 0x7F	; 127
    2bc2:	57 e4       	ldi	r21, 0x47	; 71
    2bc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bc8:	18 16       	cp	r1, r24
    2bca:	4c f5       	brge	.+82     	; 0x2c1e <display_void_timeclock+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bcc:	6d a9       	ldd	r22, Y+53	; 0x35
    2bce:	7e a9       	ldd	r23, Y+54	; 0x36
    2bd0:	8f a9       	ldd	r24, Y+55	; 0x37
    2bd2:	98 ad       	ldd	r25, Y+56	; 0x38
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	40 e2       	ldi	r20, 0x20	; 32
    2bda:	51 e4       	ldi	r21, 0x41	; 65
    2bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	bc 01       	movw	r22, r24
    2be6:	cd 01       	movw	r24, r26
    2be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	98 ab       	std	Y+48, r25	; 0x30
    2bf2:	8f a7       	std	Y+47, r24	; 0x2f
    2bf4:	0f c0       	rjmp	.+30     	; 0x2c14 <display_void_timeclock+0x424>
    2bf6:	88 ec       	ldi	r24, 0xC8	; 200
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	9e a7       	std	Y+46, r25	; 0x2e
    2bfc:	8d a7       	std	Y+45, r24	; 0x2d
    2bfe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c00:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	f1 f7       	brne	.-4      	; 0x2c02 <display_void_timeclock+0x412>
    2c06:	9e a7       	std	Y+46, r25	; 0x2e
    2c08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c0c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	98 ab       	std	Y+48, r25	; 0x30
    2c12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c16:	98 a9       	ldd	r25, Y+48	; 0x30
    2c18:	00 97       	sbiw	r24, 0x00	; 0
    2c1a:	69 f7       	brne	.-38     	; 0x2bf6 <display_void_timeclock+0x406>
    2c1c:	14 c0       	rjmp	.+40     	; 0x2c46 <display_void_timeclock+0x456>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c20:	7a a9       	ldd	r23, Y+50	; 0x32
    2c22:	8b a9       	ldd	r24, Y+51	; 0x33
    2c24:	9c a9       	ldd	r25, Y+52	; 0x34
    2c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	98 ab       	std	Y+48, r25	; 0x30
    2c30:	8f a7       	std	Y+47, r24	; 0x2f
    2c32:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c34:	98 a9       	ldd	r25, Y+48	; 0x30
    2c36:	9c a7       	std	Y+44, r25	; 0x2c
    2c38:	8b a7       	std	Y+43, r24	; 0x2b
    2c3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	f1 f7       	brne	.-4      	; 0x2c3e <display_void_timeclock+0x44e>
    2c42:	9c a7       	std	Y+44, r25	; 0x2c
    2c44:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(DELAY_TO_PARALLEL_SEVSG);
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN2, DIO_u8_LOW);
    2c46:	83 e0       	ldi	r24, 0x03	; 3
    2c48:	62 e0       	ldi	r22, 0x02	; 2
    2c4a:	40 e0       	ldi	r20, 0x00	; 0
    2c4c:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN0, DIO_u8_LOW);
    2c50:	83 e0       	ldi	r24, 0x03	; 3
    2c52:	60 e0       	ldi	r22, 0x00	; 0
    2c54:	40 e0       	ldi	r20, 0x00	; 0
    2c56:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN1, DIO_u8_LOW);
    2c5a:	83 e0       	ldi	r24, 0x03	; 3
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN4, DIO_u8_LOW);
    2c64:	83 e0       	ldi	r24, 0x03	; 3
    2c66:	64 e0       	ldi	r22, 0x04	; 4
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_LOW);
    2c6e:	83 e0       	ldi	r24, 0x03	; 3
    2c70:	65 e0       	ldi	r22, 0x05	; 5
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN3, DIO_u8_HIGH);
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	63 e0       	ldi	r22, 0x03	; 3
    2c7c:	41 e0       	ldi	r20, 0x01	; 1
    2c7e:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
    Sev_voidDisplayNumber(count_Minutes/10);
    2c82:	80 91 2a 01 	lds	r24, 0x012A
    2c86:	9a e0       	ldi	r25, 0x0A	; 10
    2c88:	69 2f       	mov	r22, r25
    2c8a:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__udivmodqi4>
    2c8e:	0e 94 55 12 	call	0x24aa	; 0x24aa <Sev_voidDisplayNumber>
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	a0 ee       	ldi	r26, 0xE0	; 224
    2c98:	b0 e4       	ldi	r27, 0x40	; 64
    2c9a:	8f a3       	std	Y+39, r24	; 0x27
    2c9c:	98 a7       	std	Y+40, r25	; 0x28
    2c9e:	a9 a7       	std	Y+41, r26	; 0x29
    2ca0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ca4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ca6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ca8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a ef       	ldi	r20, 0xFA	; 250
    2cb0:	54 e4       	ldi	r21, 0x44	; 68
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	8b a3       	std	Y+35, r24	; 0x23
    2cbc:	9c a3       	std	Y+36, r25	; 0x24
    2cbe:	ad a3       	std	Y+37, r26	; 0x25
    2cc0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cc2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cc4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cc6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <display_void_timeclock+0x4f4>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9a a3       	std	Y+34, r25	; 0x22
    2ce0:	89 a3       	std	Y+33, r24	; 0x21
    2ce2:	3f c0       	rjmp	.+126    	; 0x2d62 <display_void_timeclock+0x572>
	else if (__tmp > 65535)
    2ce4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cea:	9e a1       	ldd	r25, Y+38	; 0x26
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cf8:	18 16       	cp	r1, r24
    2cfa:	4c f5       	brge	.+82     	; 0x2d4e <display_void_timeclock+0x55e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfc:	6f a1       	ldd	r22, Y+39	; 0x27
    2cfe:	78 a5       	ldd	r23, Y+40	; 0x28
    2d00:	89 a5       	ldd	r24, Y+41	; 0x29
    2d02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9a a3       	std	Y+34, r25	; 0x22
    2d22:	89 a3       	std	Y+33, r24	; 0x21
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <display_void_timeclock+0x554>
    2d26:	88 ec       	ldi	r24, 0xC8	; 200
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	98 a3       	std	Y+32, r25	; 0x20
    2d2c:	8f 8f       	std	Y+31, r24	; 0x1f
    2d2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d30:	98 a1       	ldd	r25, Y+32	; 0x20
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <display_void_timeclock+0x542>
    2d36:	98 a3       	std	Y+32, r25	; 0x20
    2d38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d3c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	9a a3       	std	Y+34, r25	; 0x22
    2d42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d44:	89 a1       	ldd	r24, Y+33	; 0x21
    2d46:	9a a1       	ldd	r25, Y+34	; 0x22
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	69 f7       	brne	.-38     	; 0x2d26 <display_void_timeclock+0x536>
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <display_void_timeclock+0x586>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d50:	7c a1       	ldd	r23, Y+36	; 0x24
    2d52:	8d a1       	ldd	r24, Y+37	; 0x25
    2d54:	9e a1       	ldd	r25, Y+38	; 0x26
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9a a3       	std	Y+34, r25	; 0x22
    2d60:	89 a3       	std	Y+33, r24	; 0x21
    2d62:	89 a1       	ldd	r24, Y+33	; 0x21
    2d64:	9a a1       	ldd	r25, Y+34	; 0x22
    2d66:	9e 8f       	std	Y+30, r25	; 0x1e
    2d68:	8d 8f       	std	Y+29, r24	; 0x1d
    2d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <display_void_timeclock+0x57e>
    2d72:	9e 8f       	std	Y+30, r25	; 0x1e
    2d74:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(DELAY_TO_PARALLEL_SEVSG);
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN3, DIO_u8_LOW);
    2d76:	83 e0       	ldi	r24, 0x03	; 3
    2d78:	63 e0       	ldi	r22, 0x03	; 3
    2d7a:	40 e0       	ldi	r20, 0x00	; 0
    2d7c:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN0, DIO_u8_LOW);
    2d80:	83 e0       	ldi	r24, 0x03	; 3
    2d82:	60 e0       	ldi	r22, 0x00	; 0
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN1, DIO_u8_LOW);
    2d8a:	83 e0       	ldi	r24, 0x03	; 3
    2d8c:	61 e0       	ldi	r22, 0x01	; 1
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN2, DIO_u8_LOW);
    2d94:	83 e0       	ldi	r24, 0x03	; 3
    2d96:	62 e0       	ldi	r22, 0x02	; 2
    2d98:	40 e0       	ldi	r20, 0x00	; 0
    2d9a:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_LOW);
    2d9e:	83 e0       	ldi	r24, 0x03	; 3
    2da0:	65 e0       	ldi	r22, 0x05	; 5
    2da2:	40 e0       	ldi	r20, 0x00	; 0
    2da4:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN4, DIO_u8_HIGH);
    2da8:	83 e0       	ldi	r24, 0x03	; 3
    2daa:	64 e0       	ldi	r22, 0x04	; 4
    2dac:	41 e0       	ldi	r20, 0x01	; 1
    2dae:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
    Sev_voidDisplayNumber(count_Hours%10);
    2db2:	80 91 29 01 	lds	r24, 0x0129
    2db6:	9a e0       	ldi	r25, 0x0A	; 10
    2db8:	69 2f       	mov	r22, r25
    2dba:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__udivmodqi4>
    2dbe:	89 2f       	mov	r24, r25
    2dc0:	0e 94 55 12 	call	0x24aa	; 0x24aa <Sev_voidDisplayNumber>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	a0 ee       	ldi	r26, 0xE0	; 224
    2dca:	b0 e4       	ldi	r27, 0x40	; 64
    2dcc:	89 8f       	std	Y+25, r24	; 0x19
    2dce:	9a 8f       	std	Y+26, r25	; 0x1a
    2dd0:	ab 8f       	std	Y+27, r26	; 0x1b
    2dd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	4a ef       	ldi	r20, 0xFA	; 250
    2de2:	54 e4       	ldi	r21, 0x44	; 68
    2de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	8d 8b       	std	Y+21, r24	; 0x15
    2dee:	9e 8b       	std	Y+22, r25	; 0x16
    2df0:	af 8b       	std	Y+23, r26	; 0x17
    2df2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2df4:	6d 89       	ldd	r22, Y+21	; 0x15
    2df6:	7e 89       	ldd	r23, Y+22	; 0x16
    2df8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e8       	ldi	r20, 0x80	; 128
    2e02:	5f e3       	ldi	r21, 0x3F	; 63
    2e04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e08:	88 23       	and	r24, r24
    2e0a:	2c f4       	brge	.+10     	; 0x2e16 <display_void_timeclock+0x626>
		__ticks = 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	9c 8b       	std	Y+20, r25	; 0x14
    2e12:	8b 8b       	std	Y+19, r24	; 0x13
    2e14:	3f c0       	rjmp	.+126    	; 0x2e94 <display_void_timeclock+0x6a4>
	else if (__tmp > 65535)
    2e16:	6d 89       	ldd	r22, Y+21	; 0x15
    2e18:	7e 89       	ldd	r23, Y+22	; 0x16
    2e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	3f ef       	ldi	r19, 0xFF	; 255
    2e22:	4f e7       	ldi	r20, 0x7F	; 127
    2e24:	57 e4       	ldi	r21, 0x47	; 71
    2e26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e2a:	18 16       	cp	r1, r24
    2e2c:	4c f5       	brge	.+82     	; 0x2e80 <display_void_timeclock+0x690>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e2       	ldi	r20, 0x20	; 32
    2e3c:	51 e4       	ldi	r21, 0x41	; 65
    2e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	9c 8b       	std	Y+20, r25	; 0x14
    2e54:	8b 8b       	std	Y+19, r24	; 0x13
    2e56:	0f c0       	rjmp	.+30     	; 0x2e76 <display_void_timeclock+0x686>
    2e58:	88 ec       	ldi	r24, 0xC8	; 200
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	9a 8b       	std	Y+18, r25	; 0x12
    2e5e:	89 8b       	std	Y+17, r24	; 0x11
    2e60:	89 89       	ldd	r24, Y+17	; 0x11
    2e62:	9a 89       	ldd	r25, Y+18	; 0x12
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <display_void_timeclock+0x674>
    2e68:	9a 8b       	std	Y+18, r25	; 0x12
    2e6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	9c 8b       	std	Y+20, r25	; 0x14
    2e74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e76:	8b 89       	ldd	r24, Y+19	; 0x13
    2e78:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	69 f7       	brne	.-38     	; 0x2e58 <display_void_timeclock+0x668>
    2e7e:	14 c0       	rjmp	.+40     	; 0x2ea8 <display_void_timeclock+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e80:	6d 89       	ldd	r22, Y+21	; 0x15
    2e82:	7e 89       	ldd	r23, Y+22	; 0x16
    2e84:	8f 89       	ldd	r24, Y+23	; 0x17
    2e86:	98 8d       	ldd	r25, Y+24	; 0x18
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9c 8b       	std	Y+20, r25	; 0x14
    2e92:	8b 8b       	std	Y+19, r24	; 0x13
    2e94:	8b 89       	ldd	r24, Y+19	; 0x13
    2e96:	9c 89       	ldd	r25, Y+20	; 0x14
    2e98:	98 8b       	std	Y+16, r25	; 0x10
    2e9a:	8f 87       	std	Y+15, r24	; 0x0f
    2e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e9e:	98 89       	ldd	r25, Y+16	; 0x10
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <display_void_timeclock+0x6b0>
    2ea4:	98 8b       	std	Y+16, r25	; 0x10
    2ea6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DELAY_TO_PARALLEL_SEVSG);
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN4, DIO_u8_LOW);
    2ea8:	83 e0       	ldi	r24, 0x03	; 3
    2eaa:	64 e0       	ldi	r22, 0x04	; 4
    2eac:	40 e0       	ldi	r20, 0x00	; 0
    2eae:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN0, DIO_u8_LOW);
    2eb2:	83 e0       	ldi	r24, 0x03	; 3
    2eb4:	60 e0       	ldi	r22, 0x00	; 0
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN1, DIO_u8_LOW);
    2ebc:	83 e0       	ldi	r24, 0x03	; 3
    2ebe:	61 e0       	ldi	r22, 0x01	; 1
    2ec0:	40 e0       	ldi	r20, 0x00	; 0
    2ec2:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN2, DIO_u8_LOW);
    2ec6:	83 e0       	ldi	r24, 0x03	; 3
    2ec8:	62 e0       	ldi	r22, 0x02	; 2
    2eca:	40 e0       	ldi	r20, 0x00	; 0
    2ecc:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN3, DIO_u8_LOW);
    2ed0:	83 e0       	ldi	r24, 0x03	; 3
    2ed2:	63 e0       	ldi	r22, 0x03	; 3
    2ed4:	40 e0       	ldi	r20, 0x00	; 0
    2ed6:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_HIGH);
    2eda:	83 e0       	ldi	r24, 0x03	; 3
    2edc:	65 e0       	ldi	r22, 0x05	; 5
    2ede:	41 e0       	ldi	r20, 0x01	; 1
    2ee0:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_u8SetPinValue>
    Sev_voidDisplayNumber(count_Hours/10);
    2ee4:	80 91 29 01 	lds	r24, 0x0129
    2ee8:	9a e0       	ldi	r25, 0x0A	; 10
    2eea:	69 2f       	mov	r22, r25
    2eec:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__udivmodqi4>
    2ef0:	0e 94 55 12 	call	0x24aa	; 0x24aa <Sev_voidDisplayNumber>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	a0 ee       	ldi	r26, 0xE0	; 224
    2efa:	b0 e4       	ldi	r27, 0x40	; 64
    2efc:	8b 87       	std	Y+11, r24	; 0x0b
    2efe:	9c 87       	std	Y+12, r25	; 0x0c
    2f00:	ad 87       	std	Y+13, r26	; 0x0d
    2f02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	4a ef       	ldi	r20, 0xFA	; 250
    2f12:	54 e4       	ldi	r21, 0x44	; 68
    2f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	8f 83       	std	Y+7, r24	; 0x07
    2f1e:	98 87       	std	Y+8, r25	; 0x08
    2f20:	a9 87       	std	Y+9, r26	; 0x09
    2f22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f24:	6f 81       	ldd	r22, Y+7	; 0x07
    2f26:	78 85       	ldd	r23, Y+8	; 0x08
    2f28:	89 85       	ldd	r24, Y+9	; 0x09
    2f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e8       	ldi	r20, 0x80	; 128
    2f32:	5f e3       	ldi	r21, 0x3F	; 63
    2f34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f38:	88 23       	and	r24, r24
    2f3a:	2c f4       	brge	.+10     	; 0x2f46 <display_void_timeclock+0x756>
		__ticks = 1;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	9e 83       	std	Y+6, r25	; 0x06
    2f42:	8d 83       	std	Y+5, r24	; 0x05
    2f44:	3f c0       	rjmp	.+126    	; 0x2fc4 <display_void_timeclock+0x7d4>
	else if (__tmp > 65535)
    2f46:	6f 81       	ldd	r22, Y+7	; 0x07
    2f48:	78 85       	ldd	r23, Y+8	; 0x08
    2f4a:	89 85       	ldd	r24, Y+9	; 0x09
    2f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	3f ef       	ldi	r19, 0xFF	; 255
    2f52:	4f e7       	ldi	r20, 0x7F	; 127
    2f54:	57 e4       	ldi	r21, 0x47	; 71
    2f56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f5a:	18 16       	cp	r1, r24
    2f5c:	4c f5       	brge	.+82     	; 0x2fb0 <display_void_timeclock+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e2       	ldi	r20, 0x20	; 32
    2f6c:	51 e4       	ldi	r21, 0x41	; 65
    2f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9e 83       	std	Y+6, r25	; 0x06
    2f84:	8d 83       	std	Y+5, r24	; 0x05
    2f86:	0f c0       	rjmp	.+30     	; 0x2fa6 <display_void_timeclock+0x7b6>
    2f88:	88 ec       	ldi	r24, 0xC8	; 200
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9c 83       	std	Y+4, r25	; 0x04
    2f8e:	8b 83       	std	Y+3, r24	; 0x03
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	9c 81       	ldd	r25, Y+4	; 0x04
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <display_void_timeclock+0x7a4>
    2f98:	9c 83       	std	Y+4, r25	; 0x04
    2f9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	9e 83       	std	Y+6, r25	; 0x06
    2fa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	69 f7       	brne	.-38     	; 0x2f88 <display_void_timeclock+0x798>
    2fae:	14 c0       	rjmp	.+40     	; 0x2fd8 <display_void_timeclock+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb2:	78 85       	ldd	r23, Y+8	; 0x08
    2fb4:	89 85       	ldd	r24, Y+9	; 0x09
    2fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	9e 83       	std	Y+6, r25	; 0x06
    2fc2:	8d 83       	std	Y+5, r24	; 0x05
    2fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc8:	9a 83       	std	Y+2, r25	; 0x02
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <display_void_timeclock+0x7e0>
    2fd4:	9a 83       	std	Y+2, r25	; 0x02
    2fd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DELAY_TO_PARALLEL_SEVSG);

	if(count_Second==60)
    2fd8:	80 91 28 01 	lds	r24, 0x0128
    2fdc:	8c 33       	cpi	r24, 0x3C	; 60
    2fde:	39 f4       	brne	.+14     	; 0x2fee <display_void_timeclock+0x7fe>
	{
		count_Second=0;
    2fe0:	10 92 28 01 	sts	0x0128, r1
		count_Minutes++;
    2fe4:	80 91 2a 01 	lds	r24, 0x012A
    2fe8:	8f 5f       	subi	r24, 0xFF	; 255
    2fea:	80 93 2a 01 	sts	0x012A, r24
	}
	if(count_Minutes==60)
    2fee:	80 91 2a 01 	lds	r24, 0x012A
    2ff2:	8c 33       	cpi	r24, 0x3C	; 60
    2ff4:	39 f4       	brne	.+14     	; 0x3004 <display_void_timeclock+0x814>
	{
		count_Minutes=0;
    2ff6:	10 92 2a 01 	sts	0x012A, r1
		count_Hours++;
    2ffa:	80 91 29 01 	lds	r24, 0x0129
    2ffe:	8f 5f       	subi	r24, 0xFF	; 255
    3000:	80 93 29 01 	sts	0x0129, r24
	}
}
    3004:	cc 5a       	subi	r28, 0xAC	; 172
    3006:	df 4f       	sbci	r29, 0xFF	; 255
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	f8 94       	cli
    300c:	de bf       	out	0x3e, r29	; 62
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	cd bf       	out	0x3d, r28	; 61
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	1f 91       	pop	r17
    3018:	0f 91       	pop	r16
    301a:	08 95       	ret

0000301c <GetSetting_Clock>:
void GetSetting_Clock(u8 *capy_u16PtrArray,u8 capy_SizeArray)
{
    301c:	0f 93       	push	r16
    301e:	1f 93       	push	r17
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	cb 54       	subi	r28, 0x4B	; 75
    302a:	d0 40       	sbci	r29, 0x00	; 0
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	fe 01       	movw	r30, r28
    3038:	e7 5b       	subi	r30, 0xB7	; 183
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	80 83       	st	Z, r24
    3040:	fe 01       	movw	r30, r28
    3042:	e5 5b       	subi	r30, 0xB5	; 181
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	60 83       	st	Z, r22
	u8 local_counter=0;
    3048:	fe 01       	movw	r30, r28
    304a:	e9 5b       	subi	r30, 0xB9	; 185
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	10 82       	st	Z, r1
	u8 local_pu8ReturnedKey=KPD_u8_KEY_NOT_PRESSED;
    3050:	fe 01       	movw	r30, r28
    3052:	e8 5b       	subi	r30, 0xB8	; 184
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	8f ef       	ldi	r24, 0xFF	; 255
    3058:	80 83       	st	Z, r24
	LCD_voidClearDisplay();
    305a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_voidClearDisplay>
	LCD_voidSendString(" Enter Hours=");
    305e:	88 ea       	ldi	r24, 0xA8	; 168
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
    3066:	fe 01       	movw	r30, r28
    3068:	ed 5b       	subi	r30, 0xBD	; 189
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	a6 e9       	ldi	r26, 0x96	; 150
    3072:	b3 e4       	ldi	r27, 0x43	; 67
    3074:	80 83       	st	Z, r24
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	a2 83       	std	Z+2, r26	; 0x02
    307a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307c:	8e 01       	movw	r16, r28
    307e:	01 5c       	subi	r16, 0xC1	; 193
    3080:	1f 4f       	sbci	r17, 0xFF	; 255
    3082:	fe 01       	movw	r30, r28
    3084:	ed 5b       	subi	r30, 0xBD	; 189
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	60 81       	ld	r22, Z
    308a:	71 81       	ldd	r23, Z+1	; 0x01
    308c:	82 81       	ldd	r24, Z+2	; 0x02
    308e:	93 81       	ldd	r25, Z+3	; 0x03
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	4a ef       	ldi	r20, 0xFA	; 250
    3096:	54 e4       	ldi	r21, 0x44	; 68
    3098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	f8 01       	movw	r30, r16
    30a2:	80 83       	st	Z, r24
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	a2 83       	std	Z+2, r26	; 0x02
    30a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30aa:	fe 01       	movw	r30, r28
    30ac:	ff 96       	adiw	r30, 0x3f	; 63
    30ae:	60 81       	ld	r22, Z
    30b0:	71 81       	ldd	r23, Z+1	; 0x01
    30b2:	82 81       	ldd	r24, Z+2	; 0x02
    30b4:	93 81       	ldd	r25, Z+3	; 0x03
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e8       	ldi	r20, 0x80	; 128
    30bc:	5f e3       	ldi	r21, 0x3F	; 63
    30be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c2:	88 23       	and	r24, r24
    30c4:	2c f4       	brge	.+10     	; 0x30d0 <GetSetting_Clock+0xb4>
		__ticks = 1;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	9e af       	std	Y+62, r25	; 0x3e
    30cc:	8d af       	std	Y+61, r24	; 0x3d
    30ce:	46 c0       	rjmp	.+140    	; 0x315c <GetSetting_Clock+0x140>
	else if (__tmp > 65535)
    30d0:	fe 01       	movw	r30, r28
    30d2:	ff 96       	adiw	r30, 0x3f	; 63
    30d4:	60 81       	ld	r22, Z
    30d6:	71 81       	ldd	r23, Z+1	; 0x01
    30d8:	82 81       	ldd	r24, Z+2	; 0x02
    30da:	93 81       	ldd	r25, Z+3	; 0x03
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	3f ef       	ldi	r19, 0xFF	; 255
    30e0:	4f e7       	ldi	r20, 0x7F	; 127
    30e2:	57 e4       	ldi	r21, 0x47	; 71
    30e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30e8:	18 16       	cp	r1, r24
    30ea:	64 f5       	brge	.+88     	; 0x3144 <GetSetting_Clock+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ec:	fe 01       	movw	r30, r28
    30ee:	ed 5b       	subi	r30, 0xBD	; 189
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	60 81       	ld	r22, Z
    30f4:	71 81       	ldd	r23, Z+1	; 0x01
    30f6:	82 81       	ldd	r24, Z+2	; 0x02
    30f8:	93 81       	ldd	r25, Z+3	; 0x03
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e2       	ldi	r20, 0x20	; 32
    3100:	51 e4       	ldi	r21, 0x41	; 65
    3102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	bc 01       	movw	r22, r24
    310c:	cd 01       	movw	r24, r26
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	9e af       	std	Y+62, r25	; 0x3e
    3118:	8d af       	std	Y+61, r24	; 0x3d
    311a:	0f c0       	rjmp	.+30     	; 0x313a <GetSetting_Clock+0x11e>
    311c:	88 ec       	ldi	r24, 0xC8	; 200
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	9c af       	std	Y+60, r25	; 0x3c
    3122:	8b af       	std	Y+59, r24	; 0x3b
    3124:	8b ad       	ldd	r24, Y+59	; 0x3b
    3126:	9c ad       	ldd	r25, Y+60	; 0x3c
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <GetSetting_Clock+0x10c>
    312c:	9c af       	std	Y+60, r25	; 0x3c
    312e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3130:	8d ad       	ldd	r24, Y+61	; 0x3d
    3132:	9e ad       	ldd	r25, Y+62	; 0x3e
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	9e af       	std	Y+62, r25	; 0x3e
    3138:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313a:	8d ad       	ldd	r24, Y+61	; 0x3d
    313c:	9e ad       	ldd	r25, Y+62	; 0x3e
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	69 f7       	brne	.-38     	; 0x311c <GetSetting_Clock+0x100>
    3142:	68 c2       	rjmp	.+1232   	; 0x3614 <GetSetting_Clock+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3144:	fe 01       	movw	r30, r28
    3146:	ff 96       	adiw	r30, 0x3f	; 63
    3148:	60 81       	ld	r22, Z
    314a:	71 81       	ldd	r23, Z+1	; 0x01
    314c:	82 81       	ldd	r24, Z+2	; 0x02
    314e:	93 81       	ldd	r25, Z+3	; 0x03
    3150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	9e af       	std	Y+62, r25	; 0x3e
    315a:	8d af       	std	Y+61, r24	; 0x3d
    315c:	8d ad       	ldd	r24, Y+61	; 0x3d
    315e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3160:	9a af       	std	Y+58, r25	; 0x3a
    3162:	89 af       	std	Y+57, r24	; 0x39
    3164:	89 ad       	ldd	r24, Y+57	; 0x39
    3166:	9a ad       	ldd	r25, Y+58	; 0x3a
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	f1 f7       	brne	.-4      	; 0x3168 <GetSetting_Clock+0x14c>
    316c:	9a af       	std	Y+58, r25	; 0x3a
    316e:	89 af       	std	Y+57, r24	; 0x39
    3170:	51 c2       	rjmp	.+1186   	; 0x3614 <GetSetting_Clock+0x5f8>
	_delay_ms(300);
	while(local_counter <=capy_SizeArray)
	{   /*recived clock from user */
		do{
            KPD_u8GetKeyState(&local_pu8ReturnedKey);
    3172:	ce 01       	movw	r24, r28
    3174:	88 5b       	subi	r24, 0xB8	; 184
    3176:	9f 4f       	sbci	r25, 0xFF	; 255
    3178:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <KPD_u8GetKeyState>
		}while (local_pu8ReturnedKey==KPD_u8_KEY_NOT_PRESSED);
    317c:	fe 01       	movw	r30, r28
    317e:	e8 5b       	subi	r30, 0xB8	; 184
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	80 81       	ld	r24, Z
    3184:	8f 3f       	cpi	r24, 0xFF	; 255
    3186:	a9 f3       	breq	.-22     	; 0x3172 <GetSetting_Clock+0x156>
		if((local_pu8ReturnedKey!=KPD_u8_KEY_NOT_PRESSED) && (local_pu8ReturnedKey!='A'))
    3188:	fe 01       	movw	r30, r28
    318a:	e8 5b       	subi	r30, 0xB8	; 184
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	80 81       	ld	r24, Z
    3190:	8f 3f       	cpi	r24, 0xFF	; 255
    3192:	51 f1       	breq	.+84     	; 0x31e8 <GetSetting_Clock+0x1cc>
    3194:	fe 01       	movw	r30, r28
    3196:	e8 5b       	subi	r30, 0xB8	; 184
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 81       	ld	r24, Z
    319c:	81 34       	cpi	r24, 0x41	; 65
    319e:	21 f1       	breq	.+72     	; 0x31e8 <GetSetting_Clock+0x1cc>
		{
			capy_u16PtrArray[local_counter]=local_pu8ReturnedKey;
    31a0:	fe 01       	movw	r30, r28
    31a2:	e9 5b       	subi	r30, 0xB9	; 185
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	80 81       	ld	r24, Z
    31a8:	28 2f       	mov	r18, r24
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	fe 01       	movw	r30, r28
    31ae:	e7 5b       	subi	r30, 0xB7	; 183
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	80 81       	ld	r24, Z
    31b4:	91 81       	ldd	r25, Z+1	; 0x01
    31b6:	dc 01       	movw	r26, r24
    31b8:	a2 0f       	add	r26, r18
    31ba:	b3 1f       	adc	r27, r19
    31bc:	fe 01       	movw	r30, r28
    31be:	e8 5b       	subi	r30, 0xB8	; 184
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	80 81       	ld	r24, Z
    31c4:	8c 93       	st	X, r24
			LCD_voidWriteChar(capy_u16PtrArray[local_counter]);
    31c6:	fe 01       	movw	r30, r28
    31c8:	e9 5b       	subi	r30, 0xB9	; 185
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	80 81       	ld	r24, Z
    31ce:	28 2f       	mov	r18, r24
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	fe 01       	movw	r30, r28
    31d4:	e7 5b       	subi	r30, 0xB7	; 183
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	80 81       	ld	r24, Z
    31da:	91 81       	ldd	r25, Z+1	; 0x01
    31dc:	fc 01       	movw	r30, r24
    31de:	e2 0f       	add	r30, r18
    31e0:	f3 1f       	adc	r31, r19
    31e2:	80 81       	ld	r24, Z
    31e4:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_voidWriteChar>
		}
		if(local_counter==1)
    31e8:	fe 01       	movw	r30, r28
    31ea:	e9 5b       	subi	r30, 0xB9	; 185
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	80 81       	ld	r24, Z
    31f0:	81 30       	cpi	r24, 0x01	; 1
    31f2:	09 f0       	breq	.+2      	; 0x31f6 <GetSetting_Clock+0x1da>
    31f4:	78 c0       	rjmp	.+240    	; 0x32e6 <GetSetting_Clock+0x2ca>
		{
			LCD_voidClearDisplay();
    31f6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_voidClearDisplay>
			LCD_voidSendString(" Enter Minutes=");
    31fa:	86 eb       	ldi	r24, 0xB6	; 182
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a6 e9       	ldi	r26, 0x96	; 150
    3208:	b3 e4       	ldi	r27, 0x43	; 67
    320a:	8d ab       	std	Y+53, r24	; 0x35
    320c:	9e ab       	std	Y+54, r25	; 0x36
    320e:	af ab       	std	Y+55, r26	; 0x37
    3210:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3212:	6d a9       	ldd	r22, Y+53	; 0x35
    3214:	7e a9       	ldd	r23, Y+54	; 0x36
    3216:	8f a9       	ldd	r24, Y+55	; 0x37
    3218:	98 ad       	ldd	r25, Y+56	; 0x38
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	4a ef       	ldi	r20, 0xFA	; 250
    3220:	54 e4       	ldi	r21, 0x44	; 68
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	89 ab       	std	Y+49, r24	; 0x31
    322c:	9a ab       	std	Y+50, r25	; 0x32
    322e:	ab ab       	std	Y+51, r26	; 0x33
    3230:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3232:	69 a9       	ldd	r22, Y+49	; 0x31
    3234:	7a a9       	ldd	r23, Y+50	; 0x32
    3236:	8b a9       	ldd	r24, Y+51	; 0x33
    3238:	9c a9       	ldd	r25, Y+52	; 0x34
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f e3       	ldi	r21, 0x3F	; 63
    3242:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3246:	88 23       	and	r24, r24
    3248:	2c f4       	brge	.+10     	; 0x3254 <GetSetting_Clock+0x238>
		__ticks = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	98 ab       	std	Y+48, r25	; 0x30
    3250:	8f a7       	std	Y+47, r24	; 0x2f
    3252:	3f c0       	rjmp	.+126    	; 0x32d2 <GetSetting_Clock+0x2b6>
	else if (__tmp > 65535)
    3254:	69 a9       	ldd	r22, Y+49	; 0x31
    3256:	7a a9       	ldd	r23, Y+50	; 0x32
    3258:	8b a9       	ldd	r24, Y+51	; 0x33
    325a:	9c a9       	ldd	r25, Y+52	; 0x34
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	3f ef       	ldi	r19, 0xFF	; 255
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	57 e4       	ldi	r21, 0x47	; 71
    3264:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	4c f5       	brge	.+82     	; 0x32be <GetSetting_Clock+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	6d a9       	ldd	r22, Y+53	; 0x35
    326e:	7e a9       	ldd	r23, Y+54	; 0x36
    3270:	8f a9       	ldd	r24, Y+55	; 0x37
    3272:	98 ad       	ldd	r25, Y+56	; 0x38
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e2       	ldi	r20, 0x20	; 32
    327a:	51 e4       	ldi	r21, 0x41	; 65
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	98 ab       	std	Y+48, r25	; 0x30
    3292:	8f a7       	std	Y+47, r24	; 0x2f
    3294:	0f c0       	rjmp	.+30     	; 0x32b4 <GetSetting_Clock+0x298>
    3296:	88 ec       	ldi	r24, 0xC8	; 200
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	9e a7       	std	Y+46, r25	; 0x2e
    329c:	8d a7       	std	Y+45, r24	; 0x2d
    329e:	8d a5       	ldd	r24, Y+45	; 0x2d
    32a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <GetSetting_Clock+0x286>
    32a6:	9e a7       	std	Y+46, r25	; 0x2e
    32a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ac:	98 a9       	ldd	r25, Y+48	; 0x30
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	98 ab       	std	Y+48, r25	; 0x30
    32b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32b6:	98 a9       	ldd	r25, Y+48	; 0x30
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	69 f7       	brne	.-38     	; 0x3296 <GetSetting_Clock+0x27a>
    32bc:	14 c0       	rjmp	.+40     	; 0x32e6 <GetSetting_Clock+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32be:	69 a9       	ldd	r22, Y+49	; 0x31
    32c0:	7a a9       	ldd	r23, Y+50	; 0x32
    32c2:	8b a9       	ldd	r24, Y+51	; 0x33
    32c4:	9c a9       	ldd	r25, Y+52	; 0x34
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	98 ab       	std	Y+48, r25	; 0x30
    32d0:	8f a7       	std	Y+47, r24	; 0x2f
    32d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d4:	98 a9       	ldd	r25, Y+48	; 0x30
    32d6:	9c a7       	std	Y+44, r25	; 0x2c
    32d8:	8b a7       	std	Y+43, r24	; 0x2b
    32da:	8b a5       	ldd	r24, Y+43	; 0x2b
    32dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <GetSetting_Clock+0x2c2>
    32e2:	9c a7       	std	Y+44, r25	; 0x2c
    32e4:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(300);
		}
		if(local_counter==3)
    32e6:	fe 01       	movw	r30, r28
    32e8:	e9 5b       	subi	r30, 0xB9	; 185
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	80 81       	ld	r24, Z
    32ee:	83 30       	cpi	r24, 0x03	; 3
    32f0:	09 f0       	breq	.+2      	; 0x32f4 <GetSetting_Clock+0x2d8>
    32f2:	78 c0       	rjmp	.+240    	; 0x33e4 <GetSetting_Clock+0x3c8>
		{
			LCD_voidClearDisplay();
    32f4:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_voidClearDisplay>
			LCD_voidSendString(" Enter Second=");
    32f8:	86 ec       	ldi	r24, 0xC6	; 198
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	a6 e9       	ldi	r26, 0x96	; 150
    3306:	b3 e4       	ldi	r27, 0x43	; 67
    3308:	8f a3       	std	Y+39, r24	; 0x27
    330a:	98 a7       	std	Y+40, r25	; 0x28
    330c:	a9 a7       	std	Y+41, r26	; 0x29
    330e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3310:	6f a1       	ldd	r22, Y+39	; 0x27
    3312:	78 a5       	ldd	r23, Y+40	; 0x28
    3314:	89 a5       	ldd	r24, Y+41	; 0x29
    3316:	9a a5       	ldd	r25, Y+42	; 0x2a
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	4a ef       	ldi	r20, 0xFA	; 250
    331e:	54 e4       	ldi	r21, 0x44	; 68
    3320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	8b a3       	std	Y+35, r24	; 0x23
    332a:	9c a3       	std	Y+36, r25	; 0x24
    332c:	ad a3       	std	Y+37, r26	; 0x25
    332e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3330:	6b a1       	ldd	r22, Y+35	; 0x23
    3332:	7c a1       	ldd	r23, Y+36	; 0x24
    3334:	8d a1       	ldd	r24, Y+37	; 0x25
    3336:	9e a1       	ldd	r25, Y+38	; 0x26
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	40 e8       	ldi	r20, 0x80	; 128
    333e:	5f e3       	ldi	r21, 0x3F	; 63
    3340:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3344:	88 23       	and	r24, r24
    3346:	2c f4       	brge	.+10     	; 0x3352 <GetSetting_Clock+0x336>
		__ticks = 1;
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	9a a3       	std	Y+34, r25	; 0x22
    334e:	89 a3       	std	Y+33, r24	; 0x21
    3350:	3f c0       	rjmp	.+126    	; 0x33d0 <GetSetting_Clock+0x3b4>
	else if (__tmp > 65535)
    3352:	6b a1       	ldd	r22, Y+35	; 0x23
    3354:	7c a1       	ldd	r23, Y+36	; 0x24
    3356:	8d a1       	ldd	r24, Y+37	; 0x25
    3358:	9e a1       	ldd	r25, Y+38	; 0x26
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	3f ef       	ldi	r19, 0xFF	; 255
    335e:	4f e7       	ldi	r20, 0x7F	; 127
    3360:	57 e4       	ldi	r21, 0x47	; 71
    3362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3366:	18 16       	cp	r1, r24
    3368:	4c f5       	brge	.+82     	; 0x33bc <GetSetting_Clock+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336a:	6f a1       	ldd	r22, Y+39	; 0x27
    336c:	78 a5       	ldd	r23, Y+40	; 0x28
    336e:	89 a5       	ldd	r24, Y+41	; 0x29
    3370:	9a a5       	ldd	r25, Y+42	; 0x2a
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	40 e2       	ldi	r20, 0x20	; 32
    3378:	51 e4       	ldi	r21, 0x41	; 65
    337a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	bc 01       	movw	r22, r24
    3384:	cd 01       	movw	r24, r26
    3386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	9a a3       	std	Y+34, r25	; 0x22
    3390:	89 a3       	std	Y+33, r24	; 0x21
    3392:	0f c0       	rjmp	.+30     	; 0x33b2 <GetSetting_Clock+0x396>
    3394:	88 ec       	ldi	r24, 0xC8	; 200
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	98 a3       	std	Y+32, r25	; 0x20
    339a:	8f 8f       	std	Y+31, r24	; 0x1f
    339c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    339e:	98 a1       	ldd	r25, Y+32	; 0x20
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	f1 f7       	brne	.-4      	; 0x33a0 <GetSetting_Clock+0x384>
    33a4:	98 a3       	std	Y+32, r25	; 0x20
    33a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a8:	89 a1       	ldd	r24, Y+33	; 0x21
    33aa:	9a a1       	ldd	r25, Y+34	; 0x22
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	9a a3       	std	Y+34, r25	; 0x22
    33b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b2:	89 a1       	ldd	r24, Y+33	; 0x21
    33b4:	9a a1       	ldd	r25, Y+34	; 0x22
    33b6:	00 97       	sbiw	r24, 0x00	; 0
    33b8:	69 f7       	brne	.-38     	; 0x3394 <GetSetting_Clock+0x378>
    33ba:	14 c0       	rjmp	.+40     	; 0x33e4 <GetSetting_Clock+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33bc:	6b a1       	ldd	r22, Y+35	; 0x23
    33be:	7c a1       	ldd	r23, Y+36	; 0x24
    33c0:	8d a1       	ldd	r24, Y+37	; 0x25
    33c2:	9e a1       	ldd	r25, Y+38	; 0x26
    33c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	9a a3       	std	Y+34, r25	; 0x22
    33ce:	89 a3       	std	Y+33, r24	; 0x21
    33d0:	89 a1       	ldd	r24, Y+33	; 0x21
    33d2:	9a a1       	ldd	r25, Y+34	; 0x22
    33d4:	9e 8f       	std	Y+30, r25	; 0x1e
    33d6:	8d 8f       	std	Y+29, r24	; 0x1d
    33d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <GetSetting_Clock+0x3c0>
    33e0:	9e 8f       	std	Y+30, r25	; 0x1e
    33e2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
		}
		if(local_counter==5)
    33e4:	fe 01       	movw	r30, r28
    33e6:	e9 5b       	subi	r30, 0xB9	; 185
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	80 81       	ld	r24, Z
    33ec:	85 30       	cpi	r24, 0x05	; 5
    33ee:	09 f0       	breq	.+2      	; 0x33f2 <GetSetting_Clock+0x3d6>
    33f0:	80 c0       	rjmp	.+256    	; 0x34f2 <GetSetting_Clock+0x4d6>
		{
			LCD_voidClearDisplay();
    33f2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_voidClearDisplay>
			LCD_voidSendString("     thank you  ");
    33f6:	85 ed       	ldi	r24, 0xD5	; 213
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
			LCD_voidGotoXY(2, 0);
    33fe:	82 e0       	ldi	r24, 0x02	; 2
    3400:	60 e0       	ldi	r22, 0x00	; 0
    3402:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_voidGotoXY>
			LCD_voidSendString("     to setting  ");
    3406:	86 ee       	ldi	r24, 0xE6	; 230
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	a6 e9       	ldi	r26, 0x96	; 150
    3414:	b3 e4       	ldi	r27, 0x43	; 67
    3416:	89 8f       	std	Y+25, r24	; 0x19
    3418:	9a 8f       	std	Y+26, r25	; 0x1a
    341a:	ab 8f       	std	Y+27, r26	; 0x1b
    341c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341e:	69 8d       	ldd	r22, Y+25	; 0x19
    3420:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3422:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3424:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	4a ef       	ldi	r20, 0xFA	; 250
    342c:	54 e4       	ldi	r21, 0x44	; 68
    342e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	8d 8b       	std	Y+21, r24	; 0x15
    3438:	9e 8b       	std	Y+22, r25	; 0x16
    343a:	af 8b       	std	Y+23, r26	; 0x17
    343c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    343e:	6d 89       	ldd	r22, Y+21	; 0x15
    3440:	7e 89       	ldd	r23, Y+22	; 0x16
    3442:	8f 89       	ldd	r24, Y+23	; 0x17
    3444:	98 8d       	ldd	r25, Y+24	; 0x18
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	40 e8       	ldi	r20, 0x80	; 128
    344c:	5f e3       	ldi	r21, 0x3F	; 63
    344e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3452:	88 23       	and	r24, r24
    3454:	2c f4       	brge	.+10     	; 0x3460 <GetSetting_Clock+0x444>
		__ticks = 1;
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	9c 8b       	std	Y+20, r25	; 0x14
    345c:	8b 8b       	std	Y+19, r24	; 0x13
    345e:	3f c0       	rjmp	.+126    	; 0x34de <GetSetting_Clock+0x4c2>
	else if (__tmp > 65535)
    3460:	6d 89       	ldd	r22, Y+21	; 0x15
    3462:	7e 89       	ldd	r23, Y+22	; 0x16
    3464:	8f 89       	ldd	r24, Y+23	; 0x17
    3466:	98 8d       	ldd	r25, Y+24	; 0x18
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	3f ef       	ldi	r19, 0xFF	; 255
    346c:	4f e7       	ldi	r20, 0x7F	; 127
    346e:	57 e4       	ldi	r21, 0x47	; 71
    3470:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3474:	18 16       	cp	r1, r24
    3476:	4c f5       	brge	.+82     	; 0x34ca <GetSetting_Clock+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3478:	69 8d       	ldd	r22, Y+25	; 0x19
    347a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    347c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    347e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	40 e2       	ldi	r20, 0x20	; 32
    3486:	51 e4       	ldi	r21, 0x41	; 65
    3488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	bc 01       	movw	r22, r24
    3492:	cd 01       	movw	r24, r26
    3494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	9c 8b       	std	Y+20, r25	; 0x14
    349e:	8b 8b       	std	Y+19, r24	; 0x13
    34a0:	0f c0       	rjmp	.+30     	; 0x34c0 <GetSetting_Clock+0x4a4>
    34a2:	88 ec       	ldi	r24, 0xC8	; 200
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	9a 8b       	std	Y+18, r25	; 0x12
    34a8:	89 8b       	std	Y+17, r24	; 0x11
    34aa:	89 89       	ldd	r24, Y+17	; 0x11
    34ac:	9a 89       	ldd	r25, Y+18	; 0x12
    34ae:	01 97       	sbiw	r24, 0x01	; 1
    34b0:	f1 f7       	brne	.-4      	; 0x34ae <GetSetting_Clock+0x492>
    34b2:	9a 8b       	std	Y+18, r25	; 0x12
    34b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b6:	8b 89       	ldd	r24, Y+19	; 0x13
    34b8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	9c 8b       	std	Y+20, r25	; 0x14
    34be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c0:	8b 89       	ldd	r24, Y+19	; 0x13
    34c2:	9c 89       	ldd	r25, Y+20	; 0x14
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	69 f7       	brne	.-38     	; 0x34a2 <GetSetting_Clock+0x486>
    34c8:	14 c0       	rjmp	.+40     	; 0x34f2 <GetSetting_Clock+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ca:	6d 89       	ldd	r22, Y+21	; 0x15
    34cc:	7e 89       	ldd	r23, Y+22	; 0x16
    34ce:	8f 89       	ldd	r24, Y+23	; 0x17
    34d0:	98 8d       	ldd	r25, Y+24	; 0x18
    34d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	9c 8b       	std	Y+20, r25	; 0x14
    34dc:	8b 8b       	std	Y+19, r24	; 0x13
    34de:	8b 89       	ldd	r24, Y+19	; 0x13
    34e0:	9c 89       	ldd	r25, Y+20	; 0x14
    34e2:	98 8b       	std	Y+16, r25	; 0x10
    34e4:	8f 87       	std	Y+15, r24	; 0x0f
    34e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e8:	98 89       	ldd	r25, Y+16	; 0x10
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	f1 f7       	brne	.-4      	; 0x34ea <GetSetting_Clock+0x4ce>
    34ee:	98 8b       	std	Y+16, r25	; 0x10
    34f0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(300);
		}
		if(local_pu8ReturnedKey=='A')
    34f2:	fe 01       	movw	r30, r28
    34f4:	e8 5b       	subi	r30, 0xB8	; 184
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	80 81       	ld	r24, Z
    34fa:	81 34       	cpi	r24, 0x41	; 65
    34fc:	09 f0       	breq	.+2      	; 0x3500 <GetSetting_Clock+0x4e4>
    34fe:	81 c0       	rjmp	.+258    	; 0x3602 <GetSetting_Clock+0x5e6>
		{
			LCD_voidClearDisplay();
    3500:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_voidClearDisplay>
			LCD_voidSendString("TO SET CLOCK");
    3504:	8c e8       	ldi	r24, 0x8C	; 140
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
			LCD_voidGotoXY(2, 0);
    350c:	82 e0       	ldi	r24, 0x02	; 2
    350e:	60 e0       	ldi	r22, 0x00	; 0
    3510:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_voidGotoXY>
			LCD_voidSendString("PRESSED ---> 9");
    3514:	89 e9       	ldi	r24, 0x99	; 153
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidSendString>
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	a6 e9       	ldi	r26, 0x96	; 150
    3522:	b3 e4       	ldi	r27, 0x43	; 67
    3524:	8b 87       	std	Y+11, r24	; 0x0b
    3526:	9c 87       	std	Y+12, r25	; 0x0c
    3528:	ad 87       	std	Y+13, r26	; 0x0d
    352a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352c:	6b 85       	ldd	r22, Y+11	; 0x0b
    352e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3530:	8d 85       	ldd	r24, Y+13	; 0x0d
    3532:	9e 85       	ldd	r25, Y+14	; 0x0e
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	4a ef       	ldi	r20, 0xFA	; 250
    353a:	54 e4       	ldi	r21, 0x44	; 68
    353c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	8f 83       	std	Y+7, r24	; 0x07
    3546:	98 87       	std	Y+8, r25	; 0x08
    3548:	a9 87       	std	Y+9, r26	; 0x09
    354a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    354c:	6f 81       	ldd	r22, Y+7	; 0x07
    354e:	78 85       	ldd	r23, Y+8	; 0x08
    3550:	89 85       	ldd	r24, Y+9	; 0x09
    3552:	9a 85       	ldd	r25, Y+10	; 0x0a
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	40 e8       	ldi	r20, 0x80	; 128
    355a:	5f e3       	ldi	r21, 0x3F	; 63
    355c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3560:	88 23       	and	r24, r24
    3562:	2c f4       	brge	.+10     	; 0x356e <GetSetting_Clock+0x552>
		__ticks = 1;
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	9e 83       	std	Y+6, r25	; 0x06
    356a:	8d 83       	std	Y+5, r24	; 0x05
    356c:	3f c0       	rjmp	.+126    	; 0x35ec <GetSetting_Clock+0x5d0>
	else if (__tmp > 65535)
    356e:	6f 81       	ldd	r22, Y+7	; 0x07
    3570:	78 85       	ldd	r23, Y+8	; 0x08
    3572:	89 85       	ldd	r24, Y+9	; 0x09
    3574:	9a 85       	ldd	r25, Y+10	; 0x0a
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	3f ef       	ldi	r19, 0xFF	; 255
    357a:	4f e7       	ldi	r20, 0x7F	; 127
    357c:	57 e4       	ldi	r21, 0x47	; 71
    357e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3582:	18 16       	cp	r1, r24
    3584:	4c f5       	brge	.+82     	; 0x35d8 <GetSetting_Clock+0x5bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3586:	6b 85       	ldd	r22, Y+11	; 0x0b
    3588:	7c 85       	ldd	r23, Y+12	; 0x0c
    358a:	8d 85       	ldd	r24, Y+13	; 0x0d
    358c:	9e 85       	ldd	r25, Y+14	; 0x0e
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e2       	ldi	r20, 0x20	; 32
    3594:	51 e4       	ldi	r21, 0x41	; 65
    3596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	bc 01       	movw	r22, r24
    35a0:	cd 01       	movw	r24, r26
    35a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	9e 83       	std	Y+6, r25	; 0x06
    35ac:	8d 83       	std	Y+5, r24	; 0x05
    35ae:	0f c0       	rjmp	.+30     	; 0x35ce <GetSetting_Clock+0x5b2>
    35b0:	88 ec       	ldi	r24, 0xC8	; 200
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	9c 83       	std	Y+4, r25	; 0x04
    35b6:	8b 83       	std	Y+3, r24	; 0x03
    35b8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ba:	9c 81       	ldd	r25, Y+4	; 0x04
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	f1 f7       	brne	.-4      	; 0x35bc <GetSetting_Clock+0x5a0>
    35c0:	9c 83       	std	Y+4, r25	; 0x04
    35c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c4:	8d 81       	ldd	r24, Y+5	; 0x05
    35c6:	9e 81       	ldd	r25, Y+6	; 0x06
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	9e 83       	std	Y+6, r25	; 0x06
    35cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ce:	8d 81       	ldd	r24, Y+5	; 0x05
    35d0:	9e 81       	ldd	r25, Y+6	; 0x06
    35d2:	00 97       	sbiw	r24, 0x00	; 0
    35d4:	69 f7       	brne	.-38     	; 0x35b0 <GetSetting_Clock+0x594>
    35d6:	29 c0       	rjmp	.+82     	; 0x362a <GetSetting_Clock+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d8:	6f 81       	ldd	r22, Y+7	; 0x07
    35da:	78 85       	ldd	r23, Y+8	; 0x08
    35dc:	89 85       	ldd	r24, Y+9	; 0x09
    35de:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	9e 83       	std	Y+6, r25	; 0x06
    35ea:	8d 83       	std	Y+5, r24	; 0x05
    35ec:	8d 81       	ldd	r24, Y+5	; 0x05
    35ee:	9e 81       	ldd	r25, Y+6	; 0x06
    35f0:	9a 83       	std	Y+2, r25	; 0x02
    35f2:	89 83       	std	Y+1, r24	; 0x01
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	9a 81       	ldd	r25, Y+2	; 0x02
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	f1 f7       	brne	.-4      	; 0x35f8 <GetSetting_Clock+0x5dc>
    35fc:	9a 83       	std	Y+2, r25	; 0x02
    35fe:	89 83       	std	Y+1, r24	; 0x01
    3600:	14 c0       	rjmp	.+40     	; 0x362a <GetSetting_Clock+0x60e>
			_delay_ms(300);
			break ; /* to out from while loop */
		}
		local_counter++;
    3602:	de 01       	movw	r26, r28
    3604:	a9 5b       	subi	r26, 0xB9	; 185
    3606:	bf 4f       	sbci	r27, 0xFF	; 255
    3608:	fe 01       	movw	r30, r28
    360a:	e9 5b       	subi	r30, 0xB9	; 185
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 81       	ld	r24, Z
    3610:	8f 5f       	subi	r24, 0xFF	; 255
    3612:	8c 93       	st	X, r24
	u8 local_counter=0;
	u8 local_pu8ReturnedKey=KPD_u8_KEY_NOT_PRESSED;
	LCD_voidClearDisplay();
	LCD_voidSendString(" Enter Hours=");
	_delay_ms(300);
	while(local_counter <=capy_SizeArray)
    3614:	fe 01       	movw	r30, r28
    3616:	e9 5b       	subi	r30, 0xB9	; 185
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	de 01       	movw	r26, r28
    361c:	a5 5b       	subi	r26, 0xB5	; 181
    361e:	bf 4f       	sbci	r27, 0xFF	; 255
    3620:	90 81       	ld	r25, Z
    3622:	8c 91       	ld	r24, X
    3624:	89 17       	cp	r24, r25
    3626:	08 f0       	brcs	.+2      	; 0x362a <GetSetting_Clock+0x60e>
    3628:	a4 cd       	rjmp	.-1208   	; 0x3172 <GetSetting_Clock+0x156>
			_delay_ms(300);
			break ; /* to out from while loop */
		}
		local_counter++;
	}
}
    362a:	c5 5b       	subi	r28, 0xB5	; 181
    362c:	df 4f       	sbci	r29, 0xFF	; 255
    362e:	0f b6       	in	r0, 0x3f	; 63
    3630:	f8 94       	cli
    3632:	de bf       	out	0x3e, r29	; 62
    3634:	0f be       	out	0x3f, r0	; 63
    3636:	cd bf       	out	0x3d, r28	; 61
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	08 95       	ret

00003642 <UpdataSetting_Clock>:
void UpdataSetting_Clock(u8 *ptrcount_Second,u8 *ptrcount_Minutes,u8 *ptrcount_Hours,u8 *capy_u16PtrArray)
{
    3642:	df 93       	push	r29
    3644:	cf 93       	push	r28
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	28 97       	sbiw	r28, 0x08	; 8
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	f8 94       	cli
    3650:	de bf       	out	0x3e, r29	; 62
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	cd bf       	out	0x3d, r28	; 61
    3656:	9a 83       	std	Y+2, r25	; 0x02
    3658:	89 83       	std	Y+1, r24	; 0x01
    365a:	7c 83       	std	Y+4, r23	; 0x04
    365c:	6b 83       	std	Y+3, r22	; 0x03
    365e:	5e 83       	std	Y+6, r21	; 0x06
    3660:	4d 83       	std	Y+5, r20	; 0x05
    3662:	38 87       	std	Y+8, r19	; 0x08
    3664:	2f 83       	std	Y+7, r18	; 0x07

   *ptrcount_Hours  = 10*(capy_u16PtrArray[0]-48)+(capy_u16PtrArray[1]-48);
    3666:	ef 81       	ldd	r30, Y+7	; 0x07
    3668:	f8 85       	ldd	r31, Y+8	; 0x08
    366a:	80 81       	ld	r24, Z
    366c:	88 2f       	mov	r24, r24
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	9c 01       	movw	r18, r24
    3672:	22 0f       	add	r18, r18
    3674:	33 1f       	adc	r19, r19
    3676:	c9 01       	movw	r24, r18
    3678:	88 0f       	add	r24, r24
    367a:	99 1f       	adc	r25, r25
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	82 0f       	add	r24, r18
    3682:	93 1f       	adc	r25, r19
    3684:	28 2f       	mov	r18, r24
    3686:	8f 81       	ldd	r24, Y+7	; 0x07
    3688:	98 85       	ldd	r25, Y+8	; 0x08
    368a:	fc 01       	movw	r30, r24
    368c:	31 96       	adiw	r30, 0x01	; 1
    368e:	80 81       	ld	r24, Z
    3690:	82 0f       	add	r24, r18
    3692:	80 51       	subi	r24, 0x10	; 16
    3694:	ed 81       	ldd	r30, Y+5	; 0x05
    3696:	fe 81       	ldd	r31, Y+6	; 0x06
    3698:	80 83       	st	Z, r24
   *ptrcount_Minutes= 10*(capy_u16PtrArray[2]-48)+(capy_u16PtrArray[3]-48);
    369a:	8f 81       	ldd	r24, Y+7	; 0x07
    369c:	98 85       	ldd	r25, Y+8	; 0x08
    369e:	fc 01       	movw	r30, r24
    36a0:	32 96       	adiw	r30, 0x02	; 2
    36a2:	80 81       	ld	r24, Z
    36a4:	88 2f       	mov	r24, r24
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	9c 01       	movw	r18, r24
    36aa:	22 0f       	add	r18, r18
    36ac:	33 1f       	adc	r19, r19
    36ae:	c9 01       	movw	r24, r18
    36b0:	88 0f       	add	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	82 0f       	add	r24, r18
    36ba:	93 1f       	adc	r25, r19
    36bc:	28 2f       	mov	r18, r24
    36be:	8f 81       	ldd	r24, Y+7	; 0x07
    36c0:	98 85       	ldd	r25, Y+8	; 0x08
    36c2:	fc 01       	movw	r30, r24
    36c4:	33 96       	adiw	r30, 0x03	; 3
    36c6:	80 81       	ld	r24, Z
    36c8:	82 0f       	add	r24, r18
    36ca:	80 51       	subi	r24, 0x10	; 16
    36cc:	eb 81       	ldd	r30, Y+3	; 0x03
    36ce:	fc 81       	ldd	r31, Y+4	; 0x04
    36d0:	80 83       	st	Z, r24
   *ptrcount_Second = 10*(capy_u16PtrArray[4]-48)+(capy_u16PtrArray[5]-48);
    36d2:	8f 81       	ldd	r24, Y+7	; 0x07
    36d4:	98 85       	ldd	r25, Y+8	; 0x08
    36d6:	fc 01       	movw	r30, r24
    36d8:	34 96       	adiw	r30, 0x04	; 4
    36da:	80 81       	ld	r24, Z
    36dc:	88 2f       	mov	r24, r24
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	9c 01       	movw	r18, r24
    36e2:	22 0f       	add	r18, r18
    36e4:	33 1f       	adc	r19, r19
    36e6:	c9 01       	movw	r24, r18
    36e8:	88 0f       	add	r24, r24
    36ea:	99 1f       	adc	r25, r25
    36ec:	88 0f       	add	r24, r24
    36ee:	99 1f       	adc	r25, r25
    36f0:	82 0f       	add	r24, r18
    36f2:	93 1f       	adc	r25, r19
    36f4:	28 2f       	mov	r18, r24
    36f6:	8f 81       	ldd	r24, Y+7	; 0x07
    36f8:	98 85       	ldd	r25, Y+8	; 0x08
    36fa:	fc 01       	movw	r30, r24
    36fc:	35 96       	adiw	r30, 0x05	; 5
    36fe:	80 81       	ld	r24, Z
    3700:	82 0f       	add	r24, r18
    3702:	80 51       	subi	r24, 0x10	; 16
    3704:	e9 81       	ldd	r30, Y+1	; 0x01
    3706:	fa 81       	ldd	r31, Y+2	; 0x02
    3708:	80 83       	st	Z, r24

}
    370a:	28 96       	adiw	r28, 0x08	; 8
    370c:	0f b6       	in	r0, 0x3f	; 63
    370e:	f8 94       	cli
    3710:	de bf       	out	0x3e, r29	; 62
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	cd bf       	out	0x3d, r28	; 61
    3716:	cf 91       	pop	r28
    3718:	df 91       	pop	r29
    371a:	08 95       	ret

0000371c <TIMER_voidTimer0Init>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns No thing                                				    **/
/* Desc:This Function initializes Timer0							       	    **/
/*********************************************************************************/
void TIMER_voidTimer0Init(void)
{
    371c:	df 93       	push	r29
    371e:	cf 93       	push	r28
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
		}
	//set the value clear comprt mathch 
	TIM0_u8_OCR0_REG=VALUE_OCR;
	#elif WAVEFORM_GEN_MODE == CTC_MODE
	/*Set Timer 0 in CTC_MODE*/
	CLR_BIT(TIM0_u8_TCCR0_REG, TIM0_u8_TCCR0_WGM00);
    3724:	a3 e5       	ldi	r26, 0x53	; 83
    3726:	b0 e0       	ldi	r27, 0x00	; 0
    3728:	e3 e5       	ldi	r30, 0x53	; 83
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	80 81       	ld	r24, Z
    372e:	8f 7b       	andi	r24, 0xBF	; 191
    3730:	8c 93       	st	X, r24
	SET_BIT(TIM0_u8_TCCR0_REG, TIM0_u8_TCCR0_WGM01);
    3732:	a3 e5       	ldi	r26, 0x53	; 83
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	e3 e5       	ldi	r30, 0x53	; 83
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	80 81       	ld	r24, Z
    373c:	88 60       	ori	r24, 0x08	; 8
    373e:	8c 93       	st	X, r24
	//set the value clear comprt mathch
	//TIM0_u8_OCR0_REG=VALUE_OCR;
	switch(OC0_ACTION)
	{
		case NON_PWM_NORMAL_PORT_OPRETATION:				/*Normal Port Operation*/
															CLR_BIT(TIM0_u8_TCCR0_REG, TIM0_u8_TCCR0_COM00);
    3740:	a3 e5       	ldi	r26, 0x53	; 83
    3742:	b0 e0       	ldi	r27, 0x00	; 0
    3744:	e3 e5       	ldi	r30, 0x53	; 83
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	80 81       	ld	r24, Z
    374a:	8f 7e       	andi	r24, 0xEF	; 239
    374c:	8c 93       	st	X, r24
															CLR_BIT(TIM0_u8_TCCR0_REG, TIM0_u8_TCCR0_COM01);
    374e:	a3 e5       	ldi	r26, 0x53	; 83
    3750:	b0 e0       	ldi	r27, 0x00	; 0
    3752:	e3 e5       	ldi	r30, 0x53	; 83
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	80 81       	ld	r24, Z
    3758:	8f 7d       	andi	r24, 0xDF	; 223
    375a:	8c 93       	st	X, r24
															SET_BIT(TIM0_u8_TCCR0_REG, TIM0_u8_TCCR0_COM01);
															break;
		default: break;
	}
        #if ISR_ENABLE == ENABLE
		SET_BIT(TIM0_u8_TIMSK_REG,TIM0_u8_TIMSK_OCIE0);
    375c:	a9 e5       	ldi	r26, 0x59	; 89
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	e9 e5       	ldi	r30, 0x59	; 89
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	82 60       	ori	r24, 0x02	; 2
    3768:	8c 93       	st	X, r24
		#elif ISR_ENABLE == DISENABLE 
		CLR_BIT(TIM0_u8_TIMSK_REG,TIM0_u8_TIMSK_OCIE0);
		#endif 
	//set the value clear compare match
	TIM0_u8_OCR0_REG=VALUE_OCR;
    376a:	ec e5       	ldi	r30, 0x5C	; 92
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	83 e6       	ldi	r24, 0x63	; 99
    3770:	80 83       	st	Z, r24
	TIM0_u8_OCR0_REG=VALUE_OCR;
	#endif

    
	/*Set The Prescaler to be 8*/
	TIM0_u8_TCCR0_REG &= PRESCALER_MASK;
    3772:	a3 e5       	ldi	r26, 0x53	; 83
    3774:	b0 e0       	ldi	r27, 0x00	; 0
    3776:	e3 e5       	ldi	r30, 0x53	; 83
    3778:	f0 e0       	ldi	r31, 0x00	; 0
    377a:	80 81       	ld	r24, Z
    377c:	88 7f       	andi	r24, 0xF8	; 248
    377e:	8c 93       	st	X, r24
	TIM0_u8_TCCR0_REG |= PRESCALER_TYPE;
    3780:	a3 e5       	ldi	r26, 0x53	; 83
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	e3 e5       	ldi	r30, 0x53	; 83
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	80 81       	ld	r24, Z
    378a:	82 60       	ori	r24, 0x02	; 2
    378c:	8c 93       	st	X, r24
}
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	08 95       	ret

00003794 <TIMER_u8Timer0SetCallBackOFV>:
/* I/P Parameters: 	Pointer to Function							          		    **/
/* Returns:it returns Error stutes                                 				    **/
/* Desc:This Function Timer0 ISR 							       	    **/
/*********************************************************************************/
u8 TIMER_u8Timer0SetCallBackOFV(void(*capy_pf)(void))  
{
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	00 d0       	rcall	.+0      	; 0x379a <TIMER_u8Timer0SetCallBackOFV+0x6>
    379a:	0f 92       	push	r0
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	9b 83       	std	Y+3, r25	; 0x03
    37a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus =STD_TYPES_OK;
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	89 83       	std	Y+1, r24	; 0x01
	if(capy_pf!=NULL)
    37a8:	8a 81       	ldd	r24, Y+2	; 0x02
    37aa:	9b 81       	ldd	r25, Y+3	; 0x03
    37ac:	00 97       	sbiw	r24, 0x00	; 0
    37ae:	39 f0       	breq	.+14     	; 0x37be <TIMER_u8Timer0SetCallBackOFV+0x2a>
	{
		TIMER_pvTimer0ISROFV=capy_pf;
    37b0:	8a 81       	ldd	r24, Y+2	; 0x02
    37b2:	9b 81       	ldd	r25, Y+3	; 0x03
    37b4:	90 93 2c 01 	sts	0x012C, r25
    37b8:	80 93 2b 01 	sts	0x012B, r24
    37bc:	01 c0       	rjmp	.+2      	; 0x37c0 <TIMER_u8Timer0SetCallBackOFV+0x2c>

	}
	else 
	{
		Local_u8ErrorStatus =STD_TYPES_NOK;
    37be:	19 82       	std	Y+1, r1	; 0x01

	}
	return Local_u8ErrorStatus ;
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
}    
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	cf 91       	pop	r28
    37ca:	df 91       	pop	r29
    37cc:	08 95       	ret

000037ce <__vector_11>:
/* Desc:Function Sets the call back of Timer0 of over flow 	normal mode 						       	    **/
/*********************************************************************************/
/***********************************Timer0 ISR for over flow ***********************************/
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    37ce:	1f 92       	push	r1
    37d0:	0f 92       	push	r0
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	0f 92       	push	r0
    37d6:	11 24       	eor	r1, r1
    37d8:	2f 93       	push	r18
    37da:	3f 93       	push	r19
    37dc:	4f 93       	push	r20
    37de:	5f 93       	push	r21
    37e0:	6f 93       	push	r22
    37e2:	7f 93       	push	r23
    37e4:	8f 93       	push	r24
    37e6:	9f 93       	push	r25
    37e8:	af 93       	push	r26
    37ea:	bf 93       	push	r27
    37ec:	ef 93       	push	r30
    37ee:	ff 93       	push	r31
    37f0:	df 93       	push	r29
    37f2:	cf 93       	push	r28
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
	static u16 local_counter=0;
	local_counter++;
    37f8:	80 91 31 01 	lds	r24, 0x0131
    37fc:	90 91 32 01 	lds	r25, 0x0132
    3800:	01 96       	adiw	r24, 0x01	; 1
    3802:	90 93 32 01 	sts	0x0132, r25
    3806:	80 93 31 01 	sts	0x0131, r24
	if(local_counter==3907)
    380a:	80 91 31 01 	lds	r24, 0x0131
    380e:	90 91 32 01 	lds	r25, 0x0132
    3812:	2f e0       	ldi	r18, 0x0F	; 15
    3814:	83 34       	cpi	r24, 0x43	; 67
    3816:	92 07       	cpc	r25, r18
    3818:	99 f4       	brne	.+38     	; 0x3840 <__vector_11+0x72>
	{
		// clear countetr 
		local_counter=0;
    381a:	10 92 32 01 	sts	0x0132, r1
    381e:	10 92 31 01 	sts	0x0131, r1
		TIM0_u8_TCNT0_REG=START_TICK;
    3822:	e2 e5       	ldi	r30, 0x52	; 82
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	80 ec       	ldi	r24, 0xC0	; 192
    3828:	80 83       	st	Z, r24
		//call callback function from Applaction 
	    if(TIMER_pvTimer0ISROFV!=NULL)
    382a:	80 91 2b 01 	lds	r24, 0x012B
    382e:	90 91 2c 01 	lds	r25, 0x012C
    3832:	00 97       	sbiw	r24, 0x00	; 0
    3834:	29 f0       	breq	.+10     	; 0x3840 <__vector_11+0x72>
	    {
		TIMER_pvTimer0ISROFV();	
    3836:	e0 91 2b 01 	lds	r30, 0x012B
    383a:	f0 91 2c 01 	lds	r31, 0x012C
    383e:	09 95       	icall
	    }
	}
	
}
    3840:	cf 91       	pop	r28
    3842:	df 91       	pop	r29
    3844:	ff 91       	pop	r31
    3846:	ef 91       	pop	r30
    3848:	bf 91       	pop	r27
    384a:	af 91       	pop	r26
    384c:	9f 91       	pop	r25
    384e:	8f 91       	pop	r24
    3850:	7f 91       	pop	r23
    3852:	6f 91       	pop	r22
    3854:	5f 91       	pop	r21
    3856:	4f 91       	pop	r20
    3858:	3f 91       	pop	r19
    385a:	2f 91       	pop	r18
    385c:	0f 90       	pop	r0
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	0f 90       	pop	r0
    3862:	1f 90       	pop	r1
    3864:	18 95       	reti

00003866 <TIMER_u8Timer0SetCallBackOCR>:
/* I/P Parameters: 	POinter to Function							          		    **/
/* Returns:it returns Error stutes                                				    **/
/* Desc:This Function Sets the call back of Timer0	CTC Mode  							       	    **/
/*********************************************************************************/
u8 TIMER_u8Timer0SetCallBackOCR(void(*capy_pf)(void))  
{
    3866:	df 93       	push	r29
    3868:	cf 93       	push	r28
    386a:	00 d0       	rcall	.+0      	; 0x386c <TIMER_u8Timer0SetCallBackOCR+0x6>
    386c:	0f 92       	push	r0
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	9b 83       	std	Y+3, r25	; 0x03
    3874:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus =STD_TYPES_OK;
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	89 83       	std	Y+1, r24	; 0x01
	if(capy_pf!=NULL)
    387a:	8a 81       	ldd	r24, Y+2	; 0x02
    387c:	9b 81       	ldd	r25, Y+3	; 0x03
    387e:	00 97       	sbiw	r24, 0x00	; 0
    3880:	39 f0       	breq	.+14     	; 0x3890 <TIMER_u8Timer0SetCallBackOCR+0x2a>
	{
		TIMER_pvTimer0ISROCR=capy_pf;
    3882:	8a 81       	ldd	r24, Y+2	; 0x02
    3884:	9b 81       	ldd	r25, Y+3	; 0x03
    3886:	90 93 2e 01 	sts	0x012E, r25
    388a:	80 93 2d 01 	sts	0x012D, r24
    388e:	01 c0       	rjmp	.+2      	; 0x3892 <TIMER_u8Timer0SetCallBackOCR+0x2c>
	}
	else 
	{
		Local_u8ErrorStatus =STD_TYPES_NOK;
    3890:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus ;
    3892:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	cf 91       	pop	r28
    389c:	df 91       	pop	r29
    389e:	08 95       	ret

000038a0 <__vector_10>:
/* Desc:This Function Timer0 ISR  of  CTC Mode 							       	    **/
/*********************************************************************************/
/***********************************Timer0 ISR forCompare Match Event***********************************/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    38a0:	1f 92       	push	r1
    38a2:	0f 92       	push	r0
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	0f 92       	push	r0
    38a8:	11 24       	eor	r1, r1
    38aa:	2f 93       	push	r18
    38ac:	3f 93       	push	r19
    38ae:	4f 93       	push	r20
    38b0:	5f 93       	push	r21
    38b2:	6f 93       	push	r22
    38b4:	7f 93       	push	r23
    38b6:	8f 93       	push	r24
    38b8:	9f 93       	push	r25
    38ba:	af 93       	push	r26
    38bc:	bf 93       	push	r27
    38be:	ef 93       	push	r30
    38c0:	ff 93       	push	r31
    38c2:	df 93       	push	r29
    38c4:	cf 93       	push	r28
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
	static u16 local_counter=0;
	local_counter++;
    38ca:	80 91 33 01 	lds	r24, 0x0133
    38ce:	90 91 34 01 	lds	r25, 0x0134
    38d2:	01 96       	adiw	r24, 0x01	; 1
    38d4:	90 93 34 01 	sts	0x0134, r25
    38d8:	80 93 33 01 	sts	0x0133, r24
	if(local_counter==10000)
    38dc:	80 91 33 01 	lds	r24, 0x0133
    38e0:	90 91 34 01 	lds	r25, 0x0134
    38e4:	27 e2       	ldi	r18, 0x27	; 39
    38e6:	80 31       	cpi	r24, 0x10	; 16
    38e8:	92 07       	cpc	r25, r18
    38ea:	79 f4       	brne	.+30     	; 0x390a <__vector_10+0x6a>
	{
		// clear countetr 
		local_counter=0;
    38ec:	10 92 34 01 	sts	0x0134, r1
    38f0:	10 92 33 01 	sts	0x0133, r1
		
		//call callback function from Applaction 
	    if(TIMER_pvTimer0ISROCR!=NULL)
    38f4:	80 91 2d 01 	lds	r24, 0x012D
    38f8:	90 91 2e 01 	lds	r25, 0x012E
    38fc:	00 97       	sbiw	r24, 0x00	; 0
    38fe:	29 f0       	breq	.+10     	; 0x390a <__vector_10+0x6a>
	    {
		TIMER_pvTimer0ISROCR();	
    3900:	e0 91 2d 01 	lds	r30, 0x012D
    3904:	f0 91 2e 01 	lds	r31, 0x012E
    3908:	09 95       	icall

	    }
	}
	
}
    390a:	cf 91       	pop	r28
    390c:	df 91       	pop	r29
    390e:	ff 91       	pop	r31
    3910:	ef 91       	pop	r30
    3912:	bf 91       	pop	r27
    3914:	af 91       	pop	r26
    3916:	9f 91       	pop	r25
    3918:	8f 91       	pop	r24
    391a:	7f 91       	pop	r23
    391c:	6f 91       	pop	r22
    391e:	5f 91       	pop	r21
    3920:	4f 91       	pop	r20
    3922:	3f 91       	pop	r19
    3924:	2f 91       	pop	r18
    3926:	0f 90       	pop	r0
    3928:	0f be       	out	0x3f, r0	; 63
    392a:	0f 90       	pop	r0
    392c:	1f 90       	pop	r1
    392e:	18 95       	reti

00003930 <TIMER_voidTimer1Init>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns No thing                                				    **/
/* Desc:This Function initializes Timer1							       	    **/
/*********************************************************************************/
void TIMER_voidTimer1Init(void)
{
    3930:	df 93       	push	r29
    3932:	cf 93       	push	r28
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
	#if  WAVEFORM_GEN_MODET1  == NORMAL_MODE
	/*Select The Normal Mode*/
	CLR_BIT(TIM1_u8_TCCR1A_REG, TIM1_u8_TCCR1A_WGM10);
    3938:	af e4       	ldi	r26, 0x4F	; 79
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	ef e4       	ldi	r30, 0x4F	; 79
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	80 81       	ld	r24, Z
    3942:	8e 7f       	andi	r24, 0xFE	; 254
    3944:	8c 93       	st	X, r24
	CLR_BIT(TIM1_u8_TCCR1A_REG, TIM1_u8_TCCR1A_WGM11);
    3946:	af e4       	ldi	r26, 0x4F	; 79
    3948:	b0 e0       	ldi	r27, 0x00	; 0
    394a:	ef e4       	ldi	r30, 0x4F	; 79
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	80 81       	ld	r24, Z
    3950:	8d 7f       	andi	r24, 0xFD	; 253
    3952:	8c 93       	st	X, r24
	CLR_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_WGM12);
    3954:	ae e4       	ldi	r26, 0x4E	; 78
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	ee e4       	ldi	r30, 0x4E	; 78
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	80 81       	ld	r24, Z
    395e:	87 7f       	andi	r24, 0xF7	; 247
    3960:	8c 93       	st	X, r24
	CLR_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_WGM13);
    3962:	ae e4       	ldi	r26, 0x4E	; 78
    3964:	b0 e0       	ldi	r27, 0x00	; 0
    3966:	ee e4       	ldi	r30, 0x4E	; 78
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	80 81       	ld	r24, Z
    396c:	8f 7e       	andi	r24, 0xEF	; 239
    396e:	8c 93       	st	X, r24
																		break;
			default: break;
			}

	/*Set Prescaler to be 8*/
	CLR_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_CS10);
    3970:	ae e4       	ldi	r26, 0x4E	; 78
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	ee e4       	ldi	r30, 0x4E	; 78
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	80 81       	ld	r24, Z
    397a:	8e 7f       	andi	r24, 0xFE	; 254
    397c:	8c 93       	st	X, r24
	SET_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_CS11);
    397e:	ae e4       	ldi	r26, 0x4E	; 78
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	ee e4       	ldi	r30, 0x4E	; 78
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	82 60       	ori	r24, 0x02	; 2
    398a:	8c 93       	st	X, r24
	CLR_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_CS12);
    398c:	ae e4       	ldi	r26, 0x4E	; 78
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	ee e4       	ldi	r30, 0x4E	; 78
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	8b 7f       	andi	r24, 0xFB	; 251
    3998:	8c 93       	st	X, r24

}
    399a:	cf 91       	pop	r28
    399c:	df 91       	pop	r29
    399e:	08 95       	ret

000039a0 <TIMER_voidTimer0SetCompareValue>:
/* Desc:This Function Sets the compare value of timer 0					       	**/
/*********************************************************************************/
/* Copy_u16CompareValue Options: Compare value assigned directly				**/
/*********************************************************************************/
void TIMER_voidTimer0SetCompareValue(u8 Copy_u8CompareValue)
{
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	0f 92       	push	r0
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Compare Value to the OCR0 Register*/
	TIM0_u8_OCR0_REG = Copy_u8CompareValue;
    39ac:	ec e5       	ldi	r30, 0x5C	; 92
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
    39b2:	80 83       	st	Z, r24
}
    39b4:	0f 90       	pop	r0
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	08 95       	ret

000039bc <TIMER_voidTimer1ASetCompareValue>:
/* Desc:This Function Sets the compare value of timer 1 - A				       	**/
/*********************************************************************************/
/* Copy_u16CompareValue Options: Compare value assigned directly				**/
/*********************************************************************************/
void TIMER_voidTimer1ASetCompareValue(u16 Copy_u16CompareValue)
{
    39bc:	df 93       	push	r29
    39be:	cf 93       	push	r28
    39c0:	00 d0       	rcall	.+0      	; 0x39c2 <TIMER_voidTimer1ASetCompareValue+0x6>
    39c2:	cd b7       	in	r28, 0x3d	; 61
    39c4:	de b7       	in	r29, 0x3e	; 62
    39c6:	9a 83       	std	Y+2, r25	; 0x02
    39c8:	89 83       	std	Y+1, r24	; 0x01
	/* Set The Compare Value To OCR1 Channel A Register*/
	TIM1_u16_OCR1A_REG = Copy_u16CompareValue;
    39ca:	ea e4       	ldi	r30, 0x4A	; 74
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	9a 81       	ldd	r25, Y+2	; 0x02
    39d2:	91 83       	std	Z+1, r25	; 0x01
    39d4:	80 83       	st	Z, r24
}
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
    39da:	cf 91       	pop	r28
    39dc:	df 91       	pop	r29
    39de:	08 95       	ret

000039e0 <TIMER_voidTimer1BSetCompareValue>:
/* Desc:This Function Sets the compare value of timer 1 - B				       	**/
/*********************************************************************************/
/* Copy_u16CompareValue Options: Compare value assigned directly				**/
/*********************************************************************************/
void TIMER_voidTimer1BSetCompareValue(u16 Copy_u16CompareValue)
{
    39e0:	df 93       	push	r29
    39e2:	cf 93       	push	r28
    39e4:	00 d0       	rcall	.+0      	; 0x39e6 <TIMER_voidTimer1BSetCompareValue+0x6>
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
    39ea:	9a 83       	std	Y+2, r25	; 0x02
    39ec:	89 83       	std	Y+1, r24	; 0x01
	/* Set The Compare Value To OCR1 Channel B Register*/
	TIM1_u16_OCR1B_REG = Copy_u16CompareValue;
    39ee:	e8 e4       	ldi	r30, 0x48	; 72
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	9a 81       	ldd	r25, Y+2	; 0x02
    39f6:	91 83       	std	Z+1, r25	; 0x01
    39f8:	80 83       	st	Z, r24
}
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	08 95       	ret

00003a04 <TIMER_voidTimer1SetInputCaptureValue>:
/* Desc:This Function Sets the input capture value of timer 1			       	**/
/*********************************************************************************/
/* Copy_u16CaptureValue Options: Capture value assigned directly				**/
/*********************************************************************************/
void TIMER_voidTimer1SetInputCaptureValue(u16 Copy_u16CaptureValue)
{
    3a04:	df 93       	push	r29
    3a06:	cf 93       	push	r28
    3a08:	00 d0       	rcall	.+0      	; 0x3a0a <TIMER_voidTimer1SetInputCaptureValue+0x6>
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
    3a0e:	9a 83       	std	Y+2, r25	; 0x02
    3a10:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Input Capture Value to ICR1 Register*/
	TIM1_u16_ICR1_REG = Copy_u16CaptureValue;
    3a12:	e6 e4       	ldi	r30, 0x46	; 70
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1a:	91 83       	std	Z+1, r25	; 0x01
    3a1c:	80 83       	st	Z, r24
}
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <ICU_voidInit>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns No thing                                				    **/
/* Desc:This Function initializes Input Capture unit				       	    **/
/*********************************************************************************/
void ICU_voidInit(void)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
	/*Set Trigger to rising edge initially*/
	SET_BIT(TIM1_u8_TCCR1B_REG,TIM1_u8_TCCR1B_ICES1);
    3a30:	ae e4       	ldi	r26, 0x4E	; 78
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	ee e4       	ldi	r30, 0x4E	; 78
    3a36:	f0 e0       	ldi	r31, 0x00	; 0
    3a38:	80 81       	ld	r24, Z
    3a3a:	80 64       	ori	r24, 0x40	; 64
    3a3c:	8c 93       	st	X, r24

	/*Enable The ICU Interrupt*/
	SET_BIT(TIM0_u8_TIMSK_REG, TIM0_u8_TIMSK_TICIE1);
    3a3e:	a9 e5       	ldi	r26, 0x59	; 89
    3a40:	b0 e0       	ldi	r27, 0x00	; 0
    3a42:	e9 e5       	ldi	r30, 0x59	; 89
    3a44:	f0 e0       	ldi	r31, 0x00	; 0
    3a46:	80 81       	ld	r24, Z
    3a48:	80 62       	ori	r24, 0x20	; 32
    3a4a:	8c 93       	st	X, r24
}
    3a4c:	cf 91       	pop	r28
    3a4e:	df 91       	pop	r29
    3a50:	08 95       	ret

00003a52 <ICU_voidSetTrigger>:
/* Desc:This Function sets the trigger source of Input Capture unit	    	    **/
/*********************************************************************************/
/* Copy_u8TriggerSource Options: RISING_EDGE, FALLING_EDGE						**/
/*********************************************************************************/
void ICU_voidSetTrigger(u8 Copy_u8TriggerSource)
{
    3a52:	df 93       	push	r29
    3a54:	cf 93       	push	r28
    3a56:	00 d0       	rcall	.+0      	; 0x3a58 <ICU_voidSetTrigger+0x6>
    3a58:	0f 92       	push	r0
    3a5a:	cd b7       	in	r28, 0x3d	; 61
    3a5c:	de b7       	in	r29, 0x3e	; 62
    3a5e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8TriggerSource)
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	28 2f       	mov	r18, r24
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	3b 83       	std	Y+3, r19	; 0x03
    3a68:	2a 83       	std	Y+2, r18	; 0x02
    3a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a6e:	00 97       	sbiw	r24, 0x00	; 0
    3a70:	31 f0       	breq	.+12     	; 0x3a7e <ICU_voidSetTrigger+0x2c>
    3a72:	2a 81       	ldd	r18, Y+2	; 0x02
    3a74:	3b 81       	ldd	r19, Y+3	; 0x03
    3a76:	21 30       	cpi	r18, 0x01	; 1
    3a78:	31 05       	cpc	r19, r1
    3a7a:	49 f0       	breq	.+18     	; 0x3a8e <ICU_voidSetTrigger+0x3c>
    3a7c:	0f c0       	rjmp	.+30     	; 0x3a9c <ICU_voidSetTrigger+0x4a>
	{
		case RISING_EDGE:
			/*Set The Rising Edge to be the trigger source*/
			SET_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_ICES1);
    3a7e:	ae e4       	ldi	r26, 0x4E	; 78
    3a80:	b0 e0       	ldi	r27, 0x00	; 0
    3a82:	ee e4       	ldi	r30, 0x4E	; 78
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	80 81       	ld	r24, Z
    3a88:	80 64       	ori	r24, 0x40	; 64
    3a8a:	8c 93       	st	X, r24
    3a8c:	07 c0       	rjmp	.+14     	; 0x3a9c <ICU_voidSetTrigger+0x4a>
			break;
		case FALLING_EDGE:
			/*Set The Falling Edge to be the trigger source*/
			CLR_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_ICES1);
    3a8e:	ae e4       	ldi	r26, 0x4E	; 78
    3a90:	b0 e0       	ldi	r27, 0x00	; 0
    3a92:	ee e4       	ldi	r30, 0x4E	; 78
    3a94:	f0 e0       	ldi	r31, 0x00	; 0
    3a96:	80 81       	ld	r24, Z
    3a98:	8f 7b       	andi	r24, 0xBF	; 191
    3a9a:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	0f 90       	pop	r0
    3aa2:	cf 91       	pop	r28
    3aa4:	df 91       	pop	r29
    3aa6:	08 95       	ret

00003aa8 <ICU_u16ReadInputCapture>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns u16	                                				    **/
/* Desc:This Function reads the value captured by Input Capture unit    	    **/
/*********************************************************************************/
u16 ICU_u16ReadInputCapture(void)
{
    3aa8:	df 93       	push	r29
    3aaa:	cf 93       	push	r28
    3aac:	cd b7       	in	r28, 0x3d	; 61
    3aae:	de b7       	in	r29, 0x3e	; 62
	/*Get The Captured Value From ICR1 Register*/
	return TIM1_u16_ICR1_REG;
    3ab0:	e6 e4       	ldi	r30, 0x46	; 70
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	80 81       	ld	r24, Z
    3ab6:	91 81       	ldd	r25, Z+1	; 0x01
}
    3ab8:	cf 91       	pop	r28
    3aba:	df 91       	pop	r29
    3abc:	08 95       	ret

00003abe <ICU_voidInterruptDisbale>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns Nothing                               				    **/
/* Desc:This Function disable the interrupt of Input Capture unit	    	    **/
/*********************************************************************************/
void ICU_voidInterruptDisbale(void)
{
    3abe:	df 93       	push	r29
    3ac0:	cf 93       	push	r28
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
	/*Disable The ICU Interrupt*/
	CLR_BIT(TIM0_u8_TIMSK_REG, TIM0_u8_TIMSK_TICIE1);
    3ac6:	a9 e5       	ldi	r26, 0x59	; 89
    3ac8:	b0 e0       	ldi	r27, 0x00	; 0
    3aca:	e9 e5       	ldi	r30, 0x59	; 89
    3acc:	f0 e0       	ldi	r31, 0x00	; 0
    3ace:	80 81       	ld	r24, Z
    3ad0:	8f 7d       	andi	r24, 0xDF	; 223
    3ad2:	8c 93       	st	X, r24
}
    3ad4:	cf 91       	pop	r28
    3ad6:	df 91       	pop	r29
    3ad8:	08 95       	ret

00003ada <ICU_voidSetCallBack>:
/* Desc:This Function Sets the call back of ICU								  	**/
/*********************************************************************************/
/* Copy_pvacationFunction Options: Address of the function to be executed	**/
/*********************************************************************************/
void ICU_voidSetCallBack(void (*Copy_pvacationFunction)(void))
{
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <ICU_voidSetCallBack+0x6>
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	9a 83       	std	Y+2, r25	; 0x02
    3ae6:	89 83       	std	Y+1, r24	; 0x01
	TIMER_pvICUNotificationFunction = *Copy_pvacationFunction;
    3ae8:	89 81       	ldd	r24, Y+1	; 0x01
    3aea:	9a 81       	ldd	r25, Y+2	; 0x02
    3aec:	90 93 30 01 	sts	0x0130, r25
    3af0:	80 93 2f 01 	sts	0x012F, r24
}
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <__vector_6>:

/***********************************ISR for ICU Capture Event***********************************/
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    3afe:	1f 92       	push	r1
    3b00:	0f 92       	push	r0
    3b02:	0f b6       	in	r0, 0x3f	; 63
    3b04:	0f 92       	push	r0
    3b06:	11 24       	eor	r1, r1
    3b08:	2f 93       	push	r18
    3b0a:	3f 93       	push	r19
    3b0c:	4f 93       	push	r20
    3b0e:	5f 93       	push	r21
    3b10:	6f 93       	push	r22
    3b12:	7f 93       	push	r23
    3b14:	8f 93       	push	r24
    3b16:	9f 93       	push	r25
    3b18:	af 93       	push	r26
    3b1a:	bf 93       	push	r27
    3b1c:	ef 93       	push	r30
    3b1e:	ff 93       	push	r31
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	cd b7       	in	r28, 0x3d	; 61
    3b26:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvICUNotificationFunction != NULL)
    3b28:	80 91 2f 01 	lds	r24, 0x012F
    3b2c:	90 91 30 01 	lds	r25, 0x0130
    3b30:	00 97       	sbiw	r24, 0x00	; 0
    3b32:	29 f0       	breq	.+10     	; 0x3b3e <__vector_6+0x40>
	{
		/*Execute the global pointer to function*/
		TIMER_pvICUNotificationFunction();
    3b34:	e0 91 2f 01 	lds	r30, 0x012F
    3b38:	f0 91 30 01 	lds	r31, 0x0130
    3b3c:	09 95       	icall
	}
	else
	{
		/*Do Nothing*/
	}
}
    3b3e:	cf 91       	pop	r28
    3b40:	df 91       	pop	r29
    3b42:	ff 91       	pop	r31
    3b44:	ef 91       	pop	r30
    3b46:	bf 91       	pop	r27
    3b48:	af 91       	pop	r26
    3b4a:	9f 91       	pop	r25
    3b4c:	8f 91       	pop	r24
    3b4e:	7f 91       	pop	r23
    3b50:	6f 91       	pop	r22
    3b52:	5f 91       	pop	r21
    3b54:	4f 91       	pop	r20
    3b56:	3f 91       	pop	r19
    3b58:	2f 91       	pop	r18
    3b5a:	0f 90       	pop	r0
    3b5c:	0f be       	out	0x3f, r0	; 63
    3b5e:	0f 90       	pop	r0
    3b60:	1f 90       	pop	r1
    3b62:	18 95       	reti

00003b64 <__udivmodqi4>:
    3b64:	99 1b       	sub	r25, r25
    3b66:	79 e0       	ldi	r23, 0x09	; 9
    3b68:	04 c0       	rjmp	.+8      	; 0x3b72 <__udivmodqi4_ep>

00003b6a <__udivmodqi4_loop>:
    3b6a:	99 1f       	adc	r25, r25
    3b6c:	96 17       	cp	r25, r22
    3b6e:	08 f0       	brcs	.+2      	; 0x3b72 <__udivmodqi4_ep>
    3b70:	96 1b       	sub	r25, r22

00003b72 <__udivmodqi4_ep>:
    3b72:	88 1f       	adc	r24, r24
    3b74:	7a 95       	dec	r23
    3b76:	c9 f7       	brne	.-14     	; 0x3b6a <__udivmodqi4_loop>
    3b78:	80 95       	com	r24
    3b7a:	08 95       	ret

00003b7c <__udivmodsi4>:
    3b7c:	a1 e2       	ldi	r26, 0x21	; 33
    3b7e:	1a 2e       	mov	r1, r26
    3b80:	aa 1b       	sub	r26, r26
    3b82:	bb 1b       	sub	r27, r27
    3b84:	fd 01       	movw	r30, r26
    3b86:	0d c0       	rjmp	.+26     	; 0x3ba2 <__udivmodsi4_ep>

00003b88 <__udivmodsi4_loop>:
    3b88:	aa 1f       	adc	r26, r26
    3b8a:	bb 1f       	adc	r27, r27
    3b8c:	ee 1f       	adc	r30, r30
    3b8e:	ff 1f       	adc	r31, r31
    3b90:	a2 17       	cp	r26, r18
    3b92:	b3 07       	cpc	r27, r19
    3b94:	e4 07       	cpc	r30, r20
    3b96:	f5 07       	cpc	r31, r21
    3b98:	20 f0       	brcs	.+8      	; 0x3ba2 <__udivmodsi4_ep>
    3b9a:	a2 1b       	sub	r26, r18
    3b9c:	b3 0b       	sbc	r27, r19
    3b9e:	e4 0b       	sbc	r30, r20
    3ba0:	f5 0b       	sbc	r31, r21

00003ba2 <__udivmodsi4_ep>:
    3ba2:	66 1f       	adc	r22, r22
    3ba4:	77 1f       	adc	r23, r23
    3ba6:	88 1f       	adc	r24, r24
    3ba8:	99 1f       	adc	r25, r25
    3baa:	1a 94       	dec	r1
    3bac:	69 f7       	brne	.-38     	; 0x3b88 <__udivmodsi4_loop>
    3bae:	60 95       	com	r22
    3bb0:	70 95       	com	r23
    3bb2:	80 95       	com	r24
    3bb4:	90 95       	com	r25
    3bb6:	9b 01       	movw	r18, r22
    3bb8:	ac 01       	movw	r20, r24
    3bba:	bd 01       	movw	r22, r26
    3bbc:	cf 01       	movw	r24, r30
    3bbe:	08 95       	ret

00003bc0 <__prologue_saves__>:
    3bc0:	2f 92       	push	r2
    3bc2:	3f 92       	push	r3
    3bc4:	4f 92       	push	r4
    3bc6:	5f 92       	push	r5
    3bc8:	6f 92       	push	r6
    3bca:	7f 92       	push	r7
    3bcc:	8f 92       	push	r8
    3bce:	9f 92       	push	r9
    3bd0:	af 92       	push	r10
    3bd2:	bf 92       	push	r11
    3bd4:	cf 92       	push	r12
    3bd6:	df 92       	push	r13
    3bd8:	ef 92       	push	r14
    3bda:	ff 92       	push	r15
    3bdc:	0f 93       	push	r16
    3bde:	1f 93       	push	r17
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	ca 1b       	sub	r28, r26
    3bea:	db 0b       	sbc	r29, r27
    3bec:	0f b6       	in	r0, 0x3f	; 63
    3bee:	f8 94       	cli
    3bf0:	de bf       	out	0x3e, r29	; 62
    3bf2:	0f be       	out	0x3f, r0	; 63
    3bf4:	cd bf       	out	0x3d, r28	; 61
    3bf6:	09 94       	ijmp

00003bf8 <__epilogue_restores__>:
    3bf8:	2a 88       	ldd	r2, Y+18	; 0x12
    3bfa:	39 88       	ldd	r3, Y+17	; 0x11
    3bfc:	48 88       	ldd	r4, Y+16	; 0x10
    3bfe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c00:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c02:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c04:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c06:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c08:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c0a:	b9 84       	ldd	r11, Y+9	; 0x09
    3c0c:	c8 84       	ldd	r12, Y+8	; 0x08
    3c0e:	df 80       	ldd	r13, Y+7	; 0x07
    3c10:	ee 80       	ldd	r14, Y+6	; 0x06
    3c12:	fd 80       	ldd	r15, Y+5	; 0x05
    3c14:	0c 81       	ldd	r16, Y+4	; 0x04
    3c16:	1b 81       	ldd	r17, Y+3	; 0x03
    3c18:	aa 81       	ldd	r26, Y+2	; 0x02
    3c1a:	b9 81       	ldd	r27, Y+1	; 0x01
    3c1c:	ce 0f       	add	r28, r30
    3c1e:	d1 1d       	adc	r29, r1
    3c20:	0f b6       	in	r0, 0x3f	; 63
    3c22:	f8 94       	cli
    3c24:	de bf       	out	0x3e, r29	; 62
    3c26:	0f be       	out	0x3f, r0	; 63
    3c28:	cd bf       	out	0x3d, r28	; 61
    3c2a:	ed 01       	movw	r28, r26
    3c2c:	08 95       	ret

00003c2e <itoa>:
    3c2e:	fb 01       	movw	r30, r22
    3c30:	9f 01       	movw	r18, r30
    3c32:	e8 94       	clt
    3c34:	42 30       	cpi	r20, 0x02	; 2
    3c36:	c4 f0       	brlt	.+48     	; 0x3c68 <itoa+0x3a>
    3c38:	45 32       	cpi	r20, 0x25	; 37
    3c3a:	b4 f4       	brge	.+44     	; 0x3c68 <itoa+0x3a>
    3c3c:	4a 30       	cpi	r20, 0x0A	; 10
    3c3e:	29 f4       	brne	.+10     	; 0x3c4a <itoa+0x1c>
    3c40:	97 fb       	bst	r25, 7
    3c42:	1e f4       	brtc	.+6      	; 0x3c4a <itoa+0x1c>
    3c44:	90 95       	com	r25
    3c46:	81 95       	neg	r24
    3c48:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4a:	64 2f       	mov	r22, r20
    3c4c:	77 27       	eor	r23, r23
    3c4e:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__udivmodhi4>
    3c52:	80 5d       	subi	r24, 0xD0	; 208
    3c54:	8a 33       	cpi	r24, 0x3A	; 58
    3c56:	0c f0       	brlt	.+2      	; 0x3c5a <itoa+0x2c>
    3c58:	89 5d       	subi	r24, 0xD9	; 217
    3c5a:	81 93       	st	Z+, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	00 97       	sbiw	r24, 0x00	; 0
    3c60:	a1 f7       	brne	.-24     	; 0x3c4a <itoa+0x1c>
    3c62:	16 f4       	brtc	.+4      	; 0x3c68 <itoa+0x3a>
    3c64:	5d e2       	ldi	r21, 0x2D	; 45
    3c66:	51 93       	st	Z+, r21
    3c68:	10 82       	st	Z, r1
    3c6a:	c9 01       	movw	r24, r18
    3c6c:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <strrev>

00003c70 <strrev>:
    3c70:	dc 01       	movw	r26, r24
    3c72:	fc 01       	movw	r30, r24
    3c74:	67 2f       	mov	r22, r23
    3c76:	71 91       	ld	r23, Z+
    3c78:	77 23       	and	r23, r23
    3c7a:	e1 f7       	brne	.-8      	; 0x3c74 <strrev+0x4>
    3c7c:	32 97       	sbiw	r30, 0x02	; 2
    3c7e:	04 c0       	rjmp	.+8      	; 0x3c88 <strrev+0x18>
    3c80:	7c 91       	ld	r23, X
    3c82:	6d 93       	st	X+, r22
    3c84:	70 83       	st	Z, r23
    3c86:	62 91       	ld	r22, -Z
    3c88:	ae 17       	cp	r26, r30
    3c8a:	bf 07       	cpc	r27, r31
    3c8c:	c8 f3       	brcs	.-14     	; 0x3c80 <strrev+0x10>
    3c8e:	08 95       	ret

00003c90 <__udivmodhi4>:
    3c90:	aa 1b       	sub	r26, r26
    3c92:	bb 1b       	sub	r27, r27
    3c94:	51 e1       	ldi	r21, 0x11	; 17
    3c96:	07 c0       	rjmp	.+14     	; 0x3ca6 <__udivmodhi4_ep>

00003c98 <__udivmodhi4_loop>:
    3c98:	aa 1f       	adc	r26, r26
    3c9a:	bb 1f       	adc	r27, r27
    3c9c:	a6 17       	cp	r26, r22
    3c9e:	b7 07       	cpc	r27, r23
    3ca0:	10 f0       	brcs	.+4      	; 0x3ca6 <__udivmodhi4_ep>
    3ca2:	a6 1b       	sub	r26, r22
    3ca4:	b7 0b       	sbc	r27, r23

00003ca6 <__udivmodhi4_ep>:
    3ca6:	88 1f       	adc	r24, r24
    3ca8:	99 1f       	adc	r25, r25
    3caa:	5a 95       	dec	r21
    3cac:	a9 f7       	brne	.-22     	; 0x3c98 <__udivmodhi4_loop>
    3cae:	80 95       	com	r24
    3cb0:	90 95       	com	r25
    3cb2:	bc 01       	movw	r22, r24
    3cb4:	cd 01       	movw	r24, r26
    3cb6:	08 95       	ret

00003cb8 <_exit>:
    3cb8:	f8 94       	cli

00003cba <__stop_program>:
    3cba:	ff cf       	rjmp	.-2      	; 0x3cba <__stop_program>
